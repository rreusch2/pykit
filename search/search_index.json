{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ChatKit Python documentation","text":"<p>Welcome to the ChatKit Python documentation. Use the navigation to browse guides and API reference.</p>"},{"location":"actions/","title":"ChatKit actions","text":"<p>Actions are a way for the ChatKit SDK frontend to trigger a streaming response without the user submitting a message. They can also be used to trigger side-effects outside ChatKit SDK.</p>"},{"location":"actions/#triggering-actions","title":"Triggering actions","text":""},{"location":"actions/#in-response-to-user-interaction-with-widgets","title":"In response to user interaction with widgets","text":"<p>Actions can be triggered by attaching an <code>ActionConfig</code> to any widget node that supports it. For example, you can respond to click events on Buttons. When a user clicks on this button, the action will be sent to your server where you can update the widget, run inference, stream new thread items, etc.</p> <pre><code>Button(\n    label=\"Example\",\n    onClickAction=ActionConfig(\n      type=\"example\",\n      payload={\"id\": 123},\n    )\n)\n</code></pre> <p>Actions can also be sent imperatively by your frontend with <code>sendAction()</code>. This is probably most useful when you need ChatKit to respond to interaction happening outside ChatKit, but it can also be used to chain actions when you need to respond on both the client and the server (more on that below).</p> <pre><code>await chatKit.sendAction({\n  type: \"example\",\n  payload: { id: 123 },\n});\n</code></pre>"},{"location":"actions/#handling-actions","title":"Handling actions","text":""},{"location":"actions/#on-the-server","title":"On the server","text":"<p>By default, actions are sent to your server. You can handle actions on your server by implementing the <code>action</code> method on <code>ChatKitServer</code>.</p> <pre><code>from collections.abc import AsyncIterator\nfrom datetime import datetime\nfrom typing import Any\n\nfrom chatkit.actions import Action\nfrom chatkit.server import ChatKitServer\nfrom chatkit.types import (\n    HiddenContextItem,\n    ThreadItemDoneEvent,\n    ThreadMetadata,\n    ThreadStreamEvent,\n    WidgetItem,\n)\n\nRequestContext = dict[str, Any]\n\n\nclass MyChatKitServer(ChatKitServer[RequestContext]):\n    async def action(\n        self,\n        thread: ThreadMetadata,\n        action: Action[str, Any],\n        sender: WidgetItem | None,\n        context: RequestContext,\n    ) -&gt; AsyncIterator[ThreadStreamEvent]:\n        if action.type == \"example\":\n            await do_thing(action.payload['id'])\n\n            # often you'll want to add a HiddenContextItem so the model\n            # can see that the user did something\n            hidden = HiddenContextItem(\n                id=self.store.generate_item_id(\"message\", thread, context),\n                thread_id=thread.id,\n                created_at=datetime.now(),\n                content=[\"&lt;USER_ACTION&gt;The user did a thing&lt;/USER_ACTION&gt;\"],\n            )\n            await self.store.add_thread_item(thread.id, hidden, context)\n\n            # then you might want to run inference to stream a response\n            # back to the user.\n            async for e in self.generate(context, thread):\n                yield e\n\n        if action.type == \"another.example\"\n          # ...\n</code></pre> <p>NOTE: As with any client/server interaction, actions and their payloads are sent by the client and should be treated as untrusted data.</p>"},{"location":"actions/#client","title":"Client","text":"<p>Sometimes you\u2019ll want to handle actions in your client integration. To do that you need to specify that the action should be sent to your client-side action handler by adding <code>handler=\"client</code> to the <code>ActionConfig</code>.</p> <pre><code>Button(\n    label=\"Example\",\n    onClickAction=ActionConfig(\n      type=\"example\",\n      payload={\"id\": 123},\n      handler=\"client\"\n    )\n)\n</code></pre> <p>Then, when the action is triggered, it will then be passed to a callback that you provide when instantiating ChatKit.</p> <pre><code>async function handleWidgetAction(action: {type: string, Record&lt;string, unknown&gt;}) {\n  if (action.type === \"example\") {\n    const res = await doSomething(action)\n\n    // You can fire off actions to your server from here as well.\n    // e.g. if you want to stream new thread items or update a widget.\n    await chatKit.sendAction({\n      type: \"example_complete\",\n      payload: res\n    })\n  }\n}\n\nchatKit.setOptions({\n  // other options...\n  widgets: { onAction: handleWidgetAction }\n})\n</code></pre>"},{"location":"actions/#strongly-typed-actions","title":"Strongly typed actions","text":"<p>By default <code>Action</code> and <code>ActionConfig</code> are not strongly typed. However, we do expose a <code>create</code> helper on <code>Action</code> making it easy to generate <code>ActionConfig</code>s from a set of strongly-typed actions.</p> <pre><code>class ExamplePayload(BaseModel)\n    id: int\n\nExampleAction = Action[Literal[\"example\"], ExamplePayload]\nOtherAction = Action[Literal[\"other\"], None]\n\nAppAction = Annotated[\n  ExampleAction\n  | OtherAction,\n  Field(discriminator=\"type\"),\n]\n\nActionAdapter: TypeAdapter[AppAction] = TypeAdapter(AppAction)\n\ndef parse_app_action(action: Action[str, Any]): AppAction\n  return ActionAdapter.validate_python(action)\n\n# Usage in a widget\n# Action provides a create helper which makes it easy to generate\n# ActionConfigs from strongly typed actions.\nButton(\n    label=\"Example\",\n    onClickAction=ExampleAction.create(ExamplePayload(id=123))\n)\n\n# usage in action handler\nclass MyChatKitServer(ChatKitServer[RequestContext])\n    async def action(\n        self,\n        thread: ThreadMetadata,\n        action: Action[str, Any],\n        sender: WidgetItem | None,\n        context: RequestContext,\n    ) -&gt; AsyncIterator[Event]:\n        # add custom error handling if needed\n        app_action = parse_app_action(action)\n        if (app_action.type == \"example\"):\n            await do_thing(app_action.payload.id)\n</code></pre>"},{"location":"actions/#use-widgets-and-actions-to-create-custom-forms","title":"Use widgets and actions to create custom forms","text":"<p>When widget nodes that take user input are mounted inside a <code>Form</code>, the values from those fields will be included in the <code>payload</code> of all actions that originate from within the <code>Form</code>.</p> <p>Form values are keyed in the <code>payload</code> by their <code>name</code> e.g.</p> <ul> <li><code>Select(name=\"title\")</code> \u2192 <code>action.payload.title</code></li> <li><code>Select(name=\"todo.title\")</code> \u2192 <code>action.payload.todo.title</code></li> </ul> <pre><code>Form(\n  direction=\"col\",\n  onSubmitAction=ActionConfig(\n      type=\"update_todo\",\n      payload={\"id\": todo.id}\n  ),\n  children=[\n    Title(value=\"Edit Todo\"),\n\n    Text(value=\"Title\", color=\"secondary\", size=\"sm\"),\n    Text(\n      value=todo.title,\n      editable=EditableProps(name=\"title\", required=True),\n    )\n\n    Text(value=\"Description\", color=\"secondary\", size=\"sm\"),\n    Text(\n      value=todo.description,\n      editable=EditableProps(name=\"description\"),\n    ),\n\n    Button(label=\"Save\", submit=true)\n  ]\n)\n\nclass MyChatKitServer(ChatKitServer[RequestContext])\n    async def action(\n        self,\n        thread: ThreadMetadata,\n        action: Action[str, Any],\n        sender: WidgetItem | None,\n        context: RequestContext,\n    ) -&gt; AsyncIterator[Event]:\n        if (action.type == \"update_todo\"):\n          id = action.payload['id']\n          # Any action that originates from within the Form will\n          # include title and description\n          title = action.payload['title']\n          description = action.payload['description']\n\n            # ...\n</code></pre>"},{"location":"actions/#validation","title":"Validation","text":"<p><code>Form</code> uses basic native form validation; enforcing <code>required</code> and <code>pattern</code> on fields where they are configured and blocking submission when the form has any invalid field.</p> <p>We may add new validation modes with better UX, more expressive validation, custom error display, etc in the future. Until then, widgets are not a great medium for complex forms with tricky validation. If you have this need, a better pattern would be to use client side action handling to trigger a modal, show a custom form there, then pass the result back into ChatKit with <code>sendAction</code>.</p>"},{"location":"actions/#treating-card-as-a-form","title":"Treating <code>Card</code> as a <code>Form</code>","text":"<p>You can pass <code>asForm=True</code> to <code>Card</code> and it will behave as a <code>Form</code>, running validation and passing collected fields to the Card\u2019s <code>confirm</code> action.</p>"},{"location":"actions/#payload-key-collisions","title":"Payload key collisions","text":"<p>If there is a naming collision with some other existing pre-defined key on your payload, the form value will be ignored. This is probably a bug, so we\u2019ll emit an <code>error</code> event when we see this.</p>"},{"location":"actions/#customize-how-actions-interact-with-loading-states-in-widgets","title":"Customize how actions interact with loading states in widgets","text":"<p>Use <code>ActionConfig.loadingBehavior</code> to control how actions trigger different loading states in a widget.</p> <pre><code>Button(\n    label=\"This make take a while...\",\n    onClickAction=ActionConfig(\n      type=\"long_running_action_that_should_block_other_ui_interactions\",\n      loadingBehavior=\"container\"\n    )\n)\n</code></pre> Value Behavior <code>auto</code> The action will adapt to how it\u2019s being used. (default) <code>self</code> The action triggers loading state on the widget node that the action was bound to. <code>container</code> The action triggers loading state on the entire widget container. This causes the widget to fade out slightly and become inert. <code>none</code> No loading state"},{"location":"actions/#using-auto-behavior","title":"Using <code>auto</code> behavior","text":"<p>Generally, we recommend using <code>auto</code>, which is the default. <code>auto</code> triggers loading states based on where the action is bound, for example:</p> <ul> <li><code>Button.onClickAction</code> \u2192 <code>self</code></li> <li><code>Select.onChangeAction</code> \u2192 <code>none</code></li> <li><code>Card.confirm.action</code> \u2192 <code>container</code></li> </ul>"},{"location":"server/","title":"ChatKit server integration","text":"<p>ChatKit's server integration offers a flexible and framework-agnostic approach for building realtime chat experiences. By implementing the <code>ChatKitServer</code> base class and its <code>respond</code> method, you can configure how your workflow responds to user inputs, from using tools to returning rich display widgets. The ChatKit server integration exposes a single endpoint and supports JSON and server\u2011sent events (SSE) to stream real-time updates.</p>"},{"location":"server/#installation","title":"Installation","text":"<p>Install the <code>openai-chatkit</code> package with the following command:</p> <pre><code>pip install openai-chatkit\n</code></pre>"},{"location":"server/#defining-a-server-class","title":"Defining a server class","text":"<p>The <code>ChatKitServer</code> base class is the main building block of the ChatKit server implementation.</p> <p>The <code>respond</code> method is executed each time a user sends a message. It is responsible for providing an answer by streaming a set of events. The <code>respond</code> method can return assistant messages, tool status messages, workflows, tasks, and widgets.</p> <p>ChatKit also provides helpers to implement <code>respond</code> using Agents SDK. The main one is <code>stream_agent_response</code>, which converts a streamed Agents SDK run into ChatKit events.</p> <p>If you've enabled model or tool options in the composer, they'll appear in <code>respond</code> under <code>input_user_message.inference_options</code>. Your integration is responsible for handling these values when performing inference.</p> <p>Example server implementation that calls the Agent SDK runner and streams the result to the ChatKit UI:</p> <pre><code>class MyChatKitServer(ChatKitServer):\n    def __init__(\n        self, data_store: Store, attachment_store: AttachmentStore | None = None\n    ):\n        super().__init__(data_store, attachment_store)\n\n    assistant_agent = Agent[AgentContext](\n        model=\"gpt-4.1\",\n        name=\"Assistant\",\n        instructions=\"You are a helpful assistant\"\n    )\n\n    async def respond(\n        self,\n        thread: ThreadMetadata,\n        input: UserMessageItem | None,\n        context: Any,\n    ) -&gt; AsyncIterator[ThreadStreamEvent]:\n        context = AgentContext(\n            thread=thread,\n            store=self.store,\n            request_context=context,\n        )\n        result = Runner.run_streamed(\n            self.assistant_agent,\n            await simple_to_agent_input(input) if input else [],\n            context=context,\n        )\n        async for event in stream_agent_response(\n            context,\n            result,\n        ):\n            yield event\n\n    # ...\n</code></pre>"},{"location":"server/#setting-up-the-endpoint","title":"Setting up the endpoint","text":"<p>ChatKit is server-agnostic. All communication happens through a single POST endpoint that returns either JSON directly or streams SSE JSON events.</p> <p>You are responsible for defining the endpoint using the web server framework of your choice.</p> <p>Example using ChatKit with FastAPI:</p> <pre><code>app = FastAPI()\ndata_store = PostgresStore()\nattachment_store = BlobStorageStore(data_store)\nserver = MyChatKitServer(data_store, attachment_store)\n\n@app.post(\"/chatkit\")\nasync def chatkit_endpoint(request: Request):\n    result = await server.process(await request.body(), {})\n    if isinstance(result, StreamingResult):\n        return StreamingResponse(result, media_type=\"text/event-stream\")\n    else:\n        return Response(content=result.json, media_type=\"application/json\")\n</code></pre>"},{"location":"server/#data-store","title":"Data store","text":"<p>ChatKit needs to store information about threads, messages, and attachments. The examples above use a provided development-only data store implementation using SQLite (<code>SQLiteStore</code>).</p> <p>You are responsible for implementing the <code>chatkit.store.Store</code> class using the data store of your choice. When implementing the store, you must allow for the Thread/Attachment/ThreadItem type shapes changing between library versions. The recommended approach for relational databases is to serialize models into JSON-typed columns instead of separating model fields across multiple columns.</p> <pre><code>class Store(ABC, Generic[TContext]):\n    def generate_thread_id(self, context: TContext) -&gt; str: ...\n\n    def generate_item_id(\n        self,\n        item_type: Literal[\"message\", \"tool_call\", \"task\", \"workflow\", \"attachment\"],\n        thread: ThreadMetadata,\n        context: TContext,\n    ) -&gt; str: ...\n\n    async def load_thread(self, thread_id: str, context: TContext) -&gt; ThreadMetadata: ...\n\n    async def save_thread(self, thread: ThreadMetadata, context: TContext) -&gt; None: ...\n\n    async def load_thread_items(\n        self,\n        thread_id: str,\n        after: str | None,\n        limit: int,\n        order: str,\n        context: TContext,\n    ) -&gt; Page[ThreadItem]: ...\n\n    async def save_attachment(self, attachment: Attachment, context: TContext) -&gt; None: ...\n\n    async def load_attachment(self, attachment_id: str, context: TContext) -&gt; Attachment: ...\n\n    async def delete_attachment(self, attachment_id: str, context: TContext) -&gt; None: ...\n\n    async def load_threads(\n        self,\n        limit: int,\n        after: str | None,\n        order: str,\n        context: TContext,\n    ) -&gt; Page[ThreadMetadata]: ...\n\n    async def add_thread_item(\n        self, thread_id: str, item: ThreadItem, context: TContext\n    ) -&gt; None: ...\n\n    async def save_item(self, thread_id: str, item: ThreadItem, context: TContext) -&gt; None: ...\n\n    async def load_item(self, thread_id: str, item_id: str, context: TContext) -&gt; ThreadItem: ...\n\n    async def delete_thread(self, thread_id: str, context: TContext) -&gt; None: ...\n</code></pre> <p>The default implementation prefixes identifiers (for example <code>msg_4f62d6a7f2c34bd084f57cfb3df9f6bd</code>) using UUID4 strings. Override <code>generate_thread_id</code> and/or <code>generate_item_id</code> if your integration needs deterministic or pre-allocated identifiers; they will be used whenever ChatKit needs to create a new thread id or a new thread item id.</p>"},{"location":"server/#attachment-store","title":"Attachment store","text":"<p>Users can upload attachments (files and images) to include with chat messages. You are responsible for providing a storage implementation and handling uploads. The <code>attachment_store</code> argument to <code>ChatKitServer</code> should implement the <code>AttachmentStore</code> interface. If not provided, operations on attachments will raise an error.</p> <p>ChatKit supports both direct uploads and two\u2011phase upload, configurable client-side via <code>ChatKitOptions.composer.attachments.uploadStrategy</code>.</p>"},{"location":"server/#access-control","title":"Access control","text":"<p>Attachment metadata and file bytes are not protected by ChatKit. Each <code>AttachmentStore</code> method receives your request context so you can enforce thread- and user-level authorization before handing out attachment IDs, bytes, or signed URLs. Deny access when the caller does not own the attachment, and generate download URLs that expire quickly. Skipping these checks can leak customer data.</p>"},{"location":"server/#direct-upload","title":"Direct upload","text":"<p>The direct upload URL is provided client-side as a create option.</p> <p>The client will POST <code>multipart/form-data</code> with a <code>file</code> field to that URL. The server should:</p> <ol> <li>persist the attachment metadata (<code>FileAttachment | ImageAttachment</code>) to the data store and the file bytes to your storage.</li> <li>respond with JSON representation of <code>FileAttachment | ImageAttachment</code>.</li> </ol>"},{"location":"server/#twophase-upload","title":"Two\u2011phase upload","text":"<ul> <li>Phase 1 (registration and upload URL provisioning): The client calls <code>attachments.create</code>. ChatKit persists a <code>FileAttachment | ImageAttachment</code> sets the <code>upload_url</code> and returns it. It's recommended to include the <code>id</code> of the <code>Attachment</code> in the <code>upload_url</code> so that you can associate the file bytes with the <code>Attachment</code>.</li> <li>Phase 2 (upload): The client POSTs the bytes to the returned <code>upload_url</code> with <code>multipart/form-data</code> field <code>file</code>.</li> </ul>"},{"location":"server/#previews","title":"Previews","text":"<p>To render thumbnails of an image attached to a user message, set <code>ImageAttachment.preview_url</code> to a renderable URL. If you need expiring URLs, do not persist the URL; generate it on demand when returning the attachment to the client.</p>"},{"location":"server/#attachmentstore-interface","title":"AttachmentStore interface","text":"<p>You implement the storage specifics by providing the <code>AttachmentStore</code> methods:</p> <pre><code>class AttachmentStore(ABC, Generic[TContext]):\n    async def delete_attachment(self, attachment_id: str, context: TContext) -&gt; None: ...\n    async def create_attachment(self, input: AttachmentCreateParams, context: TContext) -&gt; Attachment: ...\n    def generate_attachment_id(self, mime_type: str, context: TContext) -&gt; str: ...\n</code></pre> <p>Note: The store does not have to persist bytes itself. It can act as a proxy that issues signed URLs for upload and preview (e.g., S3/GCS/Azure), while your separate upload endpoint writes to object storage.</p>"},{"location":"server/#attaching-files-to-agent-sdk-inputs","title":"Attaching files to Agent SDK inputs","text":"<p>You are also responsible for deciding how to attach attachments to Agent SDK inputs. You can store files in your own storage and attach them as base64-encoded payloads or upload them to the OpenAI Files API and provide the file ID to the Agent SDK.</p> <p>The example below shows how to create base64-encoded payloads for attachments by customizing a <code>ThreadItemConverter</code>. The helper <code>read_attachment_bytes</code> stands in for whatever storage accessor you provide (for example, fetching from S3 or a database) because <code>AttachmentStore</code> only handles ChatKit protocol calls.</p> <pre><code>async def read_attachment_bytes(attachment_id: str) -&gt; bytes:\n    \"\"\"Replace with your blob-store fetch (S3, local disk, etc.).\"\"\"\n    ...\n\n\nclass MyConverter(ThreadItemConverter):\n    async def attachment_to_message_content(\n        self, input: Attachment\n    ) -&gt; ResponseInputContentParam:\n        content = await read_attachment_bytes(input.id)\n        data = (\n            \"data:\"\n            + str(input.mime_type)\n            + \";base64,\"\n            + base64.b64encode(content).decode(\"utf-8\")\n        )\n        if isinstance(input, ImageAttachment):\n            return ResponseInputImageParam(\n                type=\"input_image\",\n                detail=\"auto\",\n                image_url=data,\n            )\n        # Note: Agents SDK currently only supports pdf files as ResponseInputFileParam.\n        # To send other text file types, either convert them to pdf on the fly or\n        # add them as input text.\n        return ResponseInputFileParam(\n            type=\"input_file\",\n            file_data=data,\n            filename=input.name or \"unknown\",\n        )\n\n# In respond(...):\nresult = Runner.run_streamed(\n    assistant_agent,\n    await MyConverter().to_agent_input(input),\n    context=context,\n)\n</code></pre>"},{"location":"server/#client-tools-usage","title":"Client tools usage","text":"<p>The ChatKit server implementation can trigger client-side tools.</p> <p>The tool must be registered both when initializing ChatKit on the client and when setting up Agents SDK on the server.</p> <p>To trigger a client-side tool from Agents SDK, set <code>ctx.context.client_tool_call</code> in the tool implementation with the client-side tool name and arguments. The result of the client tool execution will be provided back to the model.</p> <p>Note: The agent behavior must be set to <code>tool_use_behavior=StopAtTools</code> with all client-side tools included in <code>stop_at_tool_names</code>. This causes the agent to stop generating new messages until the client tool call is acknowledged by the ChatKit UI.</p> <p>Note: Only one client tool call can be triggered per turn.</p> <p>Note: Client tools are client-side callbacks invoked by the agent during server-side inference. If you're interested in client-side callbacks triggered by a user interacting with a widget, refer to client actions.</p> <pre><code>@function_tool(description_override=\"Add an item to the user's todo list.\")\nasync def add_to_todo_list(ctx: RunContextWrapper[AgentContext], item: str) -&gt; None:\n    ctx.context.client_tool_call = ClientToolCall(\n        name=\"add_to_todo_list\",\n        arguments={\"item\": item},\n    )\n\nassistant_agent = Agent[AgentContext](\n    model=\"gpt-4.1\",\n    name=\"Assistant\",\n    instructions=\"You are a helpful assistant\",\n    tools=[add_to_todo_list],\n    tool_use_behavior=StopAtTools(stop_at_tool_names=[add_to_todo_list.name]),\n)\n</code></pre>"},{"location":"server/#agents-sdk-integration","title":"Agents SDK integration","text":"<p>The ChatKit server is independent of Agents SDK. As long as correct events are returned from the <code>respond</code> method, the ChatKit UI will display the conversation as expected.</p> <p>The ChatKit library provides helpers to integrate with Agents SDK:</p> <ul> <li><code>AgentContext</code> - The context type that should be used when calling Agents SDK. It provides helpers to stream events from tool calls, render widgets, and initiate client tool calls.</li> <li><code>stream_agent_response</code> - A helper to convert a streamed Agents SDK run into ChatKit events.</li> <li><code>ThreadItemConverter</code> - A helper class that you'll probably extend to convert ChatKit thread items to Agents SDK input items.</li> <li><code>simple_to_agent_input</code> - A helper function that uses the default thread item conversions. The default conversion is limited, but useful for getting started quickly.</li> </ul> <pre><code>async def respond([]\n    self,\n    thread: ThreadMetadata,\n    input: UserMessageItem | None,\n    context: Any,\n) -&gt; AsyncIterator[ThreadStreamEvent]:\n    context = AgentContext(\n        thread=thread,\n        store=self.store,\n        request_context=context,\n    )\n\n    result = Runner.run_streamed(\n        self.assistant_agent,\n        await simple_to_agent_input(input) if input else [],\n        context=context,\n    )\n\n    async for event in stream_agent_response(context, result):\n        yield event\n</code></pre>"},{"location":"server/#threaditemconverter","title":"ThreadItemConverter","text":"<p>Extend <code>ThreadItemConverter</code> when your integration supports:</p> <ul> <li>Attachments</li> <li>@-mentions (entity tagging)</li> <li><code>HiddenContextItem</code></li> <li>Custom thread item formats</li> </ul> <pre><code>from agents import Message, Runner, ResponseInputTextParam\nfrom chatkit.agents import AgentContext, ThreadItemConverter, stream_agent_response\nfrom chatkit.types import Attachment, HiddenContextItem, ThreadMetadata, UserMessageItem\n\n\nclass MyThreadConverter(ThreadItemConverter):\n    async def attachment_to_message_content(\n        self, attachment: Attachment\n    ) -&gt; ResponseInputTextParam:\n        content = await attachment_store.get_attachment_contents(attachment.id)\n        data_url = \"data:%s;base64,%s\" % (mime, base64.b64encode(raw).decode(\"utf-8\"))\n        if isinstance(attachment, ImageAttachment):\n            return ResponseInputImageParam(\n                type=\"input_image\",\n                detail=\"auto\",\n                image_url=data_url,\n            )\n\n        # ..handle other attachment types\n\n    def hidden_context_to_input(self, item: HiddenContextItem) -&gt; Message:\n        return Message(\n            type=\"message\",\n            role=\"system\",\n            content=[\n                ResponseInputTextParam(\n                    type=\"input_text\",\n                    text=f\"&lt;HIDDEN_CONTEXT&gt;{item.content}&lt;/HIDDEN_CONTEXT&gt;\",\n                )\n            ],\n        )\n\n    def tag_to_message_content(self, tag: UserMessageTagContent):\n        tag_context = await retrieve_context_for_tag(tag.id)\n        return ResponseInputTextParam(\n            type=\"input_text\",\n            text=f\"&lt;TAG&gt;Name:{tag.data.name}\\nType:{tag.data.type}\\nDetails:{tag_context}&lt;/TAG&gt;\"\n        )\n\n        # ..handle other @-mentions\n\n    # ..override defaults for other methods\n</code></pre>"},{"location":"server/#widgets","title":"Widgets","text":"<p>Widgets are rich UI components that can be displayed in chat. You can return a widget either directly from the <code>respond</code> method (if you want to do so unconditionally) or from a tool call triggered by the model.</p> <p>Example of a widget returned directly from the <code>respond</code> method:</p> <pre><code>async def respond(\n        self,\n        thread: ThreadMetadata,\n        input: UserMessageItem | None,\n        context: Any,\n    ) -&gt; AsyncIterator[ThreadStreamEvent]:\n    widget = Text(\n        id=\"description\",\n        value=\"Text widget\",\n    )\n\n    async for event in stream_widget(\n        thread,\n        widget,\n        generate_id=lambda item_type: self.store.generate_item_id(\n            item_type, thread, context\n        ),\n    ):\n        yield event\n</code></pre> <p>Example of a widget returned from a tool call:</p> <pre><code>@function_tool(description_override=\"Display a sample widget to the user.\")\nasync def sample_widget(ctx: RunContextWrapper[AgentContext]) -&gt; None:\n    widget = Text(\n        id=\"description\",\n        value=\"Text widget\",\n    )\n\n    await ctx.context.stream_widget(widget)\n</code></pre> <p>The examples above return a fully completed static widget. You can also stream an updating widget by yielding new versions of the widget from a generator function. The ChatKit framework will send updates for the parts of the widget that have changed.</p> <p>Note: Currently, only <code>&lt;Text&gt;</code> and <code>&lt;Markdown&gt;</code> components marked with an <code>id</code> have their text updates streamed.</p> <pre><code>async def sample_widget(ctx: RunContextWrapper[AgentContext]) -&gt; None:\n     description_text = Runner.run_streamed(\n        email_generator, \"ChatKit is the best thing ever\"\n    )\n\n    async def widget_generator() -&gt; AsyncGenerator[Widget, None]:\n        text_widget_updates = accumulate_text(\n            description_text.stream_events(),\n            Text(\n                id=\"description\",\n                value=\"\",\n                streaming=True\n            ),\n        )\n\n        async for text_widget in text_widget_updates:\n            yield Card(\n                children=[text_widget]\n            )\n\n    await ctx.context.stream_widget(widget_generator())\n</code></pre> <p>In the example above, the <code>accumulate_text</code> function is used to stream the results of an Agents SDK run into a <code>Text</code> widget.</p>"},{"location":"server/#defining-a-widget","title":"Defining a widget","text":"<p>You may find it easier to write widgets in JSON. To you can parse JSON widgets to <code>WidgetRoot</code> instances for your server to stream:</p> <pre><code>try:\n    WidgetRoot.model_validate_json(WIDGET_JSON_STRING)\nexcept ValidationError:\n    # handle invalid json\n</code></pre>"},{"location":"server/#widget-reference-and-examples","title":"Widget reference and examples","text":"<p>See full reference of components, props, and examples in widgets.md \u27a1\ufe0f.</p>"},{"location":"server/#thread-metadata","title":"Thread metadata","text":"<p>ChatKit provides a way to store arbitrary information associated with a thread. This information is not sent to the UI.</p> <p>One use case for the metadata is to preserve the <code>previous_response_id</code> and avoid having to re-send all items for an Agent SDK run.</p> <pre><code>previous_response_id = thread.metadata.get(\"previous_response_id\")\n\n# Run the Agent SDK run with the previous response id\nresult = Runner.run_streamed(\n    agent,\n    input=...,\n    previous_response_id=previous_response_id,\n)\n\n# Save the previous response id for the next run\nthread.metadata[\"previous_response_id\"] = result.response_id\n</code></pre>"},{"location":"server/#automatic-thread-titles","title":"Automatic thread titles","text":"<p>ChatKit does not automatically title threads, but you can easily implement your own logic to do so.</p> <p>First, decide when to trigger the thread title update. A simple approach might be to set the thread title the first time a user sends a message.</p> <pre><code>from chatkit.agents import simple_to_agent_input\n\nasync def maybe_update_thread_title(\n    self,\n    thread: ThreadMetadata,\n    input_item: UserMessageItem,\n) -&gt; None:\n    if thread.title is not None:\n        return\n    agent_input = await simple_to_agent_input(input_item)\n    run = await Runner.run(title_agent, input=agent_input)\n    thread.title = run.final_output\n\nasync def respond(\n    self,\n    thread: ThreadMetadata,\n    input: UserMessageItem | None,\n    context: Any,\n) -&gt; AsyncIterator[ThreadStreamEvent]:\n    if input is not None:\n        asyncio.create_task(self.maybe_update_thread_title(thread, input))\n\n    # Generate the model response\n    ...\n</code></pre>"},{"location":"server/#progress-updates","title":"Progress updates","text":"<p>If your server-side tool takes a while to run, you can use the progress update event to display the progress to the user.</p> <pre><code>@function_tool()\nasync def long_running_tool(ctx: RunContextWrapper[AgentContext]) -&gt; str:\n    await ctx.context.stream(\n        ProgressUpdateEvent(text=\"Loading a user profile...\")\n    )\n\n    await asyncio.sleep(1)\n</code></pre> <p>The progress update will be automatically replaced by the next assistant message, widget, or another progress update.</p>"},{"location":"server/#server-context","title":"Server context","text":"<p>Sometimes it's useful to pass additional information (like <code>userId</code>) to the ChatKit server implementation. The <code>ChatKitServer.process</code> method accepts a <code>context</code> parameter that it passes to the <code>respond</code> method and all data store and file store methods.</p> <pre><code>class MyChatKitServer(ChatKitServer):\n    async def respond(..., context) -&gt; AsyncIterator[ThreadStreamEvent]:\n        # consume context[\"userId\"]\n\nserver.process(..., context={\"userId\": \"user_123\"})\n</code></pre> <p>Server context may be used to implement permission checks in AttachmentStore and Store.</p> <pre><code>class MyChatKitServer(ChatKitServer):\n    async def load_attachment(..., context) -&gt; Attachment:\n        # check context[\"userId\"] has access to the file\n</code></pre>"},{"location":"widgets/","title":"ChatKit Widgets","text":"<p>This reference is generated from the <code>chatkit.widgets</code> module. Every component inherits the common props <code>id</code>, <code>key</code>, and <code>type</code>. Optional props default to <code>None</code> unless noted.</p>"},{"location":"widgets/#badge","title":"Badge","text":"<p>Small badge indicating status or categorization.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Badge</code> 'Badge' <code>label</code> <code>str</code> <code>color</code> <code>secondary | success | danger | warning | info | discovery | None</code> None <code>variant</code> <code>solid | soft | outline | None</code> None <code>size</code> <code>sm | md | lg | None</code> None <code>pill</code> <code>bool | None</code> None"},{"location":"widgets/#box","title":"Box","text":"<p>Generic flex container with direction control.</p> Field Type Default <code>children</code> <code>list['WidgetComponent'] | None</code> None <code>align</code> <code>start | center | end | baseline | stretch | None</code> None <code>justify</code> <code>start | center | end | between | around | evenly | stretch | None</code> None <code>wrap</code> <code>nowrap | wrap | wrap-reverse | None</code> None <code>flex</code> <code>int | str | None</code> None <code>gap</code> <code>int | str | None</code> None <code>height</code> <code>float | str | None</code> None <code>width</code> <code>float | str | None</code> None <code>size</code> <code>float | str | None</code> None <code>minHeight</code> <code>int | str | None</code> None <code>minWidth</code> <code>int | str | None</code> None <code>minSize</code> <code>int | str | None</code> None <code>maxHeight</code> <code>int | str | None</code> None <code>maxWidth</code> <code>int | str | None</code> None <code>maxSize</code> <code>int | str | None</code> None <code>padding</code> <code>float | str | Spacing | None</code> None <code>margin</code> <code>float | str | Spacing | None</code> None <code>border</code> <code>int | Border | Borders | None</code> None <code>radius</code> <code>2xs | xs | sm | md | lg | xl | 2xl | 3xl | 4xl | full | 100% | none | None</code> None <code>background</code> <code>str | ThemeColor | None</code> None <code>aspectRatio</code> <code>float | str | None</code> None <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Box</code> 'Box' <code>direction</code> <code>row | col | None</code> None"},{"location":"widgets/#button","title":"Button","text":"<p>Button component optionally wired to an action.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Button</code> 'Button' <code>submit</code> <code>bool | None</code> None <code>label</code> <code>str | None</code> None <code>onClickAction</code> <code>ActionConfig | None</code> None <code>iconStart</code> <code>WidgetIcon | None</code> None <code>iconEnd</code> <code>WidgetIcon | None</code> None <code>style</code> <code>primary | secondary | None</code> None <code>iconSize</code> <code>sm | md | lg | xl | 2xl | None</code> None <code>color</code> <code>primary | secondary | info | discovery | success | caution | warning | danger | None</code> None <code>variant</code> <code>solid | soft | outline | ghost | None</code> None <code>size</code> <code>3xs | 2xs | xs | sm | md | lg | xl | 2xl | 3xl | None</code> None <code>pill</code> <code>bool | None</code> None <code>uniform</code> <code>bool | None</code> None <code>block</code> <code>bool | None</code> None <code>disabled</code> <code>bool | None</code> None"},{"location":"widgets/#caption","title":"Caption","text":"<p>Widget rendering supporting caption text.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Caption</code> 'Caption' <code>value</code> <code>str</code> <code>color</code> <code>str | ThemeColor | None</code> None <code>weight</code> <code>normal | medium | semibold | bold | None</code> None <code>size</code> <code>sm | md | lg | None</code> None <code>textAlign</code> <code>start | center | end | None</code> None <code>truncate</code> <code>bool | None</code> None <code>maxLines</code> <code>int | None</code> None"},{"location":"widgets/#card","title":"Card","text":"<p>Versatile container used for structuring widget content.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Card</code> 'Card' <code>asForm</code> <code>bool | None</code> None <code>children</code> <code>list['WidgetComponent']</code> <code>background</code> <code>str | ThemeColor | None</code> None <code>size</code> <code>sm | md | lg | full | None</code> None <code>padding</code> <code>float | str | Spacing | None</code> None <code>status</code> <code>WidgetStatusWithFavicon | WidgetStatusWithIcon | None</code> None <code>collapsed</code> <code>bool | None</code> None <code>confirm</code> <code>CardAction | None</code> None <code>cancel</code> <code>CardAction | None</code> None <code>theme</code> <code>light | dark | None</code> None"},{"location":"widgets/#chart","title":"Chart","text":"<p>Data visualization component for simple bar/line/area charts.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Chart</code> 'Chart' <code>data</code> <code>list[dict[str, str | int | float]]</code> <code>series</code> <code>list[Series]</code> <code>xAxis</code> <code>str | XAxisConfig</code> <code>showYAxis</code> <code>bool | None</code> None <code>showLegend</code> <code>bool | None</code> None <code>showTooltip</code> <code>bool | None</code> None <code>barGap</code> <code>int | None</code> None <code>barCategoryGap</code> <code>int | None</code> None <code>flex</code> <code>int | str | None</code> None <code>height</code> <code>int | str | None</code> None <code>width</code> <code>int | str | None</code> None <code>size</code> <code>int | str | None</code> None <code>minHeight</code> <code>int | str | None</code> None <code>minWidth</code> <code>int | str | None</code> None <code>minSize</code> <code>int | str | None</code> None <code>maxHeight</code> <code>int | str | None</code> None <code>maxWidth</code> <code>int | str | None</code> None <code>maxSize</code> <code>int | str | None</code> None <code>aspectRatio</code> <code>float | str | None</code> None"},{"location":"widgets/#checkbox","title":"Checkbox","text":"<p>Checkbox input component.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Checkbox</code> 'Checkbox' <code>name</code> <code>str</code> <code>label</code> <code>str | None</code> None <code>defaultChecked</code> <code>str | None</code> None <code>onChangeAction</code> <code>ActionConfig | None</code> None <code>disabled</code> <code>bool | None</code> None <code>required</code> <code>bool | None</code> None"},{"location":"widgets/#col","title":"Col","text":"<p>Vertical flex container.</p> Field Type Default <code>children</code> <code>list['WidgetComponent'] | None</code> None <code>align</code> <code>start | center | end | baseline | stretch | None</code> None <code>justify</code> <code>start | center | end | between | around | evenly | stretch | None</code> None <code>wrap</code> <code>nowrap | wrap | wrap-reverse | None</code> None <code>flex</code> <code>int | str | None</code> None <code>gap</code> <code>int | str | None</code> None <code>height</code> <code>float | str | None</code> None <code>width</code> <code>float | str | None</code> None <code>size</code> <code>float | str | None</code> None <code>minHeight</code> <code>int | str | None</code> None <code>minWidth</code> <code>int | str | None</code> None <code>minSize</code> <code>int | str | None</code> None <code>maxHeight</code> <code>int | str | None</code> None <code>maxWidth</code> <code>int | str | None</code> None <code>maxSize</code> <code>int | str | None</code> None <code>padding</code> <code>float | str | Spacing | None</code> None <code>margin</code> <code>float | str | Spacing | None</code> None <code>border</code> <code>int | Border | Borders | None</code> None <code>radius</code> <code>2xs | xs | sm | md | lg | xl | 2xl | 3xl | 4xl | full | 100% | none | None</code> None <code>background</code> <code>str | ThemeColor | None</code> None <code>aspectRatio</code> <code>float | str | None</code> None <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Col</code> 'Col'"},{"location":"widgets/#datepicker","title":"DatePicker","text":"<p>Date picker input component.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>DatePicker</code> 'DatePicker' <code>name</code> <code>str</code> <code>onChangeAction</code> <code>ActionConfig | None</code> None <code>placeholder</code> <code>str | None</code> None <code>defaultValue</code> <code>datetime | None</code> None <code>min</code> <code>datetime | None</code> None <code>max</code> <code>datetime | None</code> None <code>variant</code> <code>solid | soft | outline | ghost | None</code> None <code>size</code> <code>3xs | 2xs | xs | sm | md | lg | xl | 2xl | 3xl | None</code> None <code>side</code> <code>top | bottom | left | right | None</code> None <code>align</code> <code>start | center | end | None</code> None <code>pill</code> <code>bool | None</code> None <code>block</code> <code>bool | None</code> None <code>clearable</code> <code>bool | None</code> None <code>disabled</code> <code>bool | None</code> None"},{"location":"widgets/#divider","title":"Divider","text":"<p>Visual divider separating content sections.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Divider</code> 'Divider' <code>color</code> <code>str | ThemeColor | None</code> None <code>size</code> <code>int | str | None</code> None <code>spacing</code> <code>int | str | None</code> None <code>flush</code> <code>bool | None</code> None"},{"location":"widgets/#form","title":"Form","text":"<p>Form wrapper capable of submitting <code>onSubmitAction</code>.</p> Field Type Default <code>children</code> <code>list['WidgetComponent'] | None</code> None <code>align</code> <code>start | center | end | baseline | stretch | None</code> None <code>justify</code> <code>start | center | end | between | around | evenly | stretch | None</code> None <code>wrap</code> <code>nowrap | wrap | wrap-reverse | None</code> None <code>flex</code> <code>int | str | None</code> None <code>gap</code> <code>int | str | None</code> None <code>height</code> <code>float | str | None</code> None <code>width</code> <code>float | str | None</code> None <code>size</code> <code>float | str | None</code> None <code>minHeight</code> <code>int | str | None</code> None <code>minWidth</code> <code>int | str | None</code> None <code>minSize</code> <code>int | str | None</code> None <code>maxHeight</code> <code>int | str | None</code> None <code>maxWidth</code> <code>int | str | None</code> None <code>maxSize</code> <code>int | str | None</code> None <code>padding</code> <code>float | str | Spacing | None</code> None <code>margin</code> <code>float | str | Spacing | None</code> None <code>border</code> <code>int | Border | Borders | None</code> None <code>radius</code> <code>2xs | xs | sm | md | lg | xl | 2xl | 3xl | 4xl | full | 100% | none | None</code> None <code>background</code> <code>str | ThemeColor | None</code> None <code>aspectRatio</code> <code>float | str | None</code> None <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Form</code> 'Form' <code>onSubmitAction</code> <code>ActionConfig | None</code> None <code>direction</code> <code>row | col | None</code> None"},{"location":"widgets/#icon","title":"Icon","text":"<p>Icon component referencing a built-in icon name.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Icon</code> 'Icon' <code>name</code> <code>WidgetIcon</code> <code>color</code> <code>str | ThemeColor | None</code> None <code>size</code> <code>xs | sm | md | lg | xl | 2xl | 3xl | None</code> None"},{"location":"widgets/#image","title":"Image","text":"<p>Image component with sizing and fitting controls.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Image</code> 'Image' <code>src</code> <code>str</code> <code>alt</code> <code>str | None</code> None <code>fit</code> <code>cover | contain | fill | scale-down | none | None</code> None <code>position</code> <code>top left | top | top right | left | center | right | bottom left | bottom | bottom right | None</code> None <code>radius</code> <code>2xs | xs | sm | md | lg | xl | 2xl | 3xl | 4xl | full | 100% | none | None</code> None <code>frame</code> <code>bool | None</code> None <code>flush</code> <code>bool | None</code> None <code>height</code> <code>int | str | None</code> None <code>width</code> <code>int | str | None</code> None <code>size</code> <code>int | str | None</code> None <code>minHeight</code> <code>int | str | None</code> None <code>minWidth</code> <code>int | str | None</code> None <code>minSize</code> <code>int | str | None</code> None <code>maxHeight</code> <code>int | str | None</code> None <code>maxWidth</code> <code>int | str | None</code> None <code>maxSize</code> <code>int | str | None</code> None <code>margin</code> <code>int | str | Spacing | None</code> None <code>background</code> <code>str | ThemeColor | None</code> None <code>aspectRatio</code> <code>float | str | None</code> None <code>flex</code> <code>int | str | None</code> None"},{"location":"widgets/#input","title":"Input","text":"<p>Single-line text input component.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Input</code> 'Input' <code>name</code> <code>str</code> <code>inputType</code> <code>number | email | text | password | tel | url | None</code> None <code>defaultValue</code> <code>str | None</code> None <code>required</code> <code>bool | None</code> None <code>pattern</code> <code>str | None</code> None <code>placeholder</code> <code>str | None</code> None <code>allowAutofillExtensions</code> <code>bool | None</code> None <code>autoSelect</code> <code>bool | None</code> None <code>autoFocus</code> <code>bool | None</code> None <code>disabled</code> <code>bool | None</code> None <code>variant</code> <code>soft | outline | None</code> None <code>size</code> <code>3xs | 2xs | xs | sm | md | lg | xl | 2xl | 3xl | None</code> None <code>gutterSize</code> <code>2xs | xs | sm | md | lg | xl | None</code> None <code>pill</code> <code>bool | None</code> None"},{"location":"widgets/#label","title":"Label","text":"<p>Form label associated with a field.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Label</code> 'Label' <code>value</code> <code>str</code> <code>fieldName</code> <code>str</code> <code>size</code> <code>xs | sm | md | lg | xl | None</code> None <code>weight</code> <code>normal | medium | semibold | bold | None</code> None <code>textAlign</code> <code>start | center | end | None</code> None <code>color</code> <code>str | ThemeColor | None</code> None"},{"location":"widgets/#listview","title":"ListView","text":"<p>Container component for rendering collections of list items.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>ListView</code> 'ListView' <code>children</code> <code>list[ListViewItem]</code> <code>limit</code> <code>int | auto | None</code> None <code>status</code> <code>WidgetStatusWithFavicon | WidgetStatusWithIcon | None</code> None <code>theme</code> <code>light | dark | None</code> None"},{"location":"widgets/#listviewitem","title":"ListViewItem","text":"<p>Single row inside a <code>ListView</code> component.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>ListViewItem</code> 'ListViewItem' <code>children</code> <code>list['WidgetComponent']</code> <code>onClickAction</code> <code>ActionConfig | None</code> None <code>gap</code> <code>int | str | None</code> None <code>align</code> <code>start | center | end | baseline | stretch | None</code> None"},{"location":"widgets/#markdown","title":"Markdown","text":"<p>Widget rendering Markdown content, optionally streamed.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Markdown</code> 'Markdown' <code>value</code> <code>str</code> <code>streaming</code> <code>bool | None</code> None"},{"location":"widgets/#radiogroup","title":"RadioGroup","text":"<p>Grouped radio input control.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>RadioGroup</code> 'RadioGroup' <code>name</code> <code>str</code> <code>options</code> <code>list[RadioOption] | None</code> None <code>ariaLabel</code> <code>str | None</code> None <code>onChangeAction</code> <code>ActionConfig | None</code> None <code>defaultValue</code> <code>str | None</code> None <code>direction</code> <code>row | col | None</code> None <code>disabled</code> <code>bool | None</code> None <code>required</code> <code>bool | None</code> None"},{"location":"widgets/#row","title":"Row","text":"<p>Horizontal flex container.</p> Field Type Default <code>children</code> <code>list['WidgetComponent'] | None</code> None <code>align</code> <code>start | center | end | baseline | stretch | None</code> None <code>justify</code> <code>start | center | end | between | around | evenly | stretch | None</code> None <code>wrap</code> <code>nowrap | wrap | wrap-reverse | None</code> None <code>flex</code> <code>int | str | None</code> None <code>gap</code> <code>int | str | None</code> None <code>height</code> <code>float | str | None</code> None <code>width</code> <code>float | str | None</code> None <code>size</code> <code>float | str | None</code> None <code>minHeight</code> <code>int | str | None</code> None <code>minWidth</code> <code>int | str | None</code> None <code>minSize</code> <code>int | str | None</code> None <code>maxHeight</code> <code>int | str | None</code> None <code>maxWidth</code> <code>int | str | None</code> None <code>maxSize</code> <code>int | str | None</code> None <code>padding</code> <code>float | str | Spacing | None</code> None <code>margin</code> <code>float | str | Spacing | None</code> None <code>border</code> <code>int | Border | Borders | None</code> None <code>radius</code> <code>2xs | xs | sm | md | lg | xl | 2xl | 3xl | 4xl | full | 100% | none | None</code> None <code>background</code> <code>str | ThemeColor | None</code> None <code>aspectRatio</code> <code>float | str | None</code> None <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Row</code> 'Row'"},{"location":"widgets/#select","title":"Select","text":"<p>Select dropdown component.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Select</code> 'Select' <code>name</code> <code>str</code> <code>options</code> <code>list[SelectOption]</code> <code>onChangeAction</code> <code>ActionConfig | None</code> None <code>placeholder</code> <code>str | None</code> None <code>defaultValue</code> <code>str | None</code> None <code>variant</code> <code>solid | soft | outline | ghost | None</code> None <code>size</code> <code>3xs | 2xs | xs | sm | md | lg | xl | 2xl | 3xl | None</code> None <code>pill</code> <code>bool | None</code> None <code>block</code> <code>bool | None</code> None <code>clearable</code> <code>bool | None</code> None <code>disabled</code> <code>bool | None</code> None"},{"location":"widgets/#spacer","title":"Spacer","text":"<p>Flexible spacer used to push content apart.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Spacer</code> 'Spacer' <code>minSize</code> <code>int | str | None</code> None"},{"location":"widgets/#text","title":"Text","text":"<p>Widget rendering plain text with typography controls.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Text</code> 'Text' <code>value</code> <code>str</code> <code>streaming</code> <code>bool | None</code> None <code>italic</code> <code>bool | None</code> None <code>lineThrough</code> <code>bool | None</code> None <code>color</code> <code>str | ThemeColor | None</code> None <code>weight</code> <code>normal | medium | semibold | bold | None</code> None <code>width</code> <code>float | str | None</code> None <code>size</code> <code>xs | sm | md | lg | xl | None</code> None <code>textAlign</code> <code>start | center | end | None</code> None <code>truncate</code> <code>bool | None</code> None <code>minLines</code> <code>int | None</code> None <code>maxLines</code> <code>int | None</code> None <code>editable</code> <code>False | EditableProps | None</code> None"},{"location":"widgets/#textarea","title":"Textarea","text":"<p>Multiline text input component.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Textarea</code> 'Textarea' <code>name</code> <code>str</code> <code>defaultValue</code> <code>str | None</code> None <code>required</code> <code>bool | None</code> None <code>pattern</code> <code>str | None</code> None <code>placeholder</code> <code>str | None</code> None <code>autoSelect</code> <code>bool | None</code> None <code>autoFocus</code> <code>bool | None</code> None <code>disabled</code> <code>bool | None</code> None <code>variant</code> <code>soft | outline | None</code> None <code>size</code> <code>3xs | 2xs | xs | sm | md | lg | xl | 2xl | 3xl | None</code> None <code>gutterSize</code> <code>2xs | xs | sm | md | lg | xl | None</code> None <code>rows</code> <code>int | None</code> None <code>autoResize</code> <code>bool | None</code> None <code>maxRows</code> <code>int | None</code> None <code>allowAutofillExtensions</code> <code>bool | None</code> None"},{"location":"widgets/#title","title":"Title","text":"<p>Widget rendering prominent headline text.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Title</code> 'Title' <code>value</code> <code>str</code> <code>color</code> <code>str | ThemeColor | None</code> None <code>weight</code> <code>normal | medium | semibold | bold | None</code> None <code>size</code> <code>sm | md | lg | xl | 2xl | 3xl | 4xl | 5xl | None</code> None <code>textAlign</code> <code>start | center | end | None</code> None <code>truncate</code> <code>bool | None</code> None <code>maxLines</code> <code>int | None</code> None"},{"location":"widgets/#transition","title":"Transition","text":"<p>Wrapper enabling transitions for a child component.</p> Field Type Default <code>key</code> <code>str | None</code> None <code>id</code> <code>str | None</code> None <code>type</code> <code>Transition</code> 'Transition' <code>children</code> <code>WidgetComponent | None</code>"},{"location":"api/chatkit/","title":"chatkit","text":""},{"location":"api/chatkit/actions/","title":"actions","text":""},{"location":"api/chatkit/agents/","title":"agents","text":""},{"location":"api/chatkit/agents/#chatkit.agents.ClientToolCall","title":"ClientToolCall","text":"<p>               Bases: <code>BaseModel</code></p> <p>Returned from tool methods to indicate a client-side tool call.</p> Source code in <code>chatkit/agents.py</code> <pre><code>class ClientToolCall(BaseModel):\n    \"\"\"\n    Returned from tool methods to indicate a client-side tool call.\n    \"\"\"\n\n    name: str\n    arguments: dict[str, Any]\n</code></pre>"},{"location":"api/chatkit/agents/#chatkit.agents.ThreadItemConverter","title":"ThreadItemConverter","text":"<p>Converts thread items to Agent SDK input items. Widgets, Tasks, and Workflows have default conversions but can be customized. Attachments, Tags, and HiddenContextItems require custom handling based on the use case. Other item types are converted automatically.</p> Source code in <code>chatkit/agents.py</code> <pre><code>class ThreadItemConverter:\n    \"\"\"\n    Converts thread items to Agent SDK input items.\n    Widgets, Tasks, and Workflows have default conversions but can be customized.\n    Attachments, Tags, and HiddenContextItems require custom handling based on the use case.\n    Other item types are converted automatically.\n    \"\"\"\n\n    def attachment_to_message_content(\n        self, attachment: Attachment\n    ) -&gt; Awaitable[ResponseInputContentParam]:\n        \"\"\"\n        Convert an attachment in a user message into a message content part to send to the model.\n        Required when attachments are enabled.\n        \"\"\"\n        raise NotImplementedError(\n            \"An Attachment was included in a UserMessageItem but Converter.attachment_to_message_content was not implemented\"\n        )\n\n    def tag_to_message_content(\n        self, tag: UserMessageTagContent\n    ) -&gt; ResponseInputContentParam:\n        \"\"\"\n        Convert a tag in a user message into a message content part to send to the model as context.\n        Required when tags are used.\n        \"\"\"\n        raise NotImplementedError(\n            \"A Tag was included in a UserMessageItem but Converter.tag_to_message_content is not implemented\"\n        )\n\n    def hidden_context_to_input(\n        self, item: HiddenContextItem\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        \"\"\"\n        Convert a HiddenContextItem into input item(s) to send to the model.\n        Required when HiddenContextItem are used.\n        \"\"\"\n        raise NotImplementedError(\n            \"HiddenContextItem were present in a user message but Converter.hidden_context_to_input was not implemented\"\n        )\n\n    def task_to_input(\n        self, item: TaskItem\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        \"\"\"\n        Convert a TaskItem into input item(s) to send to the model.\n        \"\"\"\n        if item.task.type != \"custom\" or (\n            not item.task.title and not item.task.content\n        ):\n            return None\n        title = f\"{item.task.title}\" if item.task.title else \"\"\n        content = f\"{item.task.content}\" if item.task.content else \"\"\n        task_text = f\"{title}: {content}\" if title and content else title or content\n        text = f\"A message was displayed to the user that the following task was performed:\\n&lt;Task&gt;\\n{task_text}\\n&lt;/Task&gt;\"\n        return Message(\n            type=\"message\",\n            content=[\n                ResponseInputTextParam(\n                    type=\"input_text\",\n                    text=text,\n                )\n            ],\n            role=\"user\",\n        )\n\n    def workflow_to_input(\n        self, item: WorkflowItem\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        \"\"\"\n        Convert a TaskItem into input item(s) to send to the model.\n        Returns WorkflowItem.response_items by default.\n        \"\"\"\n        messages = []\n        for task in item.workflow.tasks:\n            if task.type != \"custom\" or (not task.title and not task.content):\n                continue\n\n            title = f\"{task.title}\" if task.title else \"\"\n            content = f\"{task.content}\" if task.content else \"\"\n            task_text = f\"{title}: {content}\" if title and content else title or content\n            text = f\"A message was displayed to the user that the following task was performed:\\n&lt;Task&gt;\\n{task_text}\\n&lt;/Task&gt;\"\n            messages.append(\n                Message(\n                    type=\"message\",\n                    content=[\n                        ResponseInputTextParam(\n                            type=\"input_text\",\n                            text=text,\n                        )\n                    ],\n                    role=\"user\",\n                )\n            )\n        return messages\n\n    def widget_to_input(\n        self, item: WidgetItem\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        \"\"\"\n        Convert a WidgetItem into input item(s) to send to the model.\n        By default, WidgetItems converted to a text description with a JSON representation of the widget.\n        \"\"\"\n        return Message(\n            type=\"message\",\n            content=[\n                ResponseInputTextParam(\n                    type=\"input_text\",\n                    text=f\"The following graphical UI widget (id: {item.id}) was displayed to the user:\"\n                    + item.widget.model_dump_json(\n                        exclude_unset=True, exclude_none=True\n                    ),\n                )\n            ],\n            role=\"user\",\n        )\n\n    async def user_message_to_input(\n        self, item: UserMessageItem, is_last_message: bool = True\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        # Build the user text exactly as typed, rendering tags as @key\n        message_text_parts: list[str] = []\n        # Track tags separately to add system context\n        raw_tags: list[UserMessageTagContent] = []\n\n        for part in item.content:\n            if isinstance(part, UserMessageTextContent):\n                message_text_parts.append(part.text)\n            elif isinstance(part, UserMessageTagContent):\n                message_text_parts.append(f\"@{part.text}\")\n                raw_tags.append(part)\n            else:\n                assert_never(part)\n\n        user_text_item = Message(\n            role=\"user\",\n            type=\"message\",\n            content=[\n                ResponseInputTextParam(\n                    type=\"input_text\", text=\"\".join(message_text_parts)\n                ),\n                *[\n                    await self.attachment_to_message_content(a)\n                    for a in item.attachments\n                ],\n            ],\n        )\n\n        # Build system items (prepend later): quoted text and @-mention context\n        context_items: list[TResponseInputItem] = []\n\n        if item.quoted_text and is_last_message:\n            context_items.append(\n                Message(\n                    role=\"user\",\n                    type=\"message\",\n                    content=[\n                        ResponseInputTextParam(\n                            type=\"input_text\",\n                            text=f\"The user is referring to this in particular: \\n{item.quoted_text}\",\n                        )\n                    ],\n                )\n            )\n\n        # Dedupe tags (preserve order) and resolve to message content\n        if raw_tags:\n            seen, uniq_tags = set(), []\n            for t in raw_tags:\n                if t.text not in seen:\n                    seen.add(t.text)\n                    uniq_tags.append(t)\n\n            tag_content: ResponseInputMessageContentListParam = [\n                # should return summarized text items\n                self.tag_to_message_content(tag)\n                for tag in uniq_tags\n            ]\n\n            if tag_content:\n                context_items.append(\n                    Message(\n                        role=\"user\",\n                        type=\"message\",\n                        content=[\n                            ResponseInputTextParam(\n                                type=\"input_text\",\n                                text=cleandoc(\"\"\"\n                                    # User-provided context for @-mentions\n                                    - When referencing resolved entities, use their canonical names **without** '@'.\n                                    - The '@' form appears only in user text and should not be echoed.\n                                \"\"\").strip(),\n                            ),\n                            *tag_content,\n                        ],\n                    )\n                )\n\n        return [user_text_item, *context_items]\n\n    async def assistant_message_to_input(\n        self, item: AssistantMessageItem\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        return EasyInputMessageParam(\n            type=\"message\",\n            content=[\n                # content param doesn't support the assistant message content types\n                cast(\n                    ResponseInputContentParam,\n                    ResponseOutputText(\n                        type=\"output_text\",\n                        text=c.text,\n                        annotations=[],  # TODO: these should be sent back as well\n                    ).model_dump(),\n                )\n                for c in item.content\n            ],\n            role=\"assistant\",\n        )\n\n    async def client_tool_call_to_input(\n        self, item: ClientToolCallItem\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        if item.status == \"pending\":\n            # Filter out pending tool calls - they cannot be sent to the model\n            return None\n\n        return [\n            ResponseFunctionToolCallParam(\n                type=\"function_call\",\n                call_id=item.call_id,\n                name=item.name,\n                arguments=json.dumps(item.arguments),\n            ),\n            FunctionCallOutput(\n                type=\"function_call_output\",\n                call_id=item.call_id,\n                output=json.dumps(item.output),\n            ),\n        ]\n\n    async def end_of_turn_to_input(\n        self, item: EndOfTurnItem\n    ) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n        # Only used for UI hints - you shouldn't need to override this\n        return None\n\n    async def _thread_item_to_input_item(\n        self,\n        item: ThreadItem,\n        is_last_message: bool = True,\n    ) -&gt; list[TResponseInputItem]:\n        match item:\n            case UserMessageItem():\n                out = await self.user_message_to_input(item, is_last_message) or []\n                return out if isinstance(out, list) else [out]\n            case AssistantMessageItem():\n                out = await self.assistant_message_to_input(item) or []\n                return out if isinstance(out, list) else [out]\n            case ClientToolCallItem():\n                out = await self.client_tool_call_to_input(item) or []\n                return out if isinstance(out, list) else [out]\n            case EndOfTurnItem():\n                out = await self.end_of_turn_to_input(item) or []\n                return out if isinstance(out, list) else [out]\n            case WidgetItem():\n                out = self.widget_to_input(item) or []\n                return out if isinstance(out, list) else [out]\n            case WorkflowItem():\n                out = self.workflow_to_input(item) or []\n                return out if isinstance(out, list) else [out]\n            case TaskItem():\n                out = self.task_to_input(item) or []\n                return out if isinstance(out, list) else [out]\n            case HiddenContextItem():\n                out = self.hidden_context_to_input(item) or []\n                return out if isinstance(out, list) else [out]\n            case _:\n                assert_never(item)\n\n    async def to_agent_input(\n        self,\n        thread_items: Sequence[ThreadItem] | ThreadItem,\n    ) -&gt; list[TResponseInputItem]:\n        if isinstance(thread_items, Sequence):\n            # shallow copy in case caller mutates the list while we're iterating\n            thread_items = thread_items[:]\n        else:\n            thread_items = [thread_items]\n        output: list[TResponseInputItem] = []\n        for item in thread_items:\n            output.extend(\n                await self._thread_item_to_input_item(\n                    item,\n                    is_last_message=item is thread_items[-1],\n                )\n            )\n        return output\n</code></pre>"},{"location":"api/chatkit/agents/#chatkit.agents.ThreadItemConverter.attachment_to_message_content","title":"attachment_to_message_content","text":"<pre><code>attachment_to_message_content(\n    attachment: Attachment,\n) -&gt; Awaitable[ResponseInputContentParam]\n</code></pre> <p>Convert an attachment in a user message into a message content part to send to the model. Required when attachments are enabled.</p> Source code in <code>chatkit/agents.py</code> <pre><code>def attachment_to_message_content(\n    self, attachment: Attachment\n) -&gt; Awaitable[ResponseInputContentParam]:\n    \"\"\"\n    Convert an attachment in a user message into a message content part to send to the model.\n    Required when attachments are enabled.\n    \"\"\"\n    raise NotImplementedError(\n        \"An Attachment was included in a UserMessageItem but Converter.attachment_to_message_content was not implemented\"\n    )\n</code></pre>"},{"location":"api/chatkit/agents/#chatkit.agents.ThreadItemConverter.tag_to_message_content","title":"tag_to_message_content","text":"<pre><code>tag_to_message_content(\n    tag: UserMessageTagContent,\n) -&gt; ResponseInputContentParam\n</code></pre> <p>Convert a tag in a user message into a message content part to send to the model as context. Required when tags are used.</p> Source code in <code>chatkit/agents.py</code> <pre><code>def tag_to_message_content(\n    self, tag: UserMessageTagContent\n) -&gt; ResponseInputContentParam:\n    \"\"\"\n    Convert a tag in a user message into a message content part to send to the model as context.\n    Required when tags are used.\n    \"\"\"\n    raise NotImplementedError(\n        \"A Tag was included in a UserMessageItem but Converter.tag_to_message_content is not implemented\"\n    )\n</code></pre>"},{"location":"api/chatkit/agents/#chatkit.agents.ThreadItemConverter.hidden_context_to_input","title":"hidden_context_to_input","text":"<pre><code>hidden_context_to_input(\n    item: HiddenContextItem,\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None\n</code></pre> <p>Convert a HiddenContextItem into input item(s) to send to the model. Required when HiddenContextItem are used.</p> Source code in <code>chatkit/agents.py</code> <pre><code>def hidden_context_to_input(\n    self, item: HiddenContextItem\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n    \"\"\"\n    Convert a HiddenContextItem into input item(s) to send to the model.\n    Required when HiddenContextItem are used.\n    \"\"\"\n    raise NotImplementedError(\n        \"HiddenContextItem were present in a user message but Converter.hidden_context_to_input was not implemented\"\n    )\n</code></pre>"},{"location":"api/chatkit/agents/#chatkit.agents.ThreadItemConverter.task_to_input","title":"task_to_input","text":"<pre><code>task_to_input(\n    item: TaskItem,\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None\n</code></pre> <p>Convert a TaskItem into input item(s) to send to the model.</p> Source code in <code>chatkit/agents.py</code> <pre><code>def task_to_input(\n    self, item: TaskItem\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n    \"\"\"\n    Convert a TaskItem into input item(s) to send to the model.\n    \"\"\"\n    if item.task.type != \"custom\" or (\n        not item.task.title and not item.task.content\n    ):\n        return None\n    title = f\"{item.task.title}\" if item.task.title else \"\"\n    content = f\"{item.task.content}\" if item.task.content else \"\"\n    task_text = f\"{title}: {content}\" if title and content else title or content\n    text = f\"A message was displayed to the user that the following task was performed:\\n&lt;Task&gt;\\n{task_text}\\n&lt;/Task&gt;\"\n    return Message(\n        type=\"message\",\n        content=[\n            ResponseInputTextParam(\n                type=\"input_text\",\n                text=text,\n            )\n        ],\n        role=\"user\",\n    )\n</code></pre>"},{"location":"api/chatkit/agents/#chatkit.agents.ThreadItemConverter.workflow_to_input","title":"workflow_to_input","text":"<pre><code>workflow_to_input(\n    item: WorkflowItem,\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None\n</code></pre> <p>Convert a TaskItem into input item(s) to send to the model. Returns WorkflowItem.response_items by default.</p> Source code in <code>chatkit/agents.py</code> <pre><code>def workflow_to_input(\n    self, item: WorkflowItem\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n    \"\"\"\n    Convert a TaskItem into input item(s) to send to the model.\n    Returns WorkflowItem.response_items by default.\n    \"\"\"\n    messages = []\n    for task in item.workflow.tasks:\n        if task.type != \"custom\" or (not task.title and not task.content):\n            continue\n\n        title = f\"{task.title}\" if task.title else \"\"\n        content = f\"{task.content}\" if task.content else \"\"\n        task_text = f\"{title}: {content}\" if title and content else title or content\n        text = f\"A message was displayed to the user that the following task was performed:\\n&lt;Task&gt;\\n{task_text}\\n&lt;/Task&gt;\"\n        messages.append(\n            Message(\n                type=\"message\",\n                content=[\n                    ResponseInputTextParam(\n                        type=\"input_text\",\n                        text=text,\n                    )\n                ],\n                role=\"user\",\n            )\n        )\n    return messages\n</code></pre>"},{"location":"api/chatkit/agents/#chatkit.agents.ThreadItemConverter.widget_to_input","title":"widget_to_input","text":"<pre><code>widget_to_input(\n    item: WidgetItem,\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None\n</code></pre> <p>Convert a WidgetItem into input item(s) to send to the model. By default, WidgetItems converted to a text description with a JSON representation of the widget.</p> Source code in <code>chatkit/agents.py</code> <pre><code>def widget_to_input(\n    self, item: WidgetItem\n) -&gt; TResponseInputItem | list[TResponseInputItem] | None:\n    \"\"\"\n    Convert a WidgetItem into input item(s) to send to the model.\n    By default, WidgetItems converted to a text description with a JSON representation of the widget.\n    \"\"\"\n    return Message(\n        type=\"message\",\n        content=[\n            ResponseInputTextParam(\n                type=\"input_text\",\n                text=f\"The following graphical UI widget (id: {item.id}) was displayed to the user:\"\n                + item.widget.model_dump_json(\n                    exclude_unset=True, exclude_none=True\n                ),\n            )\n        ],\n        role=\"user\",\n    )\n</code></pre>"},{"location":"api/chatkit/errors/","title":"errors","text":""},{"location":"api/chatkit/errors/#chatkit.errors.StreamError","title":"StreamError","text":"<p>               Bases: <code>BaseStreamError</code></p> <p>Error with a specific error code that maps to a localized user-facing error message.</p> Source code in <code>chatkit/errors.py</code> <pre><code>class StreamError(BaseStreamError):\n    \"\"\"\n    Error with a specific error code that maps to a localized user-facing\n    error message.\n    \"\"\"\n\n    code: ErrorCode\n\n    def __init__(\n        self,\n        code: ErrorCode,\n        *,\n        allow_retry: bool | None = None,\n    ):\n        self.code = code\n        self.status_code = DEFAULT_STATUS.get(code, 500)\n        if allow_retry is None:\n            self.allow_retry = DEFAULT_ALLOW_RETRY.get(code, False)\n        else:\n            self.allow_retry = allow_retry\n</code></pre>"},{"location":"api/chatkit/errors/#chatkit.errors.CustomStreamError","title":"CustomStreamError","text":"<p>               Bases: <code>BaseStreamError</code></p> <p>Error with a custom user-facing error message. The message should be localized as needed before raising the error.</p> Source code in <code>chatkit/errors.py</code> <pre><code>class CustomStreamError(BaseStreamError):\n    \"\"\"\n    Error with a custom user-facing error message. The message should be\n    localized as needed before raising the error.\n    \"\"\"\n\n    message: str\n    \"\"\"The user-facing error message to display.\"\"\"\n\n    def __init__(\n        self,\n        message: str,\n        *,\n        allow_retry: bool = False,\n    ):\n        self.message = message\n        self.allow_retry = allow_retry\n</code></pre>"},{"location":"api/chatkit/errors/#chatkit.errors.CustomStreamError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str = message\n</code></pre> <p>The user-facing error message to display.</p>"},{"location":"api/chatkit/server/","title":"server","text":""},{"location":"api/chatkit/server/#chatkit.server.ChatKitServer","title":"ChatKitServer","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TContext]</code></p> Source code in <code>chatkit/server.py</code> <pre><code>class ChatKitServer(ABC, Generic[TContext]):\n    def __init__(\n        self,\n        store: Store[TContext],\n        attachment_store: AttachmentStore[TContext] | None = None,\n    ):\n        self.store = store\n        self.attachment_store = attachment_store\n\n    def _get_attachment_store(self) -&gt; AttachmentStore[TContext]:\n        \"\"\"Return the configured AttachmentStore or raise if missing.\"\"\"\n        if self.attachment_store is None:\n            raise RuntimeError(\n                \"AttachmentStore is not configured. Provide a AttachmentStore to ChatKitServer to handle file operations.\"\n            )\n        return self.attachment_store\n\n    @abstractmethod\n    def respond(\n        self,\n        thread: ThreadMetadata,\n        input_user_message: UserMessageItem | None,\n        context: TContext,\n    ) -&gt; AsyncIterator[ThreadStreamEvent]:\n        \"\"\"Stream `ThreadStreamEvent` instances for a new user message.\n\n        Args:\n            thread: Metadata for the thread being processed.\n            input_user_message: The incoming message the server should respond to, if any.\n            context: Arbitrary per-request context provided by the caller.\n\n        Returns:\n            An async iterator that yields events representing the server's response.\n        \"\"\"\n        pass\n\n    async def add_feedback(  # noqa: B027\n        self,\n        thread_id: str,\n        item_ids: list[str],\n        feedback: FeedbackKind,\n        context: TContext,\n    ) -&gt; None:\n        pass\n\n    def action(\n        self,\n        thread: ThreadMetadata,\n        action: Action[str, Any],\n        sender: WidgetItem | None,\n        context: TContext,\n    ) -&gt; AsyncIterator[ThreadStreamEvent]:\n        raise NotImplementedError(\n            \"The action() method must be overridden to react to actions. \"\n            \"See https://github.com/openai/chatkit-python/blob/main/docs/widgets.md#widget-actions\"\n        )\n\n    async def process(\n        self, request: str | bytes | bytearray, context: TContext\n    ) -&gt; StreamingResult | NonStreamingResult:\n        parsed_request = TypeAdapter[ChatKitReq](ChatKitReq).validate_json(request)\n        logger.info(f\"Received request op: {parsed_request.type}\")\n\n        if is_streaming_req(parsed_request):\n            return StreamingResult(self._process_streaming(parsed_request, context))\n        else:\n            return NonStreamingResult(\n                await self._process_non_streaming(parsed_request, context)\n            )\n\n    async def _process_non_streaming(\n        self, request: NonStreamingReq, context: TContext\n    ) -&gt; bytes:\n        match request:\n            case ThreadsGetByIdReq():\n                thread = await self._load_full_thread(\n                    request.params.thread_id, context=context\n                )\n                return self._serialize(self._to_thread_response(thread))\n            case ThreadsListReq():\n                params = request.params\n                threads = await self.store.load_threads(\n                    limit=params.limit or DEFAULT_PAGE_SIZE,\n                    after=params.after,\n                    order=params.order,\n                    context=context,\n                )\n                return self._serialize(\n                    Page(\n                        has_more=threads.has_more,\n                        after=threads.after,\n                        data=[\n                            self._to_thread_response(thread) for thread in threads.data\n                        ],\n                    )\n                )\n            case ItemsFeedbackReq():\n                await self.add_feedback(\n                    request.params.thread_id,\n                    request.params.item_ids,\n                    request.params.kind,\n                    context,\n                )\n                return b\"{}\"\n            case AttachmentsCreateReq():\n                attachment_store = self._get_attachment_store()\n                attachment = await attachment_store.create_attachment(\n                    request.params, context\n                )\n                return self._serialize(attachment)\n            case AttachmentsDeleteReq():\n                attachment_store = self._get_attachment_store()\n                await attachment_store.delete_attachment(\n                    request.params.attachment_id, context=context\n                )\n                await self.store.delete_attachment(\n                    request.params.attachment_id, context=context\n                )\n                return b\"{}\"\n            case ItemsListReq():\n                items_list_params = request.params\n                items = await self.store.load_thread_items(\n                    items_list_params.thread_id,\n                    limit=items_list_params.limit or DEFAULT_PAGE_SIZE,\n                    order=items_list_params.order,\n                    after=items_list_params.after,\n                    context=context,\n                )\n                # filter out HiddenContextItems\n                items.data = [\n                    item\n                    for item in items.data\n                    if not isinstance(item, HiddenContextItem)\n                ]\n                return self._serialize(items)\n            case ThreadsUpdateReq():\n                thread = await self.store.load_thread(\n                    request.params.thread_id, context=context\n                )\n                thread.title = request.params.title\n                await self.store.save_thread(thread, context=context)\n                return self._serialize(self._to_thread_response(thread))\n            case ThreadsDeleteReq():\n                await self.store.delete_thread(\n                    request.params.thread_id, context=context\n                )\n                return b\"{}\"\n            case _:\n                assert_never(request)\n\n    async def _process_streaming(\n        self, request: StreamingReq, context: TContext\n    ) -&gt; AsyncGenerator[bytes, None]:\n        try:\n            async for event in self._process_streaming_impl(request, context):\n                b = self._serialize(event)\n                yield b\"data: \" + b + b\"\\n\\n\"\n        except Exception:\n            logger.exception(\"Error while generating streamed response\")\n            raise\n\n    async def _process_streaming_impl(\n        self, request: StreamingReq, context: TContext\n    ) -&gt; AsyncGenerator[ThreadStreamEvent, None]:\n        match request:\n            case ThreadsCreateReq():\n                thread = Thread(\n                    id=self.store.generate_thread_id(context),\n                    created_at=datetime.now(),\n                    items=Page(),\n                )\n                await self.store.save_thread(\n                    ThreadMetadata(**thread.model_dump()),\n                    context=context,\n                )\n                yield ThreadCreatedEvent(thread=self._to_thread_response(thread))\n                user_message = await self._build_user_message_item(\n                    request.params.input, thread, context\n                )\n                async for event in self._process_new_thread_item_respond(\n                    thread,\n                    user_message,\n                    context,\n                ):\n                    yield event\n\n            case ThreadsAddUserMessageReq():\n                thread = await self.store.load_thread(\n                    request.params.thread_id, context=context\n                )\n                user_message = await self._build_user_message_item(\n                    request.params.input, thread, context\n                )\n                async for event in self._process_new_thread_item_respond(\n                    thread,\n                    user_message,\n                    context,\n                ):\n                    yield event\n\n            case ThreadsAddClientToolOutputReq():\n                thread = await self.store.load_thread(\n                    request.params.thread_id, context=context\n                )\n                items = await self.store.load_thread_items(\n                    thread.id, None, 1, \"desc\", context\n                )\n                tool_call = next(\n                    (\n                        item\n                        for item in items.data\n                        if isinstance(item, ClientToolCallItem)\n                        and item.status == \"pending\"\n                    ),\n                    None,\n                )\n                if not tool_call:\n                    raise ValueError(\n                        f\"Last thread item in {thread.id} was not a ClientToolCallItem\"\n                    )\n\n                tool_call.output = request.params.result\n                tool_call.status = \"completed\"\n\n                await self.store.save_item(thread.id, tool_call, context=context)\n\n                # Safety against dangling pending tool calls if there are\n                # multiple in a row, which should be impossible, and\n                # integrations should ultimately filter out pending tool calls\n                # when creating input response messages.\n                await self._cleanup_pending_client_tool_call(thread, context)\n\n                async for event in self._process_events(\n                    thread,\n                    context,\n                    lambda: self.respond(thread, None, context),\n                ):\n                    yield event\n\n            case ThreadsRetryAfterItemReq():\n                thread_metadata = await self.store.load_thread(\n                    request.params.thread_id, context=context\n                )\n\n                # Collect items to remove (all items after the user message)\n                items_to_remove: list[ThreadItem] = []\n                user_message_item = None\n\n                async for item in self._paginate_thread_items_reverse(\n                    request.params.thread_id, context\n                ):\n                    if item.id == request.params.item_id:\n                        if not isinstance(item, UserMessageItem):\n                            raise ValueError(\n                                f\"Item {request.params.item_id} is not a user message\"\n                            )\n                        user_message_item = item\n                        break\n                    items_to_remove.append(item)\n\n                if user_message_item:\n                    for item in items_to_remove:\n                        await self.store.delete_thread_item(\n                            request.params.thread_id, item.id, context=context\n                        )\n                    async for event in self._process_events(\n                        thread_metadata,\n                        context,\n                        lambda: self.respond(\n                            thread_metadata,\n                            user_message_item,\n                            context,\n                        ),\n                    ):\n                        yield event\n            case ThreadsCustomActionReq():\n                thread_metadata = await self.store.load_thread(\n                    request.params.thread_id, context=context\n                )\n\n                item: ThreadItem | None = None\n                if request.params.item_id:\n                    item = await self.store.load_item(\n                        request.params.thread_id,\n                        request.params.item_id,\n                        context=context,\n                    )\n\n                if item and not isinstance(item, WidgetItem):\n                    # shouldn't happen if the caller is using the API correctly.\n                    yield ErrorEvent(\n                        code=ErrorCode.STREAM_ERROR,\n                        allow_retry=False,\n                    )\n                    return\n\n                async for event in self._process_events(\n                    thread_metadata,\n                    context,\n                    lambda: self.action(\n                        thread_metadata,\n                        request.params.action,\n                        item,\n                        context,\n                    ),\n                ):\n                    yield event\n\n            case _:\n                assert_never(request)\n\n    async def _cleanup_pending_client_tool_call(\n        self, thread: ThreadMetadata, context: TContext\n    ) -&gt; None:\n        items = await self.store.load_thread_items(\n            thread.id, None, DEFAULT_PAGE_SIZE, \"desc\", context\n        )\n        for tool_call in items.data:\n            if not isinstance(tool_call, ClientToolCallItem):\n                continue\n            if tool_call.status == \"pending\":\n                logger.warning(\n                    f\"Client tool call {tool_call.call_id} was not completed, ignoring\"\n                )\n                await self.store.delete_thread_item(\n                    thread.id, tool_call.id, context=context\n                )\n\n    async def _process_new_thread_item_respond(\n        self,\n        thread: ThreadMetadata,\n        item: UserMessageItem,\n        context: TContext,\n    ) -&gt; AsyncIterator[ThreadStreamEvent]:\n        await self.store.add_thread_item(thread.id, item, context=context)\n        await self._cleanup_pending_client_tool_call(thread, context)\n        yield ThreadItemDoneEvent(item=item)\n\n        async for event in self._process_events(\n            thread,\n            context,\n            lambda: self.respond(thread, item, context),\n        ):\n            yield event\n\n    async def _process_events(\n        self,\n        thread: ThreadMetadata,\n        context: TContext,\n        stream: Callable[[], AsyncIterator[ThreadStreamEvent]],\n    ) -&gt; AsyncIterator[ThreadStreamEvent]:\n        await asyncio.sleep(0)  # allow the response to start streaming\n\n        last_thread = thread.model_copy(deep=True)\n\n        try:\n            with agents_sdk_user_agent_override():\n                async for event in stream():\n                    match event:\n                        case ThreadItemDoneEvent():\n                            await self.store.add_thread_item(\n                                thread.id, event.item, context=context\n                            )\n                        case ThreadItemRemovedEvent():\n                            await self.store.delete_thread_item(\n                                thread.id, event.item_id, context=context\n                            )\n                        case ThreadItemReplacedEvent():\n                            await self.store.save_item(\n                                thread.id, event.item, context=context\n                            )\n\n                    # special case - don't send hidden context items back to the client\n                    should_swallow_event = isinstance(\n                        event, ThreadItemDoneEvent\n                    ) and isinstance(event.item, HiddenContextItem)\n\n                    if not should_swallow_event:\n                        yield event\n\n                    # in case user updated the thread while streaming\n                    if thread != last_thread:\n                        last_thread = thread.model_copy(deep=True)\n                        await self.store.save_thread(thread, context=context)\n                        yield ThreadUpdatedEvent(\n                            thread=self._to_thread_response(thread)\n                        )\n                # in case user updated the thread while streaming\n                if thread != last_thread:\n                    last_thread = thread.model_copy(deep=True)\n                    await self.store.save_thread(thread, context=context)\n                    yield ThreadUpdatedEvent(thread=self._to_thread_response(thread))\n        except CustomStreamError as e:\n            yield ErrorEvent(\n                code=\"custom\",\n                message=e.message,\n                allow_retry=e.allow_retry,\n            )\n        except StreamError as e:\n            yield ErrorEvent(\n                code=e.code,\n                allow_retry=e.allow_retry,\n            )\n        except Exception as e:\n            yield ErrorEvent(\n                code=ErrorCode.STREAM_ERROR,\n                allow_retry=True,\n            )\n            logger.exception(e)\n\n        if thread != last_thread:\n            # in case user updated the thread at the end of the stream\n            await self.store.save_thread(thread, context=context)\n            yield ThreadUpdatedEvent(thread=self._to_thread_response(thread))\n\n    async def _build_user_message_item(\n        self, input: UserMessageInput, thread: ThreadMetadata, context: TContext\n    ) -&gt; UserMessageItem:\n        return UserMessageItem(\n            id=self.store.generate_item_id(\"message\", thread, context),\n            content=input.content,\n            thread_id=thread.id,\n            attachments=[\n                await self.store.load_attachment(attachment_id, context)\n                for attachment_id in input.attachments\n            ],\n            quoted_text=input.quoted_text,\n            inference_options=input.inference_options,\n            created_at=datetime.now(),\n        )\n\n    async def _load_full_thread(self, thread_id: str, context: TContext) -&gt; Thread:\n        thread_meta = await self.store.load_thread(thread_id, context=context)\n        thread_items = await self.store.load_thread_items(\n            thread_id,\n            after=None,\n            limit=DEFAULT_PAGE_SIZE,\n            order=\"asc\",\n            context=context,\n        )\n        return Thread(**thread_meta.model_dump(), items=thread_items)\n\n    async def _paginate_thread_items_reverse(\n        self, thread_id: str, context: TContext\n    ) -&gt; AsyncIterator[ThreadItem]:\n        \"\"\"Paginate through thread items in reverse order (newest first).\"\"\"\n        after = None\n        while True:\n            items = await self.store.load_thread_items(\n                thread_id, after, DEFAULT_PAGE_SIZE, \"desc\", context\n            )\n            for item in items.data:\n                yield item\n\n            if not items.has_more:\n                break\n            after = items.after\n\n    def _serialize(self, obj: BaseModel) -&gt; bytes:\n        return obj.model_dump_json(by_alias=True, exclude_none=True).encode(\"utf-8\")\n\n    def _to_thread_response(self, thread: ThreadMetadata | Thread) -&gt; Thread:\n        def is_hidden(item: ThreadItem) -&gt; bool:\n            return isinstance(item, HiddenContextItem)\n\n        items = thread.items if isinstance(thread, Thread) else Page()\n        items.data = [item for item in items.data if not is_hidden(item)]\n\n        return Thread(\n            id=thread.id,\n            title=thread.title,\n            created_at=thread.created_at,\n            items=items,\n            status=thread.status,\n        )\n</code></pre>"},{"location":"api/chatkit/server/#chatkit.server.ChatKitServer.respond","title":"respond  <code>abstractmethod</code>","text":"<pre><code>respond(\n    thread: ThreadMetadata,\n    input_user_message: UserMessageItem | None,\n    context: TContext,\n) -&gt; AsyncIterator[ThreadStreamEvent]\n</code></pre> <p>Stream <code>ThreadStreamEvent</code> instances for a new user message.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>ThreadMetadata</code> <p>Metadata for the thread being processed.</p> required <code>input_user_message</code> <code>UserMessageItem | None</code> <p>The incoming message the server should respond to, if any.</p> required <code>context</code> <code>TContext</code> <p>Arbitrary per-request context provided by the caller.</p> required <p>Returns:</p> Type Description <code>AsyncIterator[ThreadStreamEvent]</code> <p>An async iterator that yields events representing the server's response.</p> Source code in <code>chatkit/server.py</code> <pre><code>@abstractmethod\ndef respond(\n    self,\n    thread: ThreadMetadata,\n    input_user_message: UserMessageItem | None,\n    context: TContext,\n) -&gt; AsyncIterator[ThreadStreamEvent]:\n    \"\"\"Stream `ThreadStreamEvent` instances for a new user message.\n\n    Args:\n        thread: Metadata for the thread being processed.\n        input_user_message: The incoming message the server should respond to, if any.\n        context: Arbitrary per-request context provided by the caller.\n\n    Returns:\n        An async iterator that yields events representing the server's response.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/chatkit/server/#chatkit.server.diff_widget","title":"diff_widget","text":"<pre><code>diff_widget(\n    before: WidgetRoot, after: WidgetRoot\n) -&gt; list[\n    WidgetStreamingTextValueDelta\n    | WidgetRootUpdated\n    | WidgetComponentUpdated\n]\n</code></pre> <p>Compare two WidgetRoots and return a list of deltas.</p> Source code in <code>chatkit/server.py</code> <pre><code>def diff_widget(\n    before: WidgetRoot, after: WidgetRoot\n) -&gt; list[WidgetStreamingTextValueDelta | WidgetRootUpdated | WidgetComponentUpdated]:\n    \"\"\"\n    Compare two WidgetRoots and return a list of deltas.\n    \"\"\"\n\n    def full_replace(before: WidgetComponentBase, after: WidgetComponentBase) -&gt; bool:\n        if (\n            before.type != after.type\n            or before.id != after.id\n            or before.key != after.key\n        ):\n            return True\n\n        def full_replace_value(before_value: Any, after_value: Any) -&gt; bool:\n            if isinstance(before_value, list) and isinstance(after_value, list):\n                if len(before_value) != len(after_value):\n                    return True\n                for nth_before_value, nth_after_value in zip(before_value, after_value):\n                    if full_replace_value(nth_before_value, nth_after_value):\n                        return True\n            elif before_value != after_value:\n                if isinstance(before_value, WidgetComponentBase) and isinstance(\n                    after_value, WidgetComponentBase\n                ):\n                    return full_replace(before_value, after_value)\n                else:\n                    return True\n            return False\n\n        for field in before.model_fields_set.union(after.model_fields_set):\n            if (\n                isinstance(before, (Markdown, Text))\n                and isinstance(after, (Markdown, Text))\n                and field == \"value\"\n                and after.value.startswith(before.value)\n            ):\n                # Appends to the value prop of Markdown or Text do not trigger a full replace\n                continue\n            if full_replace_value(getattr(before, field), getattr(after, field)):\n                return True\n\n        return False\n\n    if full_replace(before, after):\n        return [WidgetRootUpdated(widget=after)]\n\n    deltas: list[\n        WidgetStreamingTextValueDelta | WidgetComponentUpdated | WidgetRootUpdated\n    ] = []\n\n    def find_all_streaming_text_components(\n        component: WidgetComponent | WidgetRoot,\n    ) -&gt; dict[str, Markdown | Text]:\n        components = {}\n\n        def recurse(component: WidgetComponent | WidgetRoot):\n            if isinstance(component, (Markdown, Text)) and component.id:\n                components[component.id] = component\n\n            if hasattr(component, \"children\"):\n                children = getattr(component, \"children\", None) or []\n                for child in children:\n                    recurse(child)\n\n        recurse(component)\n        return components\n\n    before_nodes = find_all_streaming_text_components(before)\n    after_nodes = find_all_streaming_text_components(after)\n\n    for id, after_node in after_nodes.items():\n        before_node = before_nodes.get(id)\n        if before_node is None:\n            raise ValueError(\n                f\"Node {id} was not present when the widget was initially rendered. All nodes with ID must persist across all widget updates.\"\n            )\n\n        if before_node.value != after_node.value:\n            if not after_node.value.startswith(before_node.value):\n                raise ValueError(\n                    f\"Node {id} was updated with a new value that is not a prefix of the initial value. All widget updates must be cumulative.\"\n                )\n            done = not after_node.streaming\n            deltas.append(\n                WidgetStreamingTextValueDelta(\n                    component_id=id,\n                    delta=after_node.value[len(before_node.value) :],\n                    done=done,\n                )\n            )\n\n    return deltas\n</code></pre>"},{"location":"api/chatkit/store/","title":"store","text":""},{"location":"api/chatkit/store/#chatkit.store.AttachmentStore","title":"AttachmentStore","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TContext]</code></p> Source code in <code>chatkit/store.py</code> <pre><code>class AttachmentStore(ABC, Generic[TContext]):\n    @abstractmethod\n    async def delete_attachment(self, attachment_id: str, context: TContext) -&gt; None:\n        pass\n\n    async def create_attachment(\n        self, input: AttachmentCreateParams, context: TContext\n    ) -&gt; Attachment:\n        raise NotImplementedError(\n            f\"{type(self).__name__} must override create_attachment() to support two-phase file upload\"\n        )\n\n    def generate_attachment_id(self, mime_type: str, context: TContext) -&gt; str:\n        \"\"\"Return a new identifier for a file. Override this method to customize file ID generation.\"\"\"\n\n        return default_generate_id(\"attachment\")\n</code></pre>"},{"location":"api/chatkit/store/#chatkit.store.AttachmentStore.generate_attachment_id","title":"generate_attachment_id","text":"<pre><code>generate_attachment_id(\n    mime_type: str, context: TContext\n) -&gt; str\n</code></pre> <p>Return a new identifier for a file. Override this method to customize file ID generation.</p> Source code in <code>chatkit/store.py</code> <pre><code>def generate_attachment_id(self, mime_type: str, context: TContext) -&gt; str:\n    \"\"\"Return a new identifier for a file. Override this method to customize file ID generation.\"\"\"\n\n    return default_generate_id(\"attachment\")\n</code></pre>"},{"location":"api/chatkit/store/#chatkit.store.Store","title":"Store","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TContext]</code></p> Source code in <code>chatkit/store.py</code> <pre><code>class Store(ABC, Generic[TContext]):\n    def generate_thread_id(self, context: TContext) -&gt; str:\n        \"\"\"Return a new identifier for a thread. Override this method to customize thread ID generation.\"\"\"\n\n        return default_generate_id(\"thread\")\n\n    def generate_item_id(\n        self, item_type: StoreItemType, thread: ThreadMetadata, context: TContext\n    ) -&gt; str:\n        \"\"\"Return a new identifier for a thread item. Override this method to customize item ID generation.\"\"\"\n\n        return default_generate_id(item_type)\n\n    @abstractmethod\n    async def load_thread(self, thread_id: str, context: TContext) -&gt; ThreadMetadata:\n        pass\n\n    @abstractmethod\n    async def save_thread(self, thread: ThreadMetadata, context: TContext) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def load_thread_items(\n        self,\n        thread_id: str,\n        after: str | None,\n        limit: int,\n        order: str,\n        context: TContext,\n    ) -&gt; Page[ThreadItem]:\n        pass\n\n    @abstractmethod\n    async def save_attachment(self, attachment: Attachment, context: TContext) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def load_attachment(\n        self, attachment_id: str, context: TContext\n    ) -&gt; Attachment:\n        pass\n\n    @abstractmethod\n    async def delete_attachment(self, attachment_id: str, context: TContext) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def load_threads(\n        self,\n        limit: int,\n        after: str | None,\n        order: str,\n        context: TContext,\n    ) -&gt; Page[ThreadMetadata]:\n        pass\n\n    @abstractmethod\n    async def add_thread_item(\n        self, thread_id: str, item: ThreadItem, context: TContext\n    ) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def save_item(\n        self, thread_id: str, item: ThreadItem, context: TContext\n    ) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def load_item(\n        self, thread_id: str, item_id: str, context: TContext\n    ) -&gt; ThreadItem:\n        pass\n\n    @abstractmethod\n    async def delete_thread(self, thread_id: str, context: TContext) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def delete_thread_item(\n        self, thread_id: str, item_id: str, context: TContext\n    ) -&gt; None:\n        pass\n</code></pre>"},{"location":"api/chatkit/store/#chatkit.store.Store.generate_thread_id","title":"generate_thread_id","text":"<pre><code>generate_thread_id(context: TContext) -&gt; str\n</code></pre> <p>Return a new identifier for a thread. Override this method to customize thread ID generation.</p> Source code in <code>chatkit/store.py</code> <pre><code>def generate_thread_id(self, context: TContext) -&gt; str:\n    \"\"\"Return a new identifier for a thread. Override this method to customize thread ID generation.\"\"\"\n\n    return default_generate_id(\"thread\")\n</code></pre>"},{"location":"api/chatkit/store/#chatkit.store.Store.generate_item_id","title":"generate_item_id","text":"<pre><code>generate_item_id(\n    item_type: StoreItemType,\n    thread: ThreadMetadata,\n    context: TContext,\n) -&gt; str\n</code></pre> <p>Return a new identifier for a thread item. Override this method to customize item ID generation.</p> Source code in <code>chatkit/store.py</code> <pre><code>def generate_item_id(\n    self, item_type: StoreItemType, thread: ThreadMetadata, context: TContext\n) -&gt; str:\n    \"\"\"Return a new identifier for a thread item. Override this method to customize item ID generation.\"\"\"\n\n    return default_generate_id(item_type)\n</code></pre>"},{"location":"api/chatkit/types/","title":"types","text":""},{"location":"api/chatkit/types/#chatkit.types.StreamingReq","title":"StreamingReq  <code>module-attribute</code>","text":"<pre><code>StreamingReq = (\n    ThreadsCreateReq\n    | ThreadsAddUserMessageReq\n    | ThreadsAddClientToolOutputReq\n    | ThreadsRetryAfterItemReq\n    | ThreadsCustomActionReq\n)\n</code></pre> <p>Union of request types that produce streaming responses.</p>"},{"location":"api/chatkit/types/#chatkit.types.NonStreamingReq","title":"NonStreamingReq  <code>module-attribute</code>","text":"<pre><code>NonStreamingReq = (\n    ThreadsGetByIdReq\n    | ThreadsListReq\n    | ItemsListReq\n    | ItemsFeedbackReq\n    | AttachmentsCreateReq\n    | AttachmentsDeleteReq\n    | ThreadsUpdateReq\n    | ThreadsDeleteReq\n)\n</code></pre> <p>Union of request types that yield immediate responses.</p>"},{"location":"api/chatkit/types/#chatkit.types.ThreadStreamEvent","title":"ThreadStreamEvent  <code>module-attribute</code>","text":"<pre><code>ThreadStreamEvent = Annotated[\n    ThreadCreatedEvent\n    | ThreadUpdatedEvent\n    | ThreadItemDoneEvent\n    | ThreadItemAddedEvent\n    | ThreadItemUpdated\n    | ThreadItemRemovedEvent\n    | ThreadItemReplacedEvent\n    | ProgressUpdateEvent\n    | ErrorEvent\n    | NoticeEvent,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of all streaming events emitted to clients.</p>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItemUpdate","title":"ThreadItemUpdate  <code>module-attribute</code>","text":"<pre><code>ThreadItemUpdate = (\n    AssistantMessageContentPartAdded\n    | AssistantMessageContentPartTextDelta\n    | AssistantMessageContentPartAnnotationAdded\n    | AssistantMessageContentPartDone\n    | WidgetStreamingTextValueDelta\n    | WidgetComponentUpdated\n    | WidgetRootUpdated\n    | WorkflowTaskAdded\n    | WorkflowTaskUpdated\n)\n</code></pre> <p>Union of possible updates applied to thread items.</p>"},{"location":"api/chatkit/types/#chatkit.types.ThreadStatus","title":"ThreadStatus  <code>module-attribute</code>","text":"<pre><code>ThreadStatus = Annotated[\n    ActiveStatus | LockedStatus | ClosedStatus,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of lifecycle states for a thread.</p>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItem","title":"ThreadItem  <code>module-attribute</code>","text":"<pre><code>ThreadItem = Annotated[\n    UserMessageItem\n    | AssistantMessageItem\n    | ClientToolCallItem\n    | WidgetItem\n    | WorkflowItem\n    | TaskItem\n    | HiddenContextItem\n    | EndOfTurnItem,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of all thread item variants.</p>"},{"location":"api/chatkit/types/#chatkit.types.UserMessageContent","title":"UserMessageContent  <code>module-attribute</code>","text":"<pre><code>UserMessageContent = Annotated[\n    UserMessageTextContent | UserMessageTagContent,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of allowed user message content payloads.</p>"},{"location":"api/chatkit/types/#chatkit.types.Attachment","title":"Attachment  <code>module-attribute</code>","text":"<pre><code>Attachment = Annotated[\n    FileAttachment | ImageAttachment,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of supported attachment types.</p>"},{"location":"api/chatkit/types/#chatkit.types.WorkflowSummary","title":"WorkflowSummary  <code>module-attribute</code>","text":"<pre><code>WorkflowSummary = CustomSummary | DurationSummary\n</code></pre> <p>Summary variants available for workflows.</p>"},{"location":"api/chatkit/types/#chatkit.types.Task","title":"Task  <code>module-attribute</code>","text":"<pre><code>Task = Annotated[\n    CustomTask\n    | SearchTask\n    | ThoughtTask\n    | FileTask\n    | ImageTask,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of workflow task variants.</p>"},{"location":"api/chatkit/types/#chatkit.types.Source","title":"Source  <code>module-attribute</code>","text":"<pre><code>Source = Annotated[\n    URLSource | FileSource | EntitySource,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of supported source types.</p>"},{"location":"api/chatkit/types/#chatkit.types.FeedbackKind","title":"FeedbackKind  <code>module-attribute</code>","text":"<pre><code>FeedbackKind = Literal['positive', 'negative']\n</code></pre> <p>Literal type for feedback sentiment.</p>"},{"location":"api/chatkit/types/#chatkit.types.IconName","title":"IconName  <code>module-attribute</code>","text":"<pre><code>IconName = Literal[\n    \"analytics\",\n    \"atom\",\n    \"bolt\",\n    \"book-open\",\n    \"book-closed\",\n    \"calendar\",\n    \"chart\",\n    \"circle-question\",\n    \"compass\",\n    \"cube\",\n    \"globe\",\n    \"keys\",\n    \"lab\",\n    \"images\",\n    \"lifesaver\",\n    \"lightbulb\",\n    \"map-pin\",\n    \"name\",\n    \"notebook\",\n    \"notebook-pencil\",\n    \"page-blank\",\n    \"profile\",\n    \"profile-card\",\n    \"search\",\n    \"sparkle\",\n    \"sparkle-double\",\n    \"square-code\",\n    \"square-image\",\n    \"square-text\",\n    \"suitcase\",\n    \"write\",\n    \"write-alt\",\n    \"write-alt2\",\n]\n</code></pre> <p>Literal names of supported progress icons.</p>"},{"location":"api/chatkit/types/#chatkit.types.Page","title":"Page","text":"<p>               Bases: <code>BaseModel</code>, <code>Generic[T]</code></p> <p>Paginated collection of records returned from the API.</p> Source code in <code>chatkit/types.py</code> <pre><code>class Page(BaseModel, Generic[T]):\n    \"\"\"Paginated collection of records returned from the API.\"\"\"\n\n    data: list[T] = []\n    has_more: bool = False\n    after: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.BaseReq","title":"BaseReq","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for all request payloads.</p> Source code in <code>chatkit/types.py</code> <pre><code>class BaseReq(BaseModel):\n    \"\"\"Base class for all request payloads.\"\"\"\n\n    metadata: dict[str, Any] = Field(default_factory=dict)\n    \"\"\"Arbitrary integration-specific metadata.\"\"\"\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.BaseReq.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, Any] = Field(default_factory=dict)\n</code></pre> <p>Arbitrary integration-specific metadata.</p>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsGetByIdReq","title":"ThreadsGetByIdReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to fetch a single thread by its identifier.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsGetByIdReq(BaseReq):\n    \"\"\"Request to fetch a single thread by its identifier.\"\"\"\n\n    type: Literal[\"threads.get_by_id\"] = \"threads.get_by_id\"\n    params: ThreadGetByIdParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadGetByIdParams","title":"ThreadGetByIdParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters for retrieving a thread by id.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadGetByIdParams(BaseModel):\n    \"\"\"Parameters for retrieving a thread by id.\"\"\"\n\n    thread_id: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsCreateReq","title":"ThreadsCreateReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to create a new thread from a user message.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsCreateReq(BaseReq):\n    \"\"\"Request to create a new thread from a user message.\"\"\"\n\n    type: Literal[\"threads.create\"] = \"threads.create\"\n    params: ThreadCreateParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadCreateParams","title":"ThreadCreateParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>User input required to create a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadCreateParams(BaseModel):\n    \"\"\"User input required to create a thread.\"\"\"\n\n    input: UserMessageInput\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadListParams","title":"ThreadListParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pagination parameters for listing threads.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadListParams(BaseModel):\n    \"\"\"Pagination parameters for listing threads.\"\"\"\n\n    limit: int | None = None\n    order: Literal[\"asc\", \"desc\"] = \"desc\"\n    after: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsListReq","title":"ThreadsListReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to list threads.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsListReq(BaseReq):\n    \"\"\"Request to list threads.\"\"\"\n\n    type: Literal[\"threads.list\"] = \"threads.list\"\n    params: ThreadListParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsAddUserMessageReq","title":"ThreadsAddUserMessageReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to append a user message to a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsAddUserMessageReq(BaseReq):\n    \"\"\"Request to append a user message to a thread.\"\"\"\n\n    type: Literal[\"threads.add_user_message\"] = \"threads.add_user_message\"\n    params: ThreadAddUserMessageParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadAddUserMessageParams","title":"ThreadAddUserMessageParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters for adding a user message to a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadAddUserMessageParams(BaseModel):\n    \"\"\"Parameters for adding a user message to a thread.\"\"\"\n\n    input: UserMessageInput\n    thread_id: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsAddClientToolOutputReq","title":"ThreadsAddClientToolOutputReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to add a client tool's output to a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsAddClientToolOutputReq(BaseReq):\n    \"\"\"Request to add a client tool's output to a thread.\"\"\"\n\n    type: Literal[\"threads.add_client_tool_output\"] = \"threads.add_client_tool_output\"\n    params: ThreadAddClientToolOutputParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadAddClientToolOutputParams","title":"ThreadAddClientToolOutputParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters for recording tool output in a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadAddClientToolOutputParams(BaseModel):\n    \"\"\"Parameters for recording tool output in a thread.\"\"\"\n\n    thread_id: str\n    result: Any\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsCustomActionReq","title":"ThreadsCustomActionReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to execute a custom action within a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsCustomActionReq(BaseReq):\n    \"\"\"Request to execute a custom action within a thread.\"\"\"\n\n    type: Literal[\"threads.custom_action\"] = \"threads.custom_action\"\n    params: ThreadCustomActionParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadCustomActionParams","title":"ThreadCustomActionParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters describing the custom action to execute.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadCustomActionParams(BaseModel):\n    \"\"\"Parameters describing the custom action to execute.\"\"\"\n\n    thread_id: str\n    item_id: str | None = None\n    action: Action[str, Any]\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsRetryAfterItemReq","title":"ThreadsRetryAfterItemReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to retry processing after a specific thread item.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsRetryAfterItemReq(BaseReq):\n    \"\"\"Request to retry processing after a specific thread item.\"\"\"\n\n    type: Literal[\"threads.retry_after_item\"] = \"threads.retry_after_item\"\n    params: ThreadRetryAfterItemParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadRetryAfterItemParams","title":"ThreadRetryAfterItemParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters specifying which item to retry.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadRetryAfterItemParams(BaseModel):\n    \"\"\"Parameters specifying which item to retry.\"\"\"\n\n    thread_id: str\n    item_id: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ItemsFeedbackReq","title":"ItemsFeedbackReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to submit feedback on specific items.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ItemsFeedbackReq(BaseReq):\n    \"\"\"Request to submit feedback on specific items.\"\"\"\n\n    type: Literal[\"items.feedback\"] = \"items.feedback\"\n    params: ItemFeedbackParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ItemFeedbackParams","title":"ItemFeedbackParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters describing feedback targets and sentiment.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ItemFeedbackParams(BaseModel):\n    \"\"\"Parameters describing feedback targets and sentiment.\"\"\"\n\n    thread_id: str\n    item_ids: list[str]\n    kind: FeedbackKind\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AttachmentsDeleteReq","title":"AttachmentsDeleteReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to remove an attachment.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AttachmentsDeleteReq(BaseReq):\n    \"\"\"Request to remove an attachment.\"\"\"\n\n    type: Literal[\"attachments.delete\"] = \"attachments.delete\"\n    params: AttachmentDeleteParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AttachmentDeleteParams","title":"AttachmentDeleteParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters identifying an attachment to delete.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AttachmentDeleteParams(BaseModel):\n    \"\"\"Parameters identifying an attachment to delete.\"\"\"\n\n    attachment_id: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AttachmentsCreateReq","title":"AttachmentsCreateReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to register a new attachment.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AttachmentsCreateReq(BaseReq):\n    \"\"\"Request to register a new attachment.\"\"\"\n\n    type: Literal[\"attachments.create\"] = \"attachments.create\"\n    params: AttachmentCreateParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AttachmentCreateParams","title":"AttachmentCreateParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata needed to initialize an attachment.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AttachmentCreateParams(BaseModel):\n    \"\"\"Metadata needed to initialize an attachment.\"\"\"\n\n    name: str\n    size: int\n    mime_type: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ItemsListReq","title":"ItemsListReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to list items inside a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ItemsListReq(BaseReq):\n    \"\"\"Request to list items inside a thread.\"\"\"\n\n    type: Literal[\"items.list\"] = \"items.list\"\n    params: ItemsListParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ItemsListParams","title":"ItemsListParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pagination parameters for listing thread items.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ItemsListParams(BaseModel):\n    \"\"\"Pagination parameters for listing thread items.\"\"\"\n\n    thread_id: str\n    limit: int | None = None\n    order: Literal[\"asc\", \"desc\"] = \"desc\"\n    after: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsUpdateReq","title":"ThreadsUpdateReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to update thread metadata.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsUpdateReq(BaseReq):\n    \"\"\"Request to update thread metadata.\"\"\"\n\n    type: Literal[\"threads.update\"] = \"threads.update\"\n    params: ThreadUpdateParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadUpdateParams","title":"ThreadUpdateParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters for updating a thread's properties.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadUpdateParams(BaseModel):\n    \"\"\"Parameters for updating a thread's properties.\"\"\"\n\n    thread_id: str\n    title: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadsDeleteReq","title":"ThreadsDeleteReq","text":"<p>               Bases: <code>BaseReq</code></p> <p>Request to delete a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadsDeleteReq(BaseReq):\n    \"\"\"Request to delete a thread.\"\"\"\n\n    type: Literal[\"threads.delete\"] = \"threads.delete\"\n    params: ThreadDeleteParams\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadDeleteParams","title":"ThreadDeleteParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters identifying a thread to delete.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadDeleteParams(BaseModel):\n    \"\"\"Parameters identifying a thread to delete.\"\"\"\n\n    thread_id: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadCreatedEvent","title":"ThreadCreatedEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a thread is created.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadCreatedEvent(BaseModel):\n    \"\"\"Event emitted when a thread is created.\"\"\"\n\n    type: Literal[\"thread.created\"] = \"thread.created\"\n    thread: Thread\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadUpdatedEvent","title":"ThreadUpdatedEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a thread is updated.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadUpdatedEvent(BaseModel):\n    \"\"\"Event emitted when a thread is updated.\"\"\"\n\n    type: Literal[\"thread.updated\"] = \"thread.updated\"\n    thread: Thread\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItemAddedEvent","title":"ThreadItemAddedEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a new item is added to a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadItemAddedEvent(BaseModel):\n    \"\"\"Event emitted when a new item is added to a thread.\"\"\"\n\n    type: Literal[\"thread.item.added\"] = \"thread.item.added\"\n    item: ThreadItem\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItemUpdated","title":"ThreadItemUpdated","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event describing an update to an existing thread item.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadItemUpdated(BaseModel):\n    \"\"\"Event describing an update to an existing thread item.\"\"\"\n\n    type: Literal[\"thread.item.updated\"] = \"thread.item.updated\"\n    item_id: str\n    update: ThreadItemUpdate\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItemDoneEvent","title":"ThreadItemDoneEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a thread item is marked complete.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadItemDoneEvent(BaseModel):\n    \"\"\"Event emitted when a thread item is marked complete.\"\"\"\n\n    type: Literal[\"thread.item.done\"] = \"thread.item.done\"\n    item: ThreadItem\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItemRemovedEvent","title":"ThreadItemRemovedEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a thread item is removed.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadItemRemovedEvent(BaseModel):\n    \"\"\"Event emitted when a thread item is removed.\"\"\"\n\n    type: Literal[\"thread.item.removed\"] = \"thread.item.removed\"\n    item_id: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItemReplacedEvent","title":"ThreadItemReplacedEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a thread item is replaced.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadItemReplacedEvent(BaseModel):\n    \"\"\"Event emitted when a thread item is replaced.\"\"\"\n\n    type: Literal[\"thread.item.replaced\"] = \"thread.item.replaced\"\n    item: ThreadItem\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ProgressUpdateEvent","title":"ProgressUpdateEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event providing incremental progress from the assistant.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ProgressUpdateEvent(BaseModel):\n    \"\"\"Event providing incremental progress from the assistant.\"\"\"\n\n    type: Literal[\"progress_update\"] = \"progress_update\"\n    icon: IconName | None = None\n    text: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ErrorEvent","title":"ErrorEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event indicating an error occurred while processing a thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ErrorEvent(BaseModel):\n    \"\"\"Event indicating an error occurred while processing a thread.\"\"\"\n\n    type: Literal[\"error\"] = \"error\"\n    code: ErrorCode | Literal[\"custom\"] = Field(default=\"custom\")\n    message: str | None = None\n    allow_retry: bool = Field(default=False)\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.NoticeEvent","title":"NoticeEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event conveying a user-facing notice.</p> Source code in <code>chatkit/types.py</code> <pre><code>class NoticeEvent(BaseModel):\n    \"\"\"Event conveying a user-facing notice.\"\"\"\n\n    type: Literal[\"notice\"] = \"notice\"\n    level: Literal[\"info\", \"warning\", \"danger\"]\n    message: str\n    \"\"\"\n    Supports markdown e.g. \"You've reached your limit of 100 messages. [Upgrade](https://...) to a paid plan.\"\n    \"\"\"\n    title: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.NoticeEvent.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>Supports markdown e.g. \"You've reached your limit of 100 messages. Upgrade to a paid plan.\"</p>"},{"location":"api/chatkit/types/#chatkit.types.AssistantMessageContentPartAdded","title":"AssistantMessageContentPartAdded","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when new assistant content is appended.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AssistantMessageContentPartAdded(BaseModel):\n    \"\"\"Event emitted when new assistant content is appended.\"\"\"\n\n    type: Literal[\"assistant_message.content_part.added\"] = (\n        \"assistant_message.content_part.added\"\n    )\n    content_index: int\n    content: AssistantMessageContent\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AssistantMessageContentPartTextDelta","title":"AssistantMessageContentPartTextDelta","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event carrying incremental assistant text output.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AssistantMessageContentPartTextDelta(BaseModel):\n    \"\"\"Event carrying incremental assistant text output.\"\"\"\n\n    type: Literal[\"assistant_message.content_part.text_delta\"] = (\n        \"assistant_message.content_part.text_delta\"\n    )\n    content_index: int\n    delta: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AssistantMessageContentPartAnnotationAdded","title":"AssistantMessageContentPartAnnotationAdded","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event announcing a new annotation on assistant content.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AssistantMessageContentPartAnnotationAdded(BaseModel):\n    \"\"\"Event announcing a new annotation on assistant content.\"\"\"\n\n    type: Literal[\"assistant_message.content_part.annotation_added\"] = (\n        \"assistant_message.content_part.annotation_added\"\n    )\n    content_index: int\n    annotation_index: int\n    annotation: Annotation\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AssistantMessageContentPartDone","title":"AssistantMessageContentPartDone","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event indicating an assistant content part is finalized.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AssistantMessageContentPartDone(BaseModel):\n    \"\"\"Event indicating an assistant content part is finalized.\"\"\"\n\n    type: Literal[\"assistant_message.content_part.done\"] = (\n        \"assistant_message.content_part.done\"\n    )\n    content_index: int\n    content: AssistantMessageContent\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.WidgetStreamingTextValueDelta","title":"WidgetStreamingTextValueDelta","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event streaming widget text deltas.</p> Source code in <code>chatkit/types.py</code> <pre><code>class WidgetStreamingTextValueDelta(BaseModel):\n    \"\"\"Event streaming widget text deltas.\"\"\"\n\n    type: Literal[\"widget.streaming_text.value_delta\"] = (\n        \"widget.streaming_text.value_delta\"\n    )\n    component_id: str\n    delta: str\n    done: bool\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.WidgetRootUpdated","title":"WidgetRootUpdated","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event published when the widget root changes.</p> Source code in <code>chatkit/types.py</code> <pre><code>class WidgetRootUpdated(BaseModel):\n    \"\"\"Event published when the widget root changes.\"\"\"\n\n    type: Literal[\"widget.root.updated\"] = \"widget.root.updated\"\n    widget: WidgetRoot\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.WidgetComponentUpdated","title":"WidgetComponentUpdated","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a widget component updates.</p> Source code in <code>chatkit/types.py</code> <pre><code>class WidgetComponentUpdated(BaseModel):\n    \"\"\"Event emitted when a widget component updates.\"\"\"\n\n    type: Literal[\"widget.component.updated\"] = \"widget.component.updated\"\n    component_id: str\n    component: WidgetComponent\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.WorkflowTaskAdded","title":"WorkflowTaskAdded","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a workflow task is added.</p> Source code in <code>chatkit/types.py</code> <pre><code>class WorkflowTaskAdded(BaseModel):\n    \"\"\"Event emitted when a workflow task is added.\"\"\"\n\n    type: Literal[\"workflow.task.added\"] = \"workflow.task.added\"\n    task_index: int\n    task: Task\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.WorkflowTaskUpdated","title":"WorkflowTaskUpdated","text":"<p>               Bases: <code>BaseModel</code></p> <p>Event emitted when a workflow task is updated.</p> Source code in <code>chatkit/types.py</code> <pre><code>class WorkflowTaskUpdated(BaseModel):\n    \"\"\"Event emitted when a workflow task is updated.\"\"\"\n\n    type: Literal[\"workflow.task.updated\"] = \"workflow.task.updated\"\n    task_index: int\n    task: Task\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadMetadata","title":"ThreadMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata describing a thread without its items.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadMetadata(BaseModel):\n    \"\"\"Metadata describing a thread without its items.\"\"\"\n\n    title: str | None = None\n    id: str\n    created_at: datetime\n    status: ThreadStatus = Field(default_factory=lambda: ActiveStatus())\n    # TODO - make not client rendered\n    metadata: dict[str, Any] = Field(default_factory=dict)\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ActiveStatus","title":"ActiveStatus","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status indicating the thread is active.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ActiveStatus(BaseModel):\n    \"\"\"Status indicating the thread is active.\"\"\"\n\n    type: Literal[\"active\"] = Field(default=\"active\", frozen=True)\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.LockedStatus","title":"LockedStatus","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status indicating the thread is locked.</p> Source code in <code>chatkit/types.py</code> <pre><code>class LockedStatus(BaseModel):\n    \"\"\"Status indicating the thread is locked.\"\"\"\n\n    type: Literal[\"locked\"] = Field(default=\"locked\", frozen=True)\n    reason: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ClosedStatus","title":"ClosedStatus","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status indicating the thread is closed.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ClosedStatus(BaseModel):\n    \"\"\"Status indicating the thread is closed.\"\"\"\n\n    type: Literal[\"closed\"] = Field(default=\"closed\", frozen=True)\n    reason: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.Thread","title":"Thread","text":"<p>               Bases: <code>ThreadMetadata</code></p> <p>Thread with its paginated items.</p> Source code in <code>chatkit/types.py</code> <pre><code>class Thread(ThreadMetadata):\n    \"\"\"Thread with its paginated items.\"\"\"\n\n    items: Page[ThreadItem]\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThreadItemBase","title":"ThreadItemBase","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base fields shared by all thread items.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThreadItemBase(BaseModel):\n    \"\"\"Base fields shared by all thread items.\"\"\"\n\n    id: str\n    thread_id: str\n    created_at: datetime\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.UserMessageItem","title":"UserMessageItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>Thread item representing a user message.</p> Source code in <code>chatkit/types.py</code> <pre><code>class UserMessageItem(ThreadItemBase):\n    \"\"\"Thread item representing a user message.\"\"\"\n\n    type: Literal[\"user_message\"] = \"user_message\"\n    content: list[UserMessageContent]\n    attachments: list[Attachment] = Field(default_factory=list)\n    quoted_text: str | None = None\n    inference_options: InferenceOptions\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AssistantMessageItem","title":"AssistantMessageItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>Thread item representing an assistant message.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AssistantMessageItem(ThreadItemBase):\n    \"\"\"Thread item representing an assistant message.\"\"\"\n\n    type: Literal[\"assistant_message\"] = \"assistant_message\"\n    content: list[AssistantMessageContent]\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ClientToolCallItem","title":"ClientToolCallItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>Thread item capturing a client tool call.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ClientToolCallItem(ThreadItemBase):\n    \"\"\"Thread item capturing a client tool call.\"\"\"\n\n    type: Literal[\"client_tool_call\"] = \"client_tool_call\"\n    status: Literal[\"pending\", \"completed\"] = \"pending\"\n    call_id: str\n    name: str\n    arguments: dict[str, Any]\n    output: Any | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.WidgetItem","title":"WidgetItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>Thread item containing widget content.</p> Source code in <code>chatkit/types.py</code> <pre><code>class WidgetItem(ThreadItemBase):\n    \"\"\"Thread item containing widget content.\"\"\"\n\n    type: Literal[\"widget\"] = \"widget\"\n    widget: WidgetRoot\n    copy_text: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.TaskItem","title":"TaskItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>Thread item containing a task.</p> Source code in <code>chatkit/types.py</code> <pre><code>class TaskItem(ThreadItemBase):\n    \"\"\"Thread item containing a task.\"\"\"\n\n    type: Literal[\"task\"] = \"task\"\n    task: Task\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.WorkflowItem","title":"WorkflowItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>Thread item representing a workflow.</p> Source code in <code>chatkit/types.py</code> <pre><code>class WorkflowItem(ThreadItemBase):\n    \"\"\"Thread item representing a workflow.\"\"\"\n\n    type: Literal[\"workflow\"] = \"workflow\"\n    workflow: Workflow\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.EndOfTurnItem","title":"EndOfTurnItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>Marker item indicating the assistant ends its turn.</p> Source code in <code>chatkit/types.py</code> <pre><code>class EndOfTurnItem(ThreadItemBase):\n    \"\"\"Marker item indicating the assistant ends its turn.\"\"\"\n\n    type: Literal[\"end_of_turn\"] = \"end_of_turn\"\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.HiddenContextItem","title":"HiddenContextItem","text":"<p>               Bases: <code>ThreadItemBase</code></p> <p>HiddenContext is never sent to the client. It's not officially part of ChatKit. It is only used internally to store additional context in a specific place in the thread.</p> Source code in <code>chatkit/types.py</code> <pre><code>class HiddenContextItem(ThreadItemBase):\n    \"\"\"HiddenContext is never sent to the client. It's not officially part of ChatKit. It is only used internally to store additional context in a specific place in the thread.\"\"\"\n\n    type: Literal[\"hidden_context_item\"] = \"hidden_context_item\"\n    content: Any\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AssistantMessageContent","title":"AssistantMessageContent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Assistant message content consisting of text and annotations.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AssistantMessageContent(BaseModel):\n    \"\"\"Assistant message content consisting of text and annotations.\"\"\"\n\n    annotations: list[Annotation] = Field(default_factory=list)\n    text: str\n    type: Literal[\"output_text\"] = \"output_text\"\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.Annotation","title":"Annotation","text":"<p>               Bases: <code>BaseModel</code></p> <p>Reference to supporting context attached to assistant output.</p> Source code in <code>chatkit/types.py</code> <pre><code>class Annotation(BaseModel):\n    \"\"\"Reference to supporting context attached to assistant output.\"\"\"\n\n    type: Literal[\"annotation\"] = \"annotation\"\n    source: URLSource | FileSource | EntitySource\n    index: int | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.UserMessageInput","title":"UserMessageInput","text":"<p>               Bases: <code>BaseModel</code></p> <p>Payload describing a user message submission.</p> Source code in <code>chatkit/types.py</code> <pre><code>class UserMessageInput(BaseModel):\n    \"\"\"Payload describing a user message submission.\"\"\"\n\n    content: list[UserMessageContent]\n    attachments: list[str]\n    quoted_text: str | None = None\n    inference_options: InferenceOptions\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.UserMessageTextContent","title":"UserMessageTextContent","text":"<p>               Bases: <code>BaseModel</code></p> <p>User message content containing plaintext.</p> Source code in <code>chatkit/types.py</code> <pre><code>class UserMessageTextContent(BaseModel):\n    \"\"\"User message content containing plaintext.\"\"\"\n\n    type: Literal[\"input_text\"] = \"input_text\"\n    text: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.UserMessageTagContent","title":"UserMessageTagContent","text":"<p>               Bases: <code>BaseModel</code></p> <p>User message content representing an interactive tag.</p> Source code in <code>chatkit/types.py</code> <pre><code>class UserMessageTagContent(BaseModel):\n    \"\"\"User message content representing an interactive tag.\"\"\"\n\n    type: Literal[\"input_tag\"] = \"input_tag\"\n    id: str\n    text: str\n    data: dict[str, Any]\n    interactive: bool = False\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.InferenceOptions","title":"InferenceOptions","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model and tool configuration for message processing.</p> Source code in <code>chatkit/types.py</code> <pre><code>class InferenceOptions(BaseModel):\n    \"\"\"Model and tool configuration for message processing.\"\"\"\n\n    tool_choice: ToolChoice | None = None\n    model: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ToolChoice","title":"ToolChoice","text":"<p>               Bases: <code>BaseModel</code></p> <p>Explicit tool selection for the assistant to invoke.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ToolChoice(BaseModel):\n    \"\"\"Explicit tool selection for the assistant to invoke.\"\"\"\n\n    id: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AttachmentBase","title":"AttachmentBase","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base metadata shared by all attachments.</p> Source code in <code>chatkit/types.py</code> <pre><code>class AttachmentBase(BaseModel):\n    \"\"\"Base metadata shared by all attachments.\"\"\"\n\n    id: str\n    name: str\n    mime_type: str\n    upload_url: AnyUrl | None = None\n    \"\"\"\n    The URL to upload the file, used for two-phase upload.\n    Should be set to None after upload is complete or when using direct upload where uploading happens when creating the attachment object.\n    \"\"\"\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.AttachmentBase.upload_url","title":"upload_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>upload_url: AnyUrl | None = None\n</code></pre> <p>The URL to upload the file, used for two-phase upload. Should be set to None after upload is complete or when using direct upload where uploading happens when creating the attachment object.</p>"},{"location":"api/chatkit/types/#chatkit.types.FileAttachment","title":"FileAttachment","text":"<p>               Bases: <code>AttachmentBase</code></p> <p>Attachment representing a generic file.</p> Source code in <code>chatkit/types.py</code> <pre><code>class FileAttachment(AttachmentBase):\n    \"\"\"Attachment representing a generic file.\"\"\"\n\n    type: Literal[\"file\"] = \"file\"\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ImageAttachment","title":"ImageAttachment","text":"<p>               Bases: <code>AttachmentBase</code></p> <p>Attachment representing an image resource.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ImageAttachment(AttachmentBase):\n    \"\"\"Attachment representing an image resource.\"\"\"\n\n    type: Literal[\"image\"] = \"image\"\n    preview_url: AnyUrl\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.Workflow","title":"Workflow","text":"<p>               Bases: <code>BaseModel</code></p> <p>Workflow attached to a thread with optional summary.</p> Source code in <code>chatkit/types.py</code> <pre><code>class Workflow(BaseModel):\n    \"\"\"Workflow attached to a thread with optional summary.\"\"\"\n\n    type: Literal[\"custom\", \"reasoning\"]\n    tasks: list[Task]\n    summary: WorkflowSummary | None = None\n    expanded: bool = False\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.CustomSummary","title":"CustomSummary","text":"<p>               Bases: <code>BaseModel</code></p> <p>Custom summary for a workflow.</p> Source code in <code>chatkit/types.py</code> <pre><code>class CustomSummary(BaseModel):\n    \"\"\"Custom summary for a workflow.\"\"\"\n\n    title: str\n    icon: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.DurationSummary","title":"DurationSummary","text":"<p>               Bases: <code>BaseModel</code></p> <p>Summary providing total workflow duration.</p> Source code in <code>chatkit/types.py</code> <pre><code>class DurationSummary(BaseModel):\n    \"\"\"Summary providing total workflow duration.\"\"\"\n\n    duration: int\n    \"\"\"The duration of the workflow in seconds\"\"\"\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.DurationSummary.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: int\n</code></pre> <p>The duration of the workflow in seconds</p>"},{"location":"api/chatkit/types/#chatkit.types.BaseTask","title":"BaseTask","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base fields common to all workflow tasks.</p> Source code in <code>chatkit/types.py</code> <pre><code>class BaseTask(BaseModel):\n    \"\"\"Base fields common to all workflow tasks.\"\"\"\n\n    status_indicator: Literal[\"none\", \"loading\", \"complete\"] = \"none\"\n    \"\"\"Only used when rendering the task as part of a workflow. Indicates the status of the task.\"\"\"\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.BaseTask.status_indicator","title":"status_indicator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status_indicator: Literal[\"none\", \"loading\", \"complete\"] = (\n    \"none\"\n)\n</code></pre> <p>Only used when rendering the task as part of a workflow. Indicates the status of the task.</p>"},{"location":"api/chatkit/types/#chatkit.types.CustomTask","title":"CustomTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Workflow task displaying custom content.</p> Source code in <code>chatkit/types.py</code> <pre><code>class CustomTask(BaseTask):\n    \"\"\"Workflow task displaying custom content.\"\"\"\n\n    type: Literal[\"custom\"] = \"custom\"\n    title: str | None = None\n    icon: str | None = None\n    content: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.SearchTask","title":"SearchTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Workflow task representing a web search.</p> Source code in <code>chatkit/types.py</code> <pre><code>class SearchTask(BaseTask):\n    \"\"\"Workflow task representing a web search.\"\"\"\n\n    type: Literal[\"web_search\"] = \"web_search\"\n    title: str | None = None\n    title_query: str | None = None\n    queries: list[str] = Field(default_factory=list)\n    sources: list[URLSource] = Field(default_factory=list)\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ThoughtTask","title":"ThoughtTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Workflow task capturing assistant reasoning.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ThoughtTask(BaseTask):\n    \"\"\"Workflow task capturing assistant reasoning.\"\"\"\n\n    type: Literal[\"thought\"] = \"thought\"\n    title: str | None = None\n    content: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.FileTask","title":"FileTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Workflow task referencing file sources.</p> Source code in <code>chatkit/types.py</code> <pre><code>class FileTask(BaseTask):\n    \"\"\"Workflow task referencing file sources.\"\"\"\n\n    type: Literal[\"file\"] = \"file\"\n    title: str | None = None\n    sources: list[FileSource] = Field(default_factory=list)\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.ImageTask","title":"ImageTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Workflow task rendering image content.</p> Source code in <code>chatkit/types.py</code> <pre><code>class ImageTask(BaseTask):\n    \"\"\"Workflow task rendering image content.\"\"\"\n\n    type: Literal[\"image\"] = \"image\"\n    title: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.SourceBase","title":"SourceBase","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for sources displayed to users.</p> Source code in <code>chatkit/types.py</code> <pre><code>class SourceBase(BaseModel):\n    \"\"\"Base class for sources displayed to users.\"\"\"\n\n    title: str\n    description: str | None = None\n    timestamp: str | None = None\n    group: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.FileSource","title":"FileSource","text":"<p>               Bases: <code>SourceBase</code></p> <p>Source metadata for file-based references.</p> Source code in <code>chatkit/types.py</code> <pre><code>class FileSource(SourceBase):\n    \"\"\"Source metadata for file-based references.\"\"\"\n\n    type: Literal[\"file\"] = \"file\"\n    filename: str\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.URLSource","title":"URLSource","text":"<p>               Bases: <code>SourceBase</code></p> <p>Source metadata for external URLs.</p> Source code in <code>chatkit/types.py</code> <pre><code>class URLSource(SourceBase):\n    \"\"\"Source metadata for external URLs.\"\"\"\n\n    type: Literal[\"url\"] = \"url\"\n    url: str\n    attribution: str | None = None\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.EntitySource","title":"EntitySource","text":"<p>               Bases: <code>SourceBase</code></p> <p>Source metadata for entity references.</p> Source code in <code>chatkit/types.py</code> <pre><code>class EntitySource(SourceBase):\n    \"\"\"Source metadata for entity references.\"\"\"\n\n    type: Literal[\"entity\"] = \"entity\"\n    id: str\n    icon: str | None = None\n    preview: Literal[\"lazy\"] | None = None\n    data: dict[str, Any] = Field(default_factory=dict)\n</code></pre>"},{"location":"api/chatkit/types/#chatkit.types.is_streaming_req","title":"is_streaming_req","text":"<pre><code>is_streaming_req(\n    request: ChatKitReq,\n) -&gt; TypeIs[StreamingReq]\n</code></pre> <p>Return True if the given request should be processed as streaming.</p> Source code in <code>chatkit/types.py</code> <pre><code>def is_streaming_req(request: ChatKitReq) -&gt; TypeIs[StreamingReq]:\n    \"\"\"Return True if the given request should be processed as streaming.\"\"\"\n    return isinstance(\n        request,\n        (\n            ThreadsCreateReq,\n            ThreadsAddUserMessageReq,\n            ThreadsRetryAfterItemReq,\n            ThreadsAddClientToolOutputReq,\n            ThreadsCustomActionReq,\n        ),\n    )\n</code></pre>"},{"location":"api/chatkit/widgets/","title":"widgets","text":""},{"location":"api/chatkit/widgets/#chatkit.widgets.RadiusValue","title":"RadiusValue  <code>module-attribute</code>","text":"<pre><code>RadiusValue = Literal[\n    \"2xs\",\n    \"xs\",\n    \"sm\",\n    \"md\",\n    \"lg\",\n    \"xl\",\n    \"2xl\",\n    \"3xl\",\n    \"4xl\",\n    \"full\",\n    \"100%\",\n    \"none\",\n]\n</code></pre> <p>Allowed corner radius tokens.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.TextAlign","title":"TextAlign  <code>module-attribute</code>","text":"<pre><code>TextAlign = Literal['start', 'center', 'end']\n</code></pre> <p>Horizontal text alignment options.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.TextSize","title":"TextSize  <code>module-attribute</code>","text":"<pre><code>TextSize = Literal['xs', 'sm', 'md', 'lg', 'xl']\n</code></pre> <p>Body text size tokens.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.IconSize","title":"IconSize  <code>module-attribute</code>","text":"<pre><code>IconSize = Literal[\n    \"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\", \"3xl\"\n]\n</code></pre> <p>Icon size tokens.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.TitleSize","title":"TitleSize  <code>module-attribute</code>","text":"<pre><code>TitleSize = Literal[\n    \"sm\", \"md\", \"lg\", \"xl\", \"2xl\", \"3xl\", \"4xl\", \"5xl\"\n]\n</code></pre> <p>Title text size tokens.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.CaptionSize","title":"CaptionSize  <code>module-attribute</code>","text":"<pre><code>CaptionSize = Literal['sm', 'md', 'lg']\n</code></pre> <p>Caption text size tokens.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Alignment","title":"Alignment  <code>module-attribute</code>","text":"<pre><code>Alignment = Literal[\n    \"start\", \"center\", \"end\", \"baseline\", \"stretch\"\n]\n</code></pre> <p>Flexbox alignment options.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Justification","title":"Justification  <code>module-attribute</code>","text":"<pre><code>Justification = Literal[\n    \"start\",\n    \"center\",\n    \"end\",\n    \"between\",\n    \"around\",\n    \"evenly\",\n    \"stretch\",\n]\n</code></pre> <p>Flexbox justification options.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ControlVariant","title":"ControlVariant  <code>module-attribute</code>","text":"<pre><code>ControlVariant = Literal[\n    \"solid\", \"soft\", \"outline\", \"ghost\"\n]\n</code></pre> <p>Button and input style variants.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ControlSize","title":"ControlSize  <code>module-attribute</code>","text":"<pre><code>ControlSize = Literal[\n    \"3xs\", \"2xs\", \"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\", \"3xl\"\n]\n</code></pre> <p>Button and input size variants.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatus","title":"WidgetStatus  <code>module-attribute</code>","text":"<pre><code>WidgetStatus = (\n    WidgetStatusWithFavicon | WidgetStatusWithIcon\n)\n</code></pre> <p>Union for representing widget status messaging.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.CurveType","title":"CurveType  <code>module-attribute</code>","text":"<pre><code>CurveType = Literal[\n    \"basis\",\n    \"basisClosed\",\n    \"basisOpen\",\n    \"bumpX\",\n    \"bumpY\",\n    \"bump\",\n    \"linear\",\n    \"linearClosed\",\n    \"natural\",\n    \"monotoneX\",\n    \"monotoneY\",\n    \"monotone\",\n    \"step\",\n    \"stepBefore\",\n    \"stepAfter\",\n]\n</code></pre> <p>Interpolation curve types for <code>area</code> and <code>line</code> series.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Series","title":"Series  <code>module-attribute</code>","text":"<pre><code>Series = Annotated[\n    BarSeries | AreaSeries | LineSeries,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of all supported chart series types.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetComponent","title":"WidgetComponent  <code>module-attribute</code>","text":"<pre><code>WidgetComponent = Annotated[\n    Text\n    | Title\n    | Caption\n    | Chart\n    | Badge\n    | Markdown\n    | Box\n    | Row\n    | Col\n    | Divider\n    | Icon\n    | Image\n    | ListViewItem\n    | Button\n    | Checkbox\n    | Spacer\n    | Select\n    | DatePicker\n    | Form\n    | Input\n    | Label\n    | RadioGroup\n    | Textarea\n    | Transition,\n    Field(discriminator=\"type\"),\n]\n</code></pre> <p>Union of all renderable widget components.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetIcon","title":"WidgetIcon  <code>module-attribute</code>","text":"<pre><code>WidgetIcon = Literal[\n    \"agent\",\n    \"analytics\",\n    \"atom\",\n    \"bolt\",\n    \"book-open\",\n    \"book-clock\",\n    \"book-closed\",\n    \"calendar\",\n    \"chart\",\n    \"check\",\n    \"check-circle\",\n    \"check-circle-filled\",\n    \"chevron-left\",\n    \"chevron-right\",\n    \"circle-question\",\n    \"compass\",\n    \"confetti\",\n    \"cube\",\n    \"desktop\",\n    \"document\",\n    \"dot\",\n    \"dots-horizontal\",\n    \"dots-vertical\",\n    \"empty-circle\",\n    \"external-link\",\n    \"globe\",\n    \"keys\",\n    \"lab\",\n    \"images\",\n    \"info\",\n    \"lifesaver\",\n    \"lightbulb\",\n    \"mail\",\n    \"map-pin\",\n    \"maps\",\n    \"mobile\",\n    \"name\",\n    \"notebook\",\n    \"notebook-pencil\",\n    \"page-blank\",\n    \"phone\",\n    \"play\",\n    \"plus\",\n    \"profile\",\n    \"profile-card\",\n    \"reload\",\n    \"star\",\n    \"star-filled\",\n    \"search\",\n    \"sparkle\",\n    \"sparkle-double\",\n    \"square-code\",\n    \"square-image\",\n    \"square-text\",\n    \"suitcase\",\n    \"settings-slider\",\n    \"user\",\n    \"wreath\",\n    \"write\",\n    \"write-alt\",\n    \"write-alt2\",\n]\n</code></pre> <p>Icon names accepted by widgets that render icons.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ThemeColor","title":"ThemeColor","text":"<p>               Bases: <code>TypedDict</code></p> <p>Color values for light and dark themes.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class ThemeColor(TypedDict):\n    \"\"\"Color values for light and dark themes.\"\"\"\n\n    dark: str\n    \"\"\"Color to use when the theme is dark.\"\"\"\n    light: str\n    \"\"\"Color to use when the theme is light.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ThemeColor.dark","title":"dark  <code>instance-attribute</code>","text":"<pre><code>dark: str\n</code></pre> <p>Color to use when the theme is dark.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ThemeColor.light","title":"light  <code>instance-attribute</code>","text":"<pre><code>light: str\n</code></pre> <p>Color to use when the theme is light.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacing","title":"Spacing","text":"<p>               Bases: <code>TypedDict</code></p> <p>Shorthand spacing values applied to a widget.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Spacing(TypedDict):\n    \"\"\"Shorthand spacing values applied to a widget.\"\"\"\n\n    top: NotRequired[float | str]\n    \"\"\"Top spacing; accepts a spacing unit or CSS string.\"\"\"\n    right: NotRequired[float | str]\n    \"\"\"Right spacing; accepts a spacing unit or CSS string.\"\"\"\n    bottom: NotRequired[float | str]\n    \"\"\"Bottom spacing; accepts a spacing unit or CSS string.\"\"\"\n    left: NotRequired[float | str]\n    \"\"\"Left spacing; accepts a spacing unit or CSS string.\"\"\"\n    x: NotRequired[float | str]\n    \"\"\"Horizontal spacing; accepts a spacing unit or CSS string.\"\"\"\n    y: NotRequired[float | str]\n    \"\"\"Vertical spacing; accepts a spacing unit or CSS string.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacing.top","title":"top  <code>instance-attribute</code>","text":"<pre><code>top: NotRequired[float | str]\n</code></pre> <p>Top spacing; accepts a spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacing.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right: NotRequired[float | str]\n</code></pre> <p>Right spacing; accepts a spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacing.bottom","title":"bottom  <code>instance-attribute</code>","text":"<pre><code>bottom: NotRequired[float | str]\n</code></pre> <p>Bottom spacing; accepts a spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacing.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: NotRequired[float | str]\n</code></pre> <p>Left spacing; accepts a spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacing.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x: NotRequired[float | str]\n</code></pre> <p>Horizontal spacing; accepts a spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacing.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: NotRequired[float | str]\n</code></pre> <p>Vertical spacing; accepts a spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Border","title":"Border","text":"<p>               Bases: <code>TypedDict</code></p> <p>Border style definition for an edge.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Border(TypedDict):\n    \"\"\"Border style definition for an edge.\"\"\"\n\n    size: int\n    \"\"\"Thickness of the border in px.\"\"\"\n    color: NotRequired[str | ThemeColor]\n    \"\"\"Border color; accepts border color token, a primitive color token, a CSS string, or theme-aware `{ light, dark }`.\n\n    Valid tokens: `default` `subtle` `strong`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    style: NotRequired[\n        Literal[\n            \"solid\", \"dashed\", \"dotted\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\"\n        ]\n    ]\n    \"\"\"Border line style.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Border.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size: int\n</code></pre> <p>Thickness of the border in px.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Border.color","title":"color  <code>instance-attribute</code>","text":"<pre><code>color: NotRequired[str | ThemeColor]\n</code></pre> <p>Border color; accepts border color token, a primitive color token, a CSS string, or theme-aware <code>{ light, dark }</code>.</p> <p>Valid tokens: <code>default</code> <code>subtle</code> <code>strong</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Border.style","title":"style  <code>instance-attribute</code>","text":"<pre><code>style: NotRequired[\n    Literal[\n        \"solid\",\n        \"dashed\",\n        \"dotted\",\n        \"double\",\n        \"groove\",\n        \"ridge\",\n        \"inset\",\n        \"outset\",\n    ]\n]\n</code></pre> <p>Border line style.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Borders","title":"Borders","text":"<p>               Bases: <code>TypedDict</code></p> <p>Composite border configuration applied across edges.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Borders(TypedDict):\n    \"\"\"Composite border configuration applied across edges.\"\"\"\n\n    top: NotRequired[int | Border]\n    \"\"\"Top border or thickness in px.\"\"\"\n    right: NotRequired[int | Border]\n    \"\"\"Right border or thickness in px.\"\"\"\n    bottom: NotRequired[int | Border]\n    \"\"\"Bottom border or thickness in px.\"\"\"\n    left: NotRequired[int | Border]\n    \"\"\"Left border or thickness in px.\"\"\"\n    x: NotRequired[int | Border]\n    \"\"\"Horizontal borders or thickness in px.\"\"\"\n    y: NotRequired[int | Border]\n    \"\"\"Vertical borders or thickness in px.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Borders.top","title":"top  <code>instance-attribute</code>","text":"<pre><code>top: NotRequired[int | Border]\n</code></pre> <p>Top border or thickness in px.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Borders.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right: NotRequired[int | Border]\n</code></pre> <p>Right border or thickness in px.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Borders.bottom","title":"bottom  <code>instance-attribute</code>","text":"<pre><code>bottom: NotRequired[int | Border]\n</code></pre> <p>Bottom border or thickness in px.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Borders.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: NotRequired[int | Border]\n</code></pre> <p>Left border or thickness in px.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Borders.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x: NotRequired[int | Border]\n</code></pre> <p>Horizontal borders or thickness in px.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Borders.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: NotRequired[int | Border]\n</code></pre> <p>Vertical borders or thickness in px.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.MinMax","title":"MinMax","text":"<p>               Bases: <code>TypedDict</code></p> <p>Integer minimum/maximum bounds.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class MinMax(TypedDict):\n    \"\"\"Integer minimum/maximum bounds.\"\"\"\n\n    min: NotRequired[int]\n    \"\"\"Minimum value (inclusive).\"\"\"\n    max: NotRequired[int]\n    \"\"\"Maximum value (inclusive).\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.MinMax.min","title":"min  <code>instance-attribute</code>","text":"<pre><code>min: NotRequired[int]\n</code></pre> <p>Minimum value (inclusive).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.MinMax.max","title":"max  <code>instance-attribute</code>","text":"<pre><code>max: NotRequired[int]\n</code></pre> <p>Maximum value (inclusive).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps","title":"EditableProps","text":"<p>               Bases: <code>TypedDict</code></p> <p>Editable field options for text widgets.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class EditableProps(TypedDict):\n    \"\"\"Editable field options for text widgets.\"\"\"\n\n    name: str\n    \"\"\"The name of the form control field used when submitting forms.\"\"\"\n    autoFocus: NotRequired[bool]\n    \"\"\"Autofocus the editable input when it appears.\"\"\"\n    autoSelect: NotRequired[bool]\n    \"\"\"Select all text on focus.\"\"\"\n    autoComplete: NotRequired[str]\n    \"\"\"Native autocomplete hint for the input.\"\"\"\n    allowAutofillExtensions: NotRequired[bool]\n    \"\"\"Allow browser password/autofill extensions.\"\"\"\n    pattern: NotRequired[str]\n    \"\"\"Regex pattern for input validation.\"\"\"\n    placeholder: NotRequired[str]\n    \"\"\"Placeholder text for the editable input.\"\"\"\n    required: NotRequired[bool]\n    \"\"\"Mark the editable input as required.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the form control field used when submitting forms.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.autoFocus","title":"autoFocus  <code>instance-attribute</code>","text":"<pre><code>autoFocus: NotRequired[bool]\n</code></pre> <p>Autofocus the editable input when it appears.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.autoSelect","title":"autoSelect  <code>instance-attribute</code>","text":"<pre><code>autoSelect: NotRequired[bool]\n</code></pre> <p>Select all text on focus.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.autoComplete","title":"autoComplete  <code>instance-attribute</code>","text":"<pre><code>autoComplete: NotRequired[str]\n</code></pre> <p>Native autocomplete hint for the input.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.allowAutofillExtensions","title":"allowAutofillExtensions  <code>instance-attribute</code>","text":"<pre><code>allowAutofillExtensions: NotRequired[bool]\n</code></pre> <p>Allow browser password/autofill extensions.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.pattern","title":"pattern  <code>instance-attribute</code>","text":"<pre><code>pattern: NotRequired[str]\n</code></pre> <p>Regex pattern for input validation.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.placeholder","title":"placeholder  <code>instance-attribute</code>","text":"<pre><code>placeholder: NotRequired[str]\n</code></pre> <p>Placeholder text for the editable input.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.EditableProps.required","title":"required  <code>instance-attribute</code>","text":"<pre><code>required: NotRequired[bool]\n</code></pre> <p>Mark the editable input as required.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetComponentBase","title":"WidgetComponentBase","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base Pydantic model for all ChatKit widget components.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class WidgetComponentBase(BaseModel):\n    \"\"\"Base Pydantic model for all ChatKit widget components.\"\"\"\n\n    model_config = ConfigDict(serialize_by_alias=True)\n\n    key: str | None = None\n    id: str | None = None\n    type: str = Field(...)\n\n    # For nested model dumps (e.g. if Widget is not the top-level model)\n    @model_serializer(mode=\"wrap\")\n    def serialize(self, next_):\n        dumped = next_(self)\n        # Recursively filter out None values when serialized.\n        # Do this explicitly instead of overriding model_dump_json and model_dump;\n        # the overrides will not be invoked unless the widget is the top-level model.\n        dumped = _drop_none(dumped)\n        # include type even when exlude_defaults is True\n        if isinstance(dumped, dict):\n            dumped[\"type\"] = self.type\n\n        return dumped\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatusWithFavicon","title":"WidgetStatusWithFavicon","text":"<p>               Bases: <code>TypedDict</code></p> <p>Widget status representation using a favicon.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class WidgetStatusWithFavicon(TypedDict):\n    \"\"\"Widget status representation using a favicon.\"\"\"\n\n    text: str\n    \"\"\"Status text to display.\"\"\"\n    favicon: NotRequired[str]\n    \"\"\"URL of a favicon to render at the start of the status.\"\"\"\n    frame: NotRequired[bool]\n    \"\"\"Show a frame around the favicon for contrast.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatusWithFavicon.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>Status text to display.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatusWithFavicon.favicon","title":"favicon  <code>instance-attribute</code>","text":"<pre><code>favicon: NotRequired[str]\n</code></pre> <p>URL of a favicon to render at the start of the status.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatusWithFavicon.frame","title":"frame  <code>instance-attribute</code>","text":"<pre><code>frame: NotRequired[bool]\n</code></pre> <p>Show a frame around the favicon for contrast.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatusWithIcon","title":"WidgetStatusWithIcon","text":"<p>               Bases: <code>TypedDict</code></p> <p>Widget status representation using an icon.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class WidgetStatusWithIcon(TypedDict):\n    \"\"\"Widget status representation using an icon.\"\"\"\n\n    text: str\n    \"\"\"Status text to display.\"\"\"\n    icon: NotRequired[WidgetIcon]\n    \"\"\"Icon to render at the start of the status.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatusWithIcon.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>Status text to display.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.WidgetStatusWithIcon.icon","title":"icon  <code>instance-attribute</code>","text":"<pre><code>icon: NotRequired[WidgetIcon]\n</code></pre> <p>Icon to render at the start of the status.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListViewItem","title":"ListViewItem","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Single row inside a <code>ListView</code> component.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class ListViewItem(WidgetComponentBase):\n    \"\"\"Single row inside a ``ListView`` component.\"\"\"\n\n    type: Literal[\"ListViewItem\"] = Field(default=\"ListViewItem\", frozen=True)  # pyright: ignore\n    children: list[\"WidgetComponent\"]\n    \"\"\"Content for the list item.\"\"\"\n    onClickAction: ActionConfig | None = None\n    \"\"\"Optional action triggered when the list item is clicked.\"\"\"\n    gap: int | str | None = None\n    \"\"\"Gap between children within the list item; spacing unit or CSS string.\"\"\"\n    align: Alignment | None = None\n    \"\"\"Y-axis alignment for content within the list item.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListViewItem.children","title":"children  <code>instance-attribute</code>","text":"<pre><code>children: list['WidgetComponent']\n</code></pre> <p>Content for the list item.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListViewItem.onClickAction","title":"onClickAction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>onClickAction: ActionConfig | None = None\n</code></pre> <p>Optional action triggered when the list item is clicked.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListViewItem.gap","title":"gap  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gap: int | str | None = None\n</code></pre> <p>Gap between children within the list item; spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListViewItem.align","title":"align  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>align: Alignment | None = None\n</code></pre> <p>Y-axis alignment for content within the list item.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListView","title":"ListView","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Container component for rendering collections of list items.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class ListView(WidgetComponentBase):\n    \"\"\"Container component for rendering collections of list items.\"\"\"\n\n    type: Literal[\"ListView\"] = Field(default=\"ListView\", frozen=True)  # pyright: ignore\n    children: list[ListViewItem]\n    \"\"\"Items to render in the list.\"\"\"\n    limit: int | Literal[\"auto\"] | None = None\n    \"\"\"Max number of items to show before a \"Show more\" control.\"\"\"\n    status: WidgetStatus | None = None\n    \"\"\"Optional status header displayed above the list.\"\"\"\n    theme: Literal[\"light\", \"dark\"] | None = None\n    \"\"\"Force light or dark theme for this subtree.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListView.children","title":"children  <code>instance-attribute</code>","text":"<pre><code>children: list[ListViewItem]\n</code></pre> <p>Items to render in the list.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListView.limit","title":"limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>limit: int | Literal['auto'] | None = None\n</code></pre> <p>Max number of items to show before a \"Show more\" control.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListView.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: WidgetStatus | None = None\n</code></pre> <p>Optional status header displayed above the list.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.ListView.theme","title":"theme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theme: Literal['light', 'dark'] | None = None\n</code></pre> <p>Force light or dark theme for this subtree.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.CardAction","title":"CardAction","text":"<p>               Bases: <code>TypedDict</code></p> <p>Configuration for confirm/cancel actions within a card.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class CardAction(TypedDict):\n    \"\"\"Configuration for confirm/cancel actions within a card.\"\"\"\n\n    label: str\n    \"\"\"Button label shown in the card footer.\"\"\"\n    action: ActionConfig\n    \"\"\"Declarative action dispatched to the host application.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.CardAction.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str\n</code></pre> <p>Button label shown in the card footer.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.CardAction.action","title":"action  <code>instance-attribute</code>","text":"<pre><code>action: ActionConfig\n</code></pre> <p>Declarative action dispatched to the host application.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card","title":"Card","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Versatile container used for structuring widget content.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Card(WidgetComponentBase):\n    \"\"\"Versatile container used for structuring widget content.\"\"\"\n\n    type: Literal[\"Card\"] = Field(default=\"Card\", frozen=True)  # pyright: ignore\n    asForm: bool | None = None\n    \"\"\"Treat the card as an HTML form so confirm/cancel capture form data.\"\"\"\n    children: list[\"WidgetComponent\"]\n    \"\"\"Child components rendered inside the card.\"\"\"\n    background: str | ThemeColor | None = None\n    \"\"\"Background color; accepts background color token, a primitive color token, a CSS string, or theme-aware `{ light, dark }`.\n\n    Valid tokens: `surface` `surface-secondary` `surface-tertiary` `surface-elevated` `surface-elevated-secondary`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    size: Literal[\"sm\", \"md\", \"lg\", \"full\"] | None = None\n    \"\"\"Visual size of the card; accepts a size token. No preset default is documented.\"\"\"\n    padding: float | str | Spacing | None = None\n    \"\"\"Inner spacing of the card; spacing unit, CSS string, or padding object.\"\"\"\n    status: WidgetStatus | None = None\n    \"\"\"Optional status header displayed above the card.\"\"\"\n    collapsed: bool | None = None\n    \"\"\"Collapse card body after the main action has completed.\"\"\"\n    confirm: CardAction | None = None\n    \"\"\"Confirmation action button shown in the card footer.\"\"\"\n    cancel: CardAction | None = None\n    \"\"\"Cancel action button shown in the card footer.\"\"\"\n    theme: Literal[\"light\", \"dark\"] | None = None\n    \"\"\"Force light or dark theme for this subtree.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.asForm","title":"asForm  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asForm: bool | None = None\n</code></pre> <p>Treat the card as an HTML form so confirm/cancel capture form data.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.children","title":"children  <code>instance-attribute</code>","text":"<pre><code>children: list['WidgetComponent']\n</code></pre> <p>Child components rendered inside the card.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background: str | ThemeColor | None = None\n</code></pre> <p>Background color; accepts background color token, a primitive color token, a CSS string, or theme-aware <code>{ light, dark }</code>.</p> <p>Valid tokens: <code>surface</code> <code>surface-secondary</code> <code>surface-tertiary</code> <code>surface-elevated</code> <code>surface-elevated-secondary</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: Literal['sm', 'md', 'lg', 'full'] | None = None\n</code></pre> <p>Visual size of the card; accepts a size token. No preset default is documented.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.padding","title":"padding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>padding: float | str | Spacing | None = None\n</code></pre> <p>Inner spacing of the card; spacing unit, CSS string, or padding object.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: WidgetStatus | None = None\n</code></pre> <p>Optional status header displayed above the card.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.collapsed","title":"collapsed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>collapsed: bool | None = None\n</code></pre> <p>Collapse card body after the main action has completed.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.confirm","title":"confirm  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>confirm: CardAction | None = None\n</code></pre> <p>Confirmation action button shown in the card footer.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.cancel","title":"cancel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cancel: CardAction | None = None\n</code></pre> <p>Cancel action button shown in the card footer.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Card.theme","title":"theme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theme: Literal['light', 'dark'] | None = None\n</code></pre> <p>Force light or dark theme for this subtree.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Markdown","title":"Markdown","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Widget rendering Markdown content, optionally streamed.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Markdown(WidgetComponentBase):\n    \"\"\"Widget rendering Markdown content, optionally streamed.\"\"\"\n\n    type: Literal[\"Markdown\"] = Field(default=\"Markdown\", frozen=True)  # pyright: ignore\n    value: str\n    \"\"\"Markdown source string to render.\"\"\"\n    streaming: bool | None = None\n    \"\"\"Applies streaming-friendly transitions for incremental updates.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Markdown.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Markdown source string to render.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Markdown.streaming","title":"streaming  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>streaming: bool | None = None\n</code></pre> <p>Applies streaming-friendly transitions for incremental updates.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text","title":"Text","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Widget rendering plain text with typography controls.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Text(WidgetComponentBase):\n    \"\"\"Widget rendering plain text with typography controls.\"\"\"\n\n    type: Literal[\"Text\"] = Field(default=\"Text\", frozen=True)  # pyright: ignore\n    value: str\n    \"\"\"Text content to display.\"\"\"\n    streaming: bool | None = None\n    \"\"\"Enables streaming-friendly transitions for incremental updates.\"\"\"\n    italic: bool | None = None\n    \"\"\"Render text in italic style.\"\"\"\n    lineThrough: bool | None = None\n    \"\"\"Render text with a line-through decoration.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware `{ light, dark }`.\n\n    Text color tokens: `prose` `primary` `emphasis` `secondary` `tertiary` `success` `warning` `danger`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    weight: Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None = None\n    \"\"\"Font weight; accepts a font weight token.\"\"\"\n    width: float | str | None = None\n    \"\"\"Constrain the text container width; px or CSS string.\"\"\"\n    size: TextSize | None = None\n    \"\"\"Size of the text; accepts a text size token.\"\"\"\n    textAlign: TextAlign | None = None\n    \"\"\"Horizontal text alignment.\"\"\"\n    truncate: bool | None = None\n    \"\"\"Truncate overflow with ellipsis.\"\"\"\n    minLines: int | None = None\n    \"\"\"Reserve space for a minimum number of lines.\"\"\"\n    maxLines: int | None = None\n    \"\"\"Limit text to a maximum number of lines (line clamp).\"\"\"\n    editable: Literal[False] | EditableProps | None = None\n    \"\"\"Enable inline editing for this text node.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Text content to display.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.streaming","title":"streaming  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>streaming: bool | None = None\n</code></pre> <p>Enables streaming-friendly transitions for incremental updates.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.italic","title":"italic  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>italic: bool | None = None\n</code></pre> <p>Render text in italic style.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.lineThrough","title":"lineThrough  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lineThrough: bool | None = None\n</code></pre> <p>Render text with a line-through decoration.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware <code>{ light, dark }</code>.</p> <p>Text color tokens: <code>prose</code> <code>primary</code> <code>emphasis</code> <code>secondary</code> <code>tertiary</code> <code>success</code> <code>warning</code> <code>danger</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.weight","title":"weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>weight: (\n    Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None\n) = None\n</code></pre> <p>Font weight; accepts a font weight token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: float | str | None = None\n</code></pre> <p>Constrain the text container width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: TextSize | None = None\n</code></pre> <p>Size of the text; accepts a text size token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.textAlign","title":"textAlign  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>textAlign: TextAlign | None = None\n</code></pre> <p>Horizontal text alignment.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.truncate","title":"truncate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>truncate: bool | None = None\n</code></pre> <p>Truncate overflow with ellipsis.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.minLines","title":"minLines  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minLines: int | None = None\n</code></pre> <p>Reserve space for a minimum number of lines.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.maxLines","title":"maxLines  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLines: int | None = None\n</code></pre> <p>Limit text to a maximum number of lines (line clamp).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Text.editable","title":"editable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>editable: Literal[False] | EditableProps | None = None\n</code></pre> <p>Enable inline editing for this text node.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title","title":"Title","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Widget rendering prominent headline text.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Title(WidgetComponentBase):\n    \"\"\"Widget rendering prominent headline text.\"\"\"\n\n    type: Literal[\"Title\"] = Field(default=\"Title\", frozen=True)  # pyright: ignore\n    value: str\n    \"\"\"Text content to display.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware `{ light, dark }`.\n\n    Text color tokens: `prose` `primary` `emphasis` `secondary` `tertiary` `success` `warning` `danger`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    weight: Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None = None\n    \"\"\"Font weight; accepts a font weight token.\"\"\"\n    size: TitleSize | None = None\n    \"\"\"Size of the title text; accepts a title size token.\"\"\"\n    textAlign: TextAlign | None = None\n    \"\"\"Horizontal text alignment.\"\"\"\n    truncate: bool | None = None\n    \"\"\"Truncate overflow with ellipsis.\"\"\"\n    maxLines: int | None = None\n    \"\"\"Limit text to a maximum number of lines (line clamp).\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Text content to display.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware <code>{ light, dark }</code>.</p> <p>Text color tokens: <code>prose</code> <code>primary</code> <code>emphasis</code> <code>secondary</code> <code>tertiary</code> <code>success</code> <code>warning</code> <code>danger</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title.weight","title":"weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>weight: (\n    Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None\n) = None\n</code></pre> <p>Font weight; accepts a font weight token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: TitleSize | None = None\n</code></pre> <p>Size of the title text; accepts a title size token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title.textAlign","title":"textAlign  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>textAlign: TextAlign | None = None\n</code></pre> <p>Horizontal text alignment.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title.truncate","title":"truncate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>truncate: bool | None = None\n</code></pre> <p>Truncate overflow with ellipsis.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Title.maxLines","title":"maxLines  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLines: int | None = None\n</code></pre> <p>Limit text to a maximum number of lines (line clamp).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption","title":"Caption","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Widget rendering supporting caption text.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Caption(WidgetComponentBase):\n    \"\"\"Widget rendering supporting caption text.\"\"\"\n\n    type: Literal[\"Caption\"] = Field(default=\"Caption\", frozen=True)  # pyright: ignore\n    value: str\n    \"\"\"Text content to display.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware `{ light, dark }`.\n\n    Text color tokens: `prose` `primary` `emphasis` `secondary` `tertiary` `success` `warning` `danger`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    weight: Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None = None\n    \"\"\"Font weight; accepts a font weight token.\"\"\"\n    size: CaptionSize | None = None\n    \"\"\"Size of the caption text; accepts a caption size token.\"\"\"\n    textAlign: TextAlign | None = None\n    \"\"\"Horizontal text alignment.\"\"\"\n    truncate: bool | None = None\n    \"\"\"Truncate overflow with ellipsis.\"\"\"\n    maxLines: int | None = None\n    \"\"\"Limit text to a maximum number of lines (line clamp).\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Text content to display.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware <code>{ light, dark }</code>.</p> <p>Text color tokens: <code>prose</code> <code>primary</code> <code>emphasis</code> <code>secondary</code> <code>tertiary</code> <code>success</code> <code>warning</code> <code>danger</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption.weight","title":"weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>weight: (\n    Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None\n) = None\n</code></pre> <p>Font weight; accepts a font weight token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: CaptionSize | None = None\n</code></pre> <p>Size of the caption text; accepts a caption size token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption.textAlign","title":"textAlign  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>textAlign: TextAlign | None = None\n</code></pre> <p>Horizontal text alignment.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption.truncate","title":"truncate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>truncate: bool | None = None\n</code></pre> <p>Truncate overflow with ellipsis.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Caption.maxLines","title":"maxLines  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLines: int | None = None\n</code></pre> <p>Limit text to a maximum number of lines (line clamp).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Badge","title":"Badge","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Small badge indicating status or categorization.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Badge(WidgetComponentBase):\n    \"\"\"Small badge indicating status or categorization.\"\"\"\n\n    type: Literal[\"Badge\"] = Field(default=\"Badge\", frozen=True)  # pyright: ignore\n    label: str\n    \"\"\"Text to display inside the badge.\"\"\"\n    color: (\n        Literal[\"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"discovery\"] | None\n    ) = None\n    \"\"\"Color of the badge; accepts a badge color token.\"\"\"\n    variant: Literal[\"solid\", \"soft\", \"outline\"] | None = None\n    \"\"\"Visual style of the badge.\"\"\"\n    size: Literal[\"sm\", \"md\", \"lg\"] | None = None\n    \"\"\"Size of the badge.\"\"\"\n    pill: bool | None = None\n    \"\"\"Determines if the badge should be fully rounded (pill).\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Badge.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str\n</code></pre> <p>Text to display inside the badge.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Badge.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: (\n    Literal[\n        \"secondary\",\n        \"success\",\n        \"danger\",\n        \"warning\",\n        \"info\",\n        \"discovery\",\n    ]\n    | None\n) = None\n</code></pre> <p>Color of the badge; accepts a badge color token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Badge.variant","title":"variant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variant: Literal['solid', 'soft', 'outline'] | None = None\n</code></pre> <p>Visual style of the badge.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Badge.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: Literal['sm', 'md', 'lg'] | None = None\n</code></pre> <p>Size of the badge.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Badge.pill","title":"pill  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pill: bool | None = None\n</code></pre> <p>Determines if the badge should be fully rounded (pill).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase","title":"BoxBase","text":"<p>               Bases: <code>BaseModel</code></p> <p>Shared layout props for flexible container widgets.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class BoxBase(BaseModel):\n    \"\"\"Shared layout props for flexible container widgets.\"\"\"\n\n    children: list[\"WidgetComponent\"] | None = None\n    \"\"\"Child components to render inside the container.\"\"\"\n    align: Alignment | None = None\n    \"\"\"Cross-axis alignment of children.\"\"\"\n    justify: Justification | None = None\n    \"\"\"Main-axis distribution of children.\"\"\"\n    wrap: Literal[\"nowrap\", \"wrap\", \"wrap-reverse\"] | None = None\n    \"\"\"Wrap behavior for flex items.\"\"\"\n    flex: int | str | None = None\n    \"\"\"Flex growth/shrink factor.\"\"\"\n    gap: int | str | None = None\n    \"\"\"Gap between direct children; spacing unit or CSS string.\"\"\"\n    height: float | str | None = None\n    \"\"\"Explicit height; px or CSS string.\"\"\"\n    width: float | str | None = None\n    \"\"\"Explicit width; px or CSS string.\"\"\"\n    size: float | str | None = None\n    \"\"\"Shorthand to set both width and height; px or CSS string.\"\"\"\n    minHeight: int | str | None = None\n    \"\"\"Minimum height; px or CSS string.\"\"\"\n    minWidth: int | str | None = None\n    \"\"\"Minimum width; px or CSS string.\"\"\"\n    minSize: int | str | None = None\n    \"\"\"Shorthand to set both minWidth and minHeight; px or CSS string.\"\"\"\n    maxHeight: int | str | None = None\n    \"\"\"Maximum height; px or CSS string.\"\"\"\n    maxWidth: int | str | None = None\n    \"\"\"Maximum width; px or CSS string.\"\"\"\n    maxSize: int | str | None = None\n    \"\"\"Shorthand to set both maxWidth and maxHeight; px or CSS string.\"\"\"\n    padding: float | str | Spacing | None = None\n    \"\"\"Inner padding; spacing unit, CSS string, or padding object.\"\"\"\n    margin: float | str | Spacing | None = None\n    \"\"\"Outer margin; spacing unit, CSS string, or margin object.\"\"\"\n    border: int | Border | Borders | None = None\n    \"\"\"Border applied to the container; px or border object/shorthand.\"\"\"\n    radius: RadiusValue | None = None\n    \"\"\"Border radius; accepts a radius token.\"\"\"\n    background: str | ThemeColor | None = None\n    \"\"\"Background color; accepts background color token, a primitive color token, a CSS string, or theme-aware `{ light, dark }`.\n\n    Valid tokens: `surface` `surface-secondary` `surface-tertiary` `surface-elevated` `surface-elevated-secondary`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    aspectRatio: float | str | None = None\n    \"\"\"Aspect ratio of the box (e.g., 16/9); number or CSS string.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.children","title":"children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>children: list['WidgetComponent'] | None = None\n</code></pre> <p>Child components to render inside the container.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.align","title":"align  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>align: Alignment | None = None\n</code></pre> <p>Cross-axis alignment of children.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.justify","title":"justify  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>justify: Justification | None = None\n</code></pre> <p>Main-axis distribution of children.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.wrap","title":"wrap  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wrap: Literal[\"nowrap\", \"wrap\", \"wrap-reverse\"] | None = (\n    None\n)\n</code></pre> <p>Wrap behavior for flex items.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.flex","title":"flex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flex: int | str | None = None\n</code></pre> <p>Flex growth/shrink factor.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.gap","title":"gap  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gap: int | str | None = None\n</code></pre> <p>Gap between direct children; spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: float | str | None = None\n</code></pre> <p>Explicit height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: float | str | None = None\n</code></pre> <p>Explicit width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: float | str | None = None\n</code></pre> <p>Shorthand to set both width and height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.minHeight","title":"minHeight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minHeight: int | str | None = None\n</code></pre> <p>Minimum height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.minWidth","title":"minWidth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minWidth: int | str | None = None\n</code></pre> <p>Minimum width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.minSize","title":"minSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minSize: int | str | None = None\n</code></pre> <p>Shorthand to set both minWidth and minHeight; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.maxHeight","title":"maxHeight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxHeight: int | str | None = None\n</code></pre> <p>Maximum height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.maxWidth","title":"maxWidth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxWidth: int | str | None = None\n</code></pre> <p>Maximum width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.maxSize","title":"maxSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxSize: int | str | None = None\n</code></pre> <p>Shorthand to set both maxWidth and maxHeight; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.padding","title":"padding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>padding: float | str | Spacing | None = None\n</code></pre> <p>Inner padding; spacing unit, CSS string, or padding object.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.margin","title":"margin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>margin: float | str | Spacing | None = None\n</code></pre> <p>Outer margin; spacing unit, CSS string, or margin object.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.border","title":"border  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>border: int | Border | Borders | None = None\n</code></pre> <p>Border applied to the container; px or border object/shorthand.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.radius","title":"radius  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>radius: RadiusValue | None = None\n</code></pre> <p>Border radius; accepts a radius token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background: str | ThemeColor | None = None\n</code></pre> <p>Background color; accepts background color token, a primitive color token, a CSS string, or theme-aware <code>{ light, dark }</code>.</p> <p>Valid tokens: <code>surface</code> <code>surface-secondary</code> <code>surface-tertiary</code> <code>surface-elevated</code> <code>surface-elevated-secondary</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BoxBase.aspectRatio","title":"aspectRatio  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aspectRatio: float | str | None = None\n</code></pre> <p>Aspect ratio of the box (e.g., 16/9); number or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Box","title":"Box","text":"<p>               Bases: <code>WidgetComponentBase</code>, <code>BoxBase</code></p> <p>Generic flex container with direction control.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Box(WidgetComponentBase, BoxBase):\n    \"\"\"Generic flex container with direction control.\"\"\"\n\n    type: Literal[\"Box\"] = Field(default=\"Box\", frozen=True)  # pyright: ignore\n    direction: Literal[\"row\", \"col\"] | None = None\n    \"\"\"Flex direction for content within this container.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Box.direction","title":"direction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>direction: Literal['row', 'col'] | None = None\n</code></pre> <p>Flex direction for content within this container.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Row","title":"Row","text":"<p>               Bases: <code>WidgetComponentBase</code>, <code>BoxBase</code></p> <p>Horizontal flex container.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Row(WidgetComponentBase, BoxBase):\n    \"\"\"Horizontal flex container.\"\"\"\n\n    type: Literal[\"Row\"] = Field(default=\"Row\", frozen=True)  # pyright: ignore\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Col","title":"Col","text":"<p>               Bases: <code>WidgetComponentBase</code>, <code>BoxBase</code></p> <p>Vertical flex container.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Col(WidgetComponentBase, BoxBase):\n    \"\"\"Vertical flex container.\"\"\"\n\n    type: Literal[\"Col\"] = Field(default=\"Col\", frozen=True)  # pyright: ignore\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Form","title":"Form","text":"<p>               Bases: <code>WidgetComponentBase</code>, <code>BoxBase</code></p> <p>Form wrapper capable of submitting <code>onSubmitAction</code>.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Form(WidgetComponentBase, BoxBase):\n    \"\"\"Form wrapper capable of submitting ``onSubmitAction``.\"\"\"\n\n    type: Literal[\"Form\"] = Field(default=\"Form\", frozen=True)  # pyright: ignore\n    onSubmitAction: ActionConfig | None = None\n    \"\"\"Action dispatched when the form is submitted.\"\"\"\n    direction: Literal[\"row\", \"col\"] | None = None\n    \"\"\"Flex direction for laying out form children.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Form.onSubmitAction","title":"onSubmitAction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>onSubmitAction: ActionConfig | None = None\n</code></pre> <p>Action dispatched when the form is submitted.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Form.direction","title":"direction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>direction: Literal['row', 'col'] | None = None\n</code></pre> <p>Flex direction for laying out form children.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Divider","title":"Divider","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Visual divider separating content sections.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Divider(WidgetComponentBase):\n    \"\"\"Visual divider separating content sections.\"\"\"\n\n    type: Literal[\"Divider\"] = Field(default=\"Divider\", frozen=True)  # pyright: ignore\n    color: str | ThemeColor | None = None\n    \"\"\"Divider color; accepts border color token, a primitive color token, a CSS string, or theme-aware `{ light, dark }`.\n\n    Valid tokens: `default` `subtle` `strong`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    size: int | str | None = None\n    \"\"\"Thickness of the divider line; px or CSS string.\"\"\"\n    spacing: int | str | None = None\n    \"\"\"Outer spacing above and below the divider; spacing unit or CSS string.\"\"\"\n    flush: bool | None = None\n    \"\"\"Flush the divider to the container edge, removing surrounding padding.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Divider.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Divider color; accepts border color token, a primitive color token, a CSS string, or theme-aware <code>{ light, dark }</code>.</p> <p>Valid tokens: <code>default</code> <code>subtle</code> <code>strong</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Divider.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: int | str | None = None\n</code></pre> <p>Thickness of the divider line; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Divider.spacing","title":"spacing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>spacing: int | str | None = None\n</code></pre> <p>Outer spacing above and below the divider; spacing unit or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Divider.flush","title":"flush  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flush: bool | None = None\n</code></pre> <p>Flush the divider to the container edge, removing surrounding padding.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Icon","title":"Icon","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Icon component referencing a built-in icon name.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Icon(WidgetComponentBase):\n    \"\"\"Icon component referencing a built-in icon name.\"\"\"\n\n    type: Literal[\"Icon\"] = Field(default=\"Icon\", frozen=True)  # pyright: ignore\n    name: WidgetIcon\n    \"\"\"Name of the icon to display.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Icon color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware `{ light, dark }`.\n\n    Text color tokens: `prose` `primary` `emphasis` `secondary` `tertiary` `success` `warning` `danger`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    size: IconSize | None = None\n    \"\"\"Size of the icon; accepts an icon size token.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Icon.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: WidgetIcon\n</code></pre> <p>Name of the icon to display.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Icon.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Icon color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware <code>{ light, dark }</code>.</p> <p>Text color tokens: <code>prose</code> <code>primary</code> <code>emphasis</code> <code>secondary</code> <code>tertiary</code> <code>success</code> <code>warning</code> <code>danger</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Icon.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: IconSize | None = None\n</code></pre> <p>Size of the icon; accepts an icon size token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image","title":"Image","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Image component with sizing and fitting controls.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Image(WidgetComponentBase):\n    \"\"\"Image component with sizing and fitting controls.\"\"\"\n\n    type: Literal[\"Image\"] = Field(default=\"Image\", frozen=True)  # pyright: ignore\n    src: str\n    \"\"\"Image URL source.\"\"\"\n    alt: str | None = None\n    \"\"\"Alternate text for accessibility.\"\"\"\n    fit: Literal[\"cover\", \"contain\", \"fill\", \"scale-down\", \"none\"] | None = None\n    \"\"\"How the image should fit within the container.\"\"\"\n    position: (\n        Literal[\n            \"top left\",\n            \"top\",\n            \"top right\",\n            \"left\",\n            \"center\",\n            \"right\",\n            \"bottom left\",\n            \"bottom\",\n            \"bottom right\",\n        ]\n        | None\n    ) = None\n    \"\"\"Focal position of the image within the container.\"\"\"\n    radius: RadiusValue | None = None\n    \"\"\"Border radius; accepts a radius token.\"\"\"\n    frame: bool | None = None\n    \"\"\"Draw a subtle frame around the image.\"\"\"\n    flush: bool | None = None\n    \"\"\"Flush the image to the container edge, removing surrounding padding.\"\"\"\n    height: int | str | None = None\n    \"\"\"Explicit height; px or CSS string.\"\"\"\n    width: int | str | None = None\n    \"\"\"Explicit width; px or CSS string.\"\"\"\n    size: int | str | None = None\n    \"\"\"Shorthand to set both width and height; px or CSS string.\"\"\"\n    minHeight: int | str | None = None\n    \"\"\"Minimum height; px or CSS string.\"\"\"\n    minWidth: int | str | None = None\n    \"\"\"Minimum width; px or CSS string.\"\"\"\n    minSize: int | str | None = None\n    \"\"\"Shorthand to set both minWidth and minHeight; px or CSS string.\"\"\"\n    maxHeight: int | str | None = None\n    \"\"\"Maximum height; px or CSS string.\"\"\"\n    maxWidth: int | str | None = None\n    \"\"\"Maximum width; px or CSS string.\"\"\"\n    maxSize: int | str | None = None\n    \"\"\"Shorthand to set both maxWidth and maxHeight; px or CSS string.\"\"\"\n    margin: int | str | Spacing | None = None\n    \"\"\"Outer margin; spacing unit, CSS string, or margin object.\"\"\"\n    background: str | ThemeColor | None = None\n    \"\"\"Background color; accepts background color token, a primitive color token, a CSS string, or theme-aware `{ light, dark }`.\n\n    Valid tokens: `surface` `surface-secondary` `surface-tertiary` `surface-elevated` `surface-elevated-secondary`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n    aspectRatio: float | str | None = None\n    \"\"\"Aspect ratio of the box (e.g., 16/9); number or CSS string.\"\"\"\n    flex: int | str | None = None\n    \"\"\"Flex growth/shrink factor.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.src","title":"src  <code>instance-attribute</code>","text":"<pre><code>src: str\n</code></pre> <p>Image URL source.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.alt","title":"alt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alt: str | None = None\n</code></pre> <p>Alternate text for accessibility.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.fit","title":"fit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fit: (\n    Literal[\n        \"cover\", \"contain\", \"fill\", \"scale-down\", \"none\"\n    ]\n    | None\n) = None\n</code></pre> <p>How the image should fit within the container.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.position","title":"position  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position: (\n    Literal[\n        \"top left\",\n        \"top\",\n        \"top right\",\n        \"left\",\n        \"center\",\n        \"right\",\n        \"bottom left\",\n        \"bottom\",\n        \"bottom right\",\n    ]\n    | None\n) = None\n</code></pre> <p>Focal position of the image within the container.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.radius","title":"radius  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>radius: RadiusValue | None = None\n</code></pre> <p>Border radius; accepts a radius token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.frame","title":"frame  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frame: bool | None = None\n</code></pre> <p>Draw a subtle frame around the image.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.flush","title":"flush  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flush: bool | None = None\n</code></pre> <p>Flush the image to the container edge, removing surrounding padding.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: int | str | None = None\n</code></pre> <p>Explicit height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: int | str | None = None\n</code></pre> <p>Explicit width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: int | str | None = None\n</code></pre> <p>Shorthand to set both width and height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.minHeight","title":"minHeight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minHeight: int | str | None = None\n</code></pre> <p>Minimum height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.minWidth","title":"minWidth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minWidth: int | str | None = None\n</code></pre> <p>Minimum width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.minSize","title":"minSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minSize: int | str | None = None\n</code></pre> <p>Shorthand to set both minWidth and minHeight; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.maxHeight","title":"maxHeight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxHeight: int | str | None = None\n</code></pre> <p>Maximum height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.maxWidth","title":"maxWidth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxWidth: int | str | None = None\n</code></pre> <p>Maximum width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.maxSize","title":"maxSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxSize: int | str | None = None\n</code></pre> <p>Shorthand to set both maxWidth and maxHeight; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.margin","title":"margin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>margin: int | str | Spacing | None = None\n</code></pre> <p>Outer margin; spacing unit, CSS string, or margin object.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background: str | ThemeColor | None = None\n</code></pre> <p>Background color; accepts background color token, a primitive color token, a CSS string, or theme-aware <code>{ light, dark }</code>.</p> <p>Valid tokens: <code>surface</code> <code>surface-secondary</code> <code>surface-tertiary</code> <code>surface-elevated</code> <code>surface-elevated-secondary</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.aspectRatio","title":"aspectRatio  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aspectRatio: float | str | None = None\n</code></pre> <p>Aspect ratio of the box (e.g., 16/9); number or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Image.flex","title":"flex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flex: int | str | None = None\n</code></pre> <p>Flex growth/shrink factor.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button","title":"Button","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Button component optionally wired to an action.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Button(WidgetComponentBase):\n    \"\"\"Button component optionally wired to an action.\"\"\"\n\n    type: Literal[\"Button\"] = Field(default=\"Button\", frozen=True)  # pyright: ignore\n    submit: bool | None = None\n    \"\"\"Configure the button as a submit button for the nearest form.\"\"\"\n    label: str | None = None\n    \"\"\"Text to display inside the button.\"\"\"\n    onClickAction: ActionConfig | None = None\n    \"\"\"Action dispatched on click.\"\"\"\n    iconStart: WidgetIcon | None = None\n    \"\"\"Icon shown before the label; can be used for icon-only buttons.\"\"\"\n    iconEnd: WidgetIcon | None = None\n    \"\"\"Optional icon shown after the label.\"\"\"\n    style: Literal[\"primary\", \"secondary\"] | None = None\n    \"\"\"Convenience preset for button style.\"\"\"\n    iconSize: Literal[\"sm\", \"md\", \"lg\", \"xl\", \"2xl\"] | None = None\n    \"\"\"Controls the size of icons within the button; accepts an icon size token.\"\"\"\n    color: (\n        Literal[\n            \"primary\",\n            \"secondary\",\n            \"info\",\n            \"discovery\",\n            \"success\",\n            \"caution\",\n            \"warning\",\n            \"danger\",\n        ]\n        | None\n    ) = None\n    \"\"\"Color of the button; accepts a button color token.\"\"\"\n    variant: ControlVariant | None = None\n    \"\"\"Visual variant of the button; accepts a control variant token.\"\"\"\n    size: ControlSize | None = None\n    \"\"\"Controls the overall size of the button.\"\"\"\n    pill: bool | None = None\n    \"\"\"Determines if the button should be fully rounded (pill).\"\"\"\n    uniform: bool | None = None\n    \"\"\"Determines if the button should have matching width and height.\"\"\"\n    block: bool | None = None\n    \"\"\"Extend the button to 100% of the available width.\"\"\"\n    disabled: bool | None = None\n    \"\"\"Disable interactions and apply disabled styles.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.submit","title":"submit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>submit: bool | None = None\n</code></pre> <p>Configure the button as a submit button for the nearest form.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.label","title":"label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>label: str | None = None\n</code></pre> <p>Text to display inside the button.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.onClickAction","title":"onClickAction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>onClickAction: ActionConfig | None = None\n</code></pre> <p>Action dispatched on click.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.iconStart","title":"iconStart  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>iconStart: WidgetIcon | None = None\n</code></pre> <p>Icon shown before the label; can be used for icon-only buttons.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.iconEnd","title":"iconEnd  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>iconEnd: WidgetIcon | None = None\n</code></pre> <p>Optional icon shown after the label.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style: Literal['primary', 'secondary'] | None = None\n</code></pre> <p>Convenience preset for button style.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.iconSize","title":"iconSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>iconSize: Literal[\"sm\", \"md\", \"lg\", \"xl\", \"2xl\"] | None = (\n    None\n)\n</code></pre> <p>Controls the size of icons within the button; accepts an icon size token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: (\n    Literal[\n        \"primary\",\n        \"secondary\",\n        \"info\",\n        \"discovery\",\n        \"success\",\n        \"caution\",\n        \"warning\",\n        \"danger\",\n    ]\n    | None\n) = None\n</code></pre> <p>Color of the button; accepts a button color token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.variant","title":"variant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variant: ControlVariant | None = None\n</code></pre> <p>Visual variant of the button; accepts a control variant token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: ControlSize | None = None\n</code></pre> <p>Controls the overall size of the button.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.pill","title":"pill  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pill: bool | None = None\n</code></pre> <p>Determines if the button should be fully rounded (pill).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.uniform","title":"uniform  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uniform: bool | None = None\n</code></pre> <p>Determines if the button should have matching width and height.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.block","title":"block  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block: bool | None = None\n</code></pre> <p>Extend the button to 100% of the available width.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Button.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool | None = None\n</code></pre> <p>Disable interactions and apply disabled styles.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacer","title":"Spacer","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Flexible spacer used to push content apart.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Spacer(WidgetComponentBase):\n    \"\"\"Flexible spacer used to push content apart.\"\"\"\n\n    type: Literal[\"Spacer\"] = Field(default=\"Spacer\", frozen=True)  # pyright: ignore\n    minSize: int | str | None = None\n    \"\"\"Minimum size the spacer should occupy along the flex direction.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Spacer.minSize","title":"minSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minSize: int | str | None = None\n</code></pre> <p>Minimum size the spacer should occupy along the flex direction.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.SelectOption","title":"SelectOption","text":"<p>               Bases: <code>TypedDict</code></p> <p>Selectable option used by the <code>Select</code> widget.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class SelectOption(TypedDict):\n    \"\"\"Selectable option used by the ``Select`` widget.\"\"\"\n\n    value: str\n    \"\"\"Option value submitted with the form.\"\"\"\n    label: str\n    \"\"\"Human-readable label for the option.\"\"\"\n    disabled: NotRequired[bool]\n    \"\"\"Disable the option.\"\"\"\n    description: NotRequired[str]\n    \"\"\"Displayed as secondary text below the option `label`.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.SelectOption.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Option value submitted with the form.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.SelectOption.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str\n</code></pre> <p>Human-readable label for the option.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.SelectOption.disabled","title":"disabled  <code>instance-attribute</code>","text":"<pre><code>disabled: NotRequired[bool]\n</code></pre> <p>Disable the option.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.SelectOption.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: NotRequired[str]\n</code></pre> <p>Displayed as secondary text below the option <code>label</code>.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select","title":"Select","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Select dropdown component.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Select(WidgetComponentBase):\n    \"\"\"Select dropdown component.\"\"\"\n\n    type: Literal[\"Select\"] = Field(default=\"Select\", frozen=True)  # pyright: ignore\n    name: str\n    \"\"\"The name of the form control field used when submitting forms.\"\"\"\n    options: list[SelectOption]\n    \"\"\"List of selectable options.\"\"\"\n    onChangeAction: ActionConfig | None = None\n    \"\"\"Action dispatched when the value changes.\"\"\"\n    placeholder: str | None = None\n    \"\"\"Placeholder text shown when no value is selected.\"\"\"\n    defaultValue: str | None = None\n    \"\"\"Initial value of the select.\"\"\"\n    variant: ControlVariant | None = None\n    \"\"\"Visual style of the select; accepts a control variant token.\"\"\"\n    size: ControlSize | None = None\n    \"\"\"Controls the size of the select control.\"\"\"\n    pill: bool | None = None\n    \"\"\"Determines if the select should be fully rounded (pill).\"\"\"\n    block: bool | None = None\n    \"\"\"Extend the select to 100% of the available width.\"\"\"\n    clearable: bool | None = None\n    \"\"\"Show a clear control to unset the value.\"\"\"\n    disabled: bool | None = None\n    \"\"\"Disable interactions and apply disabled styles.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the form control field used when submitting forms.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.options","title":"options  <code>instance-attribute</code>","text":"<pre><code>options: list[SelectOption]\n</code></pre> <p>List of selectable options.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.onChangeAction","title":"onChangeAction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>onChangeAction: ActionConfig | None = None\n</code></pre> <p>Action dispatched when the value changes.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.placeholder","title":"placeholder  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>placeholder: str | None = None\n</code></pre> <p>Placeholder text shown when no value is selected.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.defaultValue","title":"defaultValue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defaultValue: str | None = None\n</code></pre> <p>Initial value of the select.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.variant","title":"variant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variant: ControlVariant | None = None\n</code></pre> <p>Visual style of the select; accepts a control variant token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: ControlSize | None = None\n</code></pre> <p>Controls the size of the select control.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.pill","title":"pill  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pill: bool | None = None\n</code></pre> <p>Determines if the select should be fully rounded (pill).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.block","title":"block  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block: bool | None = None\n</code></pre> <p>Extend the select to 100% of the available width.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.clearable","title":"clearable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clearable: bool | None = None\n</code></pre> <p>Show a clear control to unset the value.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Select.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool | None = None\n</code></pre> <p>Disable interactions and apply disabled styles.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker","title":"DatePicker","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Date picker input component.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class DatePicker(WidgetComponentBase):\n    \"\"\"Date picker input component.\"\"\"\n\n    type: Literal[\"DatePicker\"] = Field(default=\"DatePicker\", frozen=True)  # pyright: ignore\n    name: str\n    \"\"\"The name of the form control field used when submitting forms.\"\"\"\n    onChangeAction: ActionConfig | None = None\n    \"\"\"Action dispatched when the date value changes.\"\"\"\n    placeholder: str | None = None\n    \"\"\"Placeholder text shown when no date is selected.\"\"\"\n    defaultValue: datetime | None = None\n    \"\"\"Initial value of the date picker.\"\"\"\n    min: datetime | None = None\n    \"\"\"Earliest selectable date (inclusive).\"\"\"\n    max: datetime | None = None\n    \"\"\"Latest selectable date (inclusive).\"\"\"\n    variant: ControlVariant | None = None\n    \"\"\"Visual variant of the datepicker control.\"\"\"\n    size: ControlSize | None = None\n    \"\"\"Controls the size of the datepicker control.\"\"\"\n    side: Literal[\"top\", \"bottom\", \"left\", \"right\"] | None = None\n    \"\"\"Preferred side to render the calendar.\"\"\"\n    align: Literal[\"start\", \"center\", \"end\"] | None = None\n    \"\"\"Preferred alignment of the calendar relative to the control.\"\"\"\n    pill: bool | None = None\n    \"\"\"Determines if the datepicker should be fully rounded (pill).\"\"\"\n    block: bool | None = None\n    \"\"\"Extend the datepicker to 100% of the available width.\"\"\"\n    clearable: bool | None = None\n    \"\"\"Show a clear control to unset the value.\"\"\"\n    disabled: bool | None = None\n    \"\"\"Disable interactions and apply disabled styles.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the form control field used when submitting forms.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.onChangeAction","title":"onChangeAction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>onChangeAction: ActionConfig | None = None\n</code></pre> <p>Action dispatched when the date value changes.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.placeholder","title":"placeholder  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>placeholder: str | None = None\n</code></pre> <p>Placeholder text shown when no date is selected.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.defaultValue","title":"defaultValue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defaultValue: datetime | None = None\n</code></pre> <p>Initial value of the date picker.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.min","title":"min  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min: datetime | None = None\n</code></pre> <p>Earliest selectable date (inclusive).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.max","title":"max  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max: datetime | None = None\n</code></pre> <p>Latest selectable date (inclusive).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.variant","title":"variant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variant: ControlVariant | None = None\n</code></pre> <p>Visual variant of the datepicker control.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: ControlSize | None = None\n</code></pre> <p>Controls the size of the datepicker control.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.side","title":"side  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>side: Literal[\"top\", \"bottom\", \"left\", \"right\"] | None = (\n    None\n)\n</code></pre> <p>Preferred side to render the calendar.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.align","title":"align  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>align: Literal['start', 'center', 'end'] | None = None\n</code></pre> <p>Preferred alignment of the calendar relative to the control.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.pill","title":"pill  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pill: bool | None = None\n</code></pre> <p>Determines if the datepicker should be fully rounded (pill).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.block","title":"block  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block: bool | None = None\n</code></pre> <p>Extend the datepicker to 100% of the available width.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.clearable","title":"clearable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clearable: bool | None = None\n</code></pre> <p>Show a clear control to unset the value.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.DatePicker.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool | None = None\n</code></pre> <p>Disable interactions and apply disabled styles.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Checkbox","title":"Checkbox","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Checkbox input component.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Checkbox(WidgetComponentBase):\n    \"\"\"Checkbox input component.\"\"\"\n\n    type: Literal[\"Checkbox\"] = Field(default=\"Checkbox\", frozen=True)  # pyright: ignore\n    name: str\n    \"\"\"The name of the form control field used when submitting forms.\"\"\"\n    label: str | None = None\n    \"\"\"Optional label text rendered next to the checkbox.\"\"\"\n    defaultChecked: str | None = None\n    \"\"\"The initial checked state of the checkbox.\"\"\"\n    onChangeAction: ActionConfig | None = None\n    \"\"\"Action dispatched when the checked state changes.\"\"\"\n    disabled: bool | None = None\n    \"\"\"Disable interactions and apply disabled styles.\"\"\"\n    required: bool | None = None\n    \"\"\"Mark the checkbox as required for form submission.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Checkbox.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the form control field used when submitting forms.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Checkbox.label","title":"label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>label: str | None = None\n</code></pre> <p>Optional label text rendered next to the checkbox.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Checkbox.defaultChecked","title":"defaultChecked  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defaultChecked: str | None = None\n</code></pre> <p>The initial checked state of the checkbox.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Checkbox.onChangeAction","title":"onChangeAction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>onChangeAction: ActionConfig | None = None\n</code></pre> <p>Action dispatched when the checked state changes.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Checkbox.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool | None = None\n</code></pre> <p>Disable interactions and apply disabled styles.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Checkbox.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool | None = None\n</code></pre> <p>Mark the checkbox as required for form submission.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input","title":"Input","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Single-line text input component.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Input(WidgetComponentBase):\n    \"\"\"Single-line text input component.\"\"\"\n\n    type: Literal[\"Input\"] = Field(default=\"Input\", frozen=True)  # pyright: ignore\n    name: str\n    \"\"\"The name of the form control field used when submitting forms.\"\"\"\n    inputType: Literal[\"number\", \"email\", \"text\", \"password\", \"tel\", \"url\"] | None = (\n        None\n    )\n    \"\"\"Native input type.\"\"\"\n    defaultValue: str | None = None\n    \"\"\"Initial value of the input.\"\"\"\n    required: bool | None = None\n    \"\"\"Mark the input as required for form submission.\"\"\"\n    pattern: str | None = None\n    \"\"\"Regex pattern for input validation.\"\"\"\n    placeholder: str | None = None\n    \"\"\"Placeholder text shown when empty.\"\"\"\n    allowAutofillExtensions: bool | None = None\n    \"\"\"Allow password managers / autofill extensions to appear.\"\"\"\n    autoSelect: bool | None = None\n    \"\"\"Select all contents of the input when it mounts.\"\"\"\n    autoFocus: bool | None = None\n    \"\"\"Autofocus the input when it mounts.\"\"\"\n    disabled: bool | None = None\n    \"\"\"Disable interactions and apply disabled styles.\"\"\"\n    variant: Literal[\"soft\", \"outline\"] | None = None\n    \"\"\"Visual style of the input.\"\"\"\n    size: ControlSize | None = None\n    \"\"\"Controls the size of the input control.\"\"\"\n    gutterSize: Literal[\"2xs\", \"xs\", \"sm\", \"md\", \"lg\", \"xl\"] | None = None\n    \"\"\"Controls gutter on the edges of the input; overrides value from `size`.\"\"\"\n    pill: bool | None = None\n    \"\"\"Determines if the input should be fully rounded (pill).\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the form control field used when submitting forms.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.inputType","title":"inputType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inputType: (\n    Literal[\n        \"number\", \"email\", \"text\", \"password\", \"tel\", \"url\"\n    ]\n    | None\n) = None\n</code></pre> <p>Native input type.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.defaultValue","title":"defaultValue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defaultValue: str | None = None\n</code></pre> <p>Initial value of the input.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool | None = None\n</code></pre> <p>Mark the input as required for form submission.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Regex pattern for input validation.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.placeholder","title":"placeholder  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>placeholder: str | None = None\n</code></pre> <p>Placeholder text shown when empty.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.allowAutofillExtensions","title":"allowAutofillExtensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowAutofillExtensions: bool | None = None\n</code></pre> <p>Allow password managers / autofill extensions to appear.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.autoSelect","title":"autoSelect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>autoSelect: bool | None = None\n</code></pre> <p>Select all contents of the input when it mounts.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.autoFocus","title":"autoFocus  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>autoFocus: bool | None = None\n</code></pre> <p>Autofocus the input when it mounts.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool | None = None\n</code></pre> <p>Disable interactions and apply disabled styles.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.variant","title":"variant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variant: Literal['soft', 'outline'] | None = None\n</code></pre> <p>Visual style of the input.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: ControlSize | None = None\n</code></pre> <p>Controls the size of the input control.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.gutterSize","title":"gutterSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gutterSize: (\n    Literal[\"2xs\", \"xs\", \"sm\", \"md\", \"lg\", \"xl\"] | None\n) = None\n</code></pre> <p>Controls gutter on the edges of the input; overrides value from <code>size</code>.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Input.pill","title":"pill  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pill: bool | None = None\n</code></pre> <p>Determines if the input should be fully rounded (pill).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Label","title":"Label","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Form label associated with a field.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Label(WidgetComponentBase):\n    \"\"\"Form label associated with a field.\"\"\"\n\n    type: Literal[\"Label\"] = Field(default=\"Label\", frozen=True)  # pyright: ignore\n    value: str\n    \"\"\"Text content of the label.\"\"\"\n    fieldName: str\n    \"\"\"Name of the field this label describes.\"\"\"\n    size: TextSize | None = None\n    \"\"\"Size of the label text; accepts a text size token.\"\"\"\n    weight: Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None = None\n    \"\"\"Font weight; accepts a font weight token.\"\"\"\n    textAlign: TextAlign | None = None\n    \"\"\"Horizontal text alignment.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware `{ light, dark }`.\n\n    Text color tokens: `prose` `primary` `emphasis` `secondary` `tertiary` `success` `warning` `danger`\n\n    Primitive color token: e.g. `red-100`, `blue-900`, `gray-500`\n    \"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Label.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Text content of the label.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Label.fieldName","title":"fieldName  <code>instance-attribute</code>","text":"<pre><code>fieldName: str\n</code></pre> <p>Name of the field this label describes.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Label.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: TextSize | None = None\n</code></pre> <p>Size of the label text; accepts a text size token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Label.weight","title":"weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>weight: (\n    Literal[\"normal\", \"medium\", \"semibold\", \"bold\"] | None\n) = None\n</code></pre> <p>Font weight; accepts a font weight token.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Label.textAlign","title":"textAlign  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>textAlign: TextAlign | None = None\n</code></pre> <p>Horizontal text alignment.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Label.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Text color; accepts a text color token, a primitive color token, a CSS color string, or a theme-aware <code>{ light, dark }</code>.</p> <p>Text color tokens: <code>prose</code> <code>primary</code> <code>emphasis</code> <code>secondary</code> <code>tertiary</code> <code>success</code> <code>warning</code> <code>danger</code></p> <p>Primitive color token: e.g. <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioOption","title":"RadioOption","text":"<p>               Bases: <code>TypedDict</code></p> <p>Option inside a <code>RadioGroup</code> widget.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class RadioOption(TypedDict):\n    \"\"\"Option inside a ``RadioGroup`` widget.\"\"\"\n\n    label: str\n    \"\"\"Label displayed next to the radio option.\"\"\"\n    value: str\n    \"\"\"Value submitted when the radio option is selected.\"\"\"\n    disabled: NotRequired[bool]\n    \"\"\"Disables a specific radio option.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioOption.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str\n</code></pre> <p>Label displayed next to the radio option.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioOption.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Value submitted when the radio option is selected.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioOption.disabled","title":"disabled  <code>instance-attribute</code>","text":"<pre><code>disabled: NotRequired[bool]\n</code></pre> <p>Disables a specific radio option.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup","title":"RadioGroup","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Grouped radio input control.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class RadioGroup(WidgetComponentBase):\n    \"\"\"Grouped radio input control.\"\"\"\n\n    type: Literal[\"RadioGroup\"] = Field(default=\"RadioGroup\", frozen=True)  # pyright: ignore\n    name: str\n    \"\"\"The name of the form control field used when submitting forms.\"\"\"\n    options: list[RadioOption] | None = None\n    \"\"\"Array of options to render as radio items.\"\"\"\n    ariaLabel: str | None = None\n    \"\"\"Accessible label for the radio group; falls back to `name`.\"\"\"\n    onChangeAction: ActionConfig | None = None\n    \"\"\"Action dispatched when the selected value changes.\"\"\"\n    defaultValue: str | None = None\n    \"\"\"Initial selected value of the radio group.\"\"\"\n    direction: Literal[\"row\", \"col\"] | None = None\n    \"\"\"Layout direction of the radio items.\"\"\"\n    disabled: bool | None = None\n    \"\"\"Disable interactions and apply disabled styles for the entire group.\"\"\"\n    required: bool | None = None\n    \"\"\"Mark the group as required for form submission.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the form control field used when submitting forms.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: list[RadioOption] | None = None\n</code></pre> <p>Array of options to render as radio items.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.ariaLabel","title":"ariaLabel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ariaLabel: str | None = None\n</code></pre> <p>Accessible label for the radio group; falls back to <code>name</code>.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.onChangeAction","title":"onChangeAction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>onChangeAction: ActionConfig | None = None\n</code></pre> <p>Action dispatched when the selected value changes.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.defaultValue","title":"defaultValue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defaultValue: str | None = None\n</code></pre> <p>Initial selected value of the radio group.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.direction","title":"direction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>direction: Literal['row', 'col'] | None = None\n</code></pre> <p>Layout direction of the radio items.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool | None = None\n</code></pre> <p>Disable interactions and apply disabled styles for the entire group.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.RadioGroup.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool | None = None\n</code></pre> <p>Mark the group as required for form submission.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea","title":"Textarea","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Multiline text input component.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Textarea(WidgetComponentBase):\n    \"\"\"Multiline text input component.\"\"\"\n\n    type: Literal[\"Textarea\"] = Field(default=\"Textarea\", frozen=True)  # pyright: ignore\n    name: str\n    \"\"\"The name of the form control field used when submitting forms.\"\"\"\n    defaultValue: str | None = None\n    \"\"\"Initial value of the textarea.\"\"\"\n    required: bool | None = None\n    \"\"\"Mark the textarea as required for form submission.\"\"\"\n    pattern: str | None = None\n    \"\"\"Regex pattern for input validation.\"\"\"\n    placeholder: str | None = None\n    \"\"\"Placeholder text shown when empty.\"\"\"\n    autoSelect: bool | None = None\n    \"\"\"Select all contents of the textarea when it mounts.\"\"\"\n    autoFocus: bool | None = None\n    \"\"\"Autofocus the textarea when it mounts.\"\"\"\n    disabled: bool | None = None\n    \"\"\"Disable interactions and apply disabled styles.\"\"\"\n    variant: Literal[\"soft\", \"outline\"] | None = None\n    \"\"\"Visual style of the textarea.\"\"\"\n    size: ControlSize | None = None\n    \"\"\"Controls the size of the textarea control.\"\"\"\n    gutterSize: Literal[\"2xs\", \"xs\", \"sm\", \"md\", \"lg\", \"xl\"] | None = None\n    \"\"\"Controls gutter on the edges of the textarea; overrides value from `size`.\"\"\"\n    rows: int | None = None\n    \"\"\"Initial number of visible rows.\"\"\"\n    autoResize: bool | None = None\n    \"\"\"Automatically grow/shrink to fit content.\"\"\"\n    maxRows: int | None = None\n    \"\"\"Maximum number of rows when auto-resizing.\"\"\"\n    allowAutofillExtensions: bool | None = None\n    \"\"\"Allow password managers / autofill extensions to appear.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the form control field used when submitting forms.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.defaultValue","title":"defaultValue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defaultValue: str | None = None\n</code></pre> <p>Initial value of the textarea.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool | None = None\n</code></pre> <p>Mark the textarea as required for form submission.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Regex pattern for input validation.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.placeholder","title":"placeholder  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>placeholder: str | None = None\n</code></pre> <p>Placeholder text shown when empty.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.autoSelect","title":"autoSelect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>autoSelect: bool | None = None\n</code></pre> <p>Select all contents of the textarea when it mounts.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.autoFocus","title":"autoFocus  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>autoFocus: bool | None = None\n</code></pre> <p>Autofocus the textarea when it mounts.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool | None = None\n</code></pre> <p>Disable interactions and apply disabled styles.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.variant","title":"variant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variant: Literal['soft', 'outline'] | None = None\n</code></pre> <p>Visual style of the textarea.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: ControlSize | None = None\n</code></pre> <p>Controls the size of the textarea control.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.gutterSize","title":"gutterSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gutterSize: (\n    Literal[\"2xs\", \"xs\", \"sm\", \"md\", \"lg\", \"xl\"] | None\n) = None\n</code></pre> <p>Controls gutter on the edges of the textarea; overrides value from <code>size</code>.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.rows","title":"rows  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rows: int | None = None\n</code></pre> <p>Initial number of visible rows.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.autoResize","title":"autoResize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>autoResize: bool | None = None\n</code></pre> <p>Automatically grow/shrink to fit content.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.maxRows","title":"maxRows  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxRows: int | None = None\n</code></pre> <p>Maximum number of rows when auto-resizing.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Textarea.allowAutofillExtensions","title":"allowAutofillExtensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowAutofillExtensions: bool | None = None\n</code></pre> <p>Allow password managers / autofill extensions to appear.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Transition","title":"Transition","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Wrapper enabling transitions for a child component.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Transition(WidgetComponentBase):\n    \"\"\"Wrapper enabling transitions for a child component.\"\"\"\n\n    type: Literal[\"Transition\"] = Field(default=\"Transition\", frozen=True)  # pyright: ignore\n    children: WidgetComponent | None\n    \"\"\"The child component to animate layout changes for.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Transition.children","title":"children  <code>instance-attribute</code>","text":"<pre><code>children: WidgetComponent | None\n</code></pre> <p>The child component to animate layout changes for.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart","title":"Chart","text":"<p>               Bases: <code>WidgetComponentBase</code></p> <p>Data visualization component for simple bar/line/area charts.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class Chart(WidgetComponentBase):\n    \"\"\"Data visualization component for simple bar/line/area charts.\"\"\"\n\n    type: Literal[\"Chart\"] = Field(default=\"Chart\", frozen=True)  # pyright: ignore\n    data: list[dict[str, str | int | float]]\n    \"\"\"Tabular data for the chart, where each row maps field names to values.\"\"\"\n    series: list[Series]\n    \"\"\"One or more series definitions that describe how to visualize data fields.\"\"\"\n    xAxis: str | XAxisConfig\n    \"\"\"X-axis configuration; either a `dataKey` string or a config object.\"\"\"\n    showYAxis: bool | None = None\n    \"\"\"Controls whether the Y axis is rendered.\"\"\"\n    showLegend: bool | None = None\n    \"\"\"Controls whether a legend is rendered.\"\"\"\n    showTooltip: bool | None = None\n    \"\"\"Controls whether a tooltip is rendered when hovering over a datapoint.\"\"\"\n    barGap: int | None = None\n    \"\"\"Gap between bars within the same category (in px).\"\"\"\n    barCategoryGap: int | None = None\n    \"\"\"Gap between bar categories/groups (in px).\"\"\"\n    flex: int | str | None = None\n    \"\"\"Flex growth/shrink factor for layout.\"\"\"\n    height: int | str | None = None\n    \"\"\"Explicit height; px or CSS string.\"\"\"\n    width: int | str | None = None\n    \"\"\"Explicit width; px or CSS string.\"\"\"\n    size: int | str | None = None\n    \"\"\"Shorthand to set both width and height; px or CSS string.\"\"\"\n    minHeight: int | str | None = None\n    \"\"\"Minimum height; px or CSS string.\"\"\"\n    minWidth: int | str | None = None\n    \"\"\"Minimum width; px or CSS string.\"\"\"\n    minSize: int | str | None = None\n    \"\"\"Shorthand to set both minWidth and minHeight; px or CSS string.\"\"\"\n    maxHeight: int | str | None = None\n    \"\"\"Maximum height; px or CSS string.\"\"\"\n    maxWidth: int | str | None = None\n    \"\"\"Maximum width; px or CSS string.\"\"\"\n    maxSize: int | str | None = None\n    \"\"\"Shorthand to set both maxWidth and maxHeight; px or CSS string.\"\"\"\n    aspectRatio: float | str | None = None\n    \"\"\"Aspect ratio of the chart area (e.g., 16/9); number or CSS string.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: list[dict[str, str | int | float]]\n</code></pre> <p>Tabular data for the chart, where each row maps field names to values.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.series","title":"series  <code>instance-attribute</code>","text":"<pre><code>series: list[Series]\n</code></pre> <p>One or more series definitions that describe how to visualize data fields.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.xAxis","title":"xAxis  <code>instance-attribute</code>","text":"<pre><code>xAxis: str | XAxisConfig\n</code></pre> <p>X-axis configuration; either a <code>dataKey</code> string or a config object.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.showYAxis","title":"showYAxis  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>showYAxis: bool | None = None\n</code></pre> <p>Controls whether the Y axis is rendered.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.showLegend","title":"showLegend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>showLegend: bool | None = None\n</code></pre> <p>Controls whether a legend is rendered.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.showTooltip","title":"showTooltip  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>showTooltip: bool | None = None\n</code></pre> <p>Controls whether a tooltip is rendered when hovering over a datapoint.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.barGap","title":"barGap  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>barGap: int | None = None\n</code></pre> <p>Gap between bars within the same category (in px).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.barCategoryGap","title":"barCategoryGap  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>barCategoryGap: int | None = None\n</code></pre> <p>Gap between bar categories/groups (in px).</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.flex","title":"flex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flex: int | str | None = None\n</code></pre> <p>Flex growth/shrink factor for layout.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: int | str | None = None\n</code></pre> <p>Explicit height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: int | str | None = None\n</code></pre> <p>Explicit width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: int | str | None = None\n</code></pre> <p>Shorthand to set both width and height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.minHeight","title":"minHeight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minHeight: int | str | None = None\n</code></pre> <p>Minimum height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.minWidth","title":"minWidth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minWidth: int | str | None = None\n</code></pre> <p>Minimum width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.minSize","title":"minSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minSize: int | str | None = None\n</code></pre> <p>Shorthand to set both minWidth and minHeight; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.maxHeight","title":"maxHeight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxHeight: int | str | None = None\n</code></pre> <p>Maximum height; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.maxWidth","title":"maxWidth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxWidth: int | str | None = None\n</code></pre> <p>Maximum width; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.maxSize","title":"maxSize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxSize: int | str | None = None\n</code></pre> <p>Shorthand to set both maxWidth and maxHeight; px or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.Chart.aspectRatio","title":"aspectRatio  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aspectRatio: float | str | None = None\n</code></pre> <p>Aspect ratio of the chart area (e.g., 16/9); number or CSS string.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.XAxisConfig","title":"XAxisConfig","text":"<p>               Bases: <code>TypedDict</code></p> <p>Configuration object for the X axis.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class XAxisConfig(TypedDict):\n    \"\"\"Configuration object for the X axis.\"\"\"\n\n    dataKey: str\n    \"\"\"Field name from each data row to use for X-axis categories.\"\"\"\n    hide: NotRequired[bool]\n    \"\"\"Hide the X axis line, ticks, and labels when true.\"\"\"\n    labels: NotRequired[dict[str, str]]\n    \"\"\"Custom mapping of tick values to display labels.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.XAxisConfig.dataKey","title":"dataKey  <code>instance-attribute</code>","text":"<pre><code>dataKey: str\n</code></pre> <p>Field name from each data row to use for X-axis categories.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.XAxisConfig.hide","title":"hide  <code>instance-attribute</code>","text":"<pre><code>hide: NotRequired[bool]\n</code></pre> <p>Hide the X axis line, ticks, and labels when true.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.XAxisConfig.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: NotRequired[dict[str, str]]\n</code></pre> <p>Custom mapping of tick values to display labels.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BarSeries","title":"BarSeries","text":"<p>               Bases: <code>BaseModel</code></p> <p>A bar series plotted from a numeric <code>dataKey</code>. Supports stacking.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class BarSeries(BaseModel):\n    \"\"\"A bar series plotted from a numeric `dataKey`. Supports stacking.\"\"\"\n\n    type: Literal[\"bar\"] = Field(default=\"bar\", frozen=True)\n    label: str | None\n    \"\"\"Legend label for the series.\"\"\"\n    dataKey: str\n    \"\"\"Field name from each data row that contains the numeric value.\"\"\"\n    stack: str | None = None\n    \"\"\"Optional stack group ID. Series with the same ID stack together.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Color for the series; accepts chart color token, a primitive color token, a CSS string, or theme-aware { light, dark }.\n\n    Chart color tokens: `blue` `purple` `orange` `green` `red` `yellow` `pink`\n\n    Primitive color token, e.g., `red-100`, `blue-900`, `gray-500`\n\n    Note: By default, a color will be sequentially assigned from the chart series colors.\n    \"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BarSeries.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str | None\n</code></pre> <p>Legend label for the series.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BarSeries.dataKey","title":"dataKey  <code>instance-attribute</code>","text":"<pre><code>dataKey: str\n</code></pre> <p>Field name from each data row that contains the numeric value.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BarSeries.stack","title":"stack  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stack: str | None = None\n</code></pre> <p>Optional stack group ID. Series with the same ID stack together.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.BarSeries.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Color for the series; accepts chart color token, a primitive color token, a CSS string, or theme-aware { light, dark }.</p> <p>Chart color tokens: <code>blue</code> <code>purple</code> <code>orange</code> <code>green</code> <code>red</code> <code>yellow</code> <code>pink</code></p> <p>Primitive color token, e.g., <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p> <p>Note: By default, a color will be sequentially assigned from the chart series colors.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.AreaSeries","title":"AreaSeries","text":"<p>               Bases: <code>BaseModel</code></p> <p>An area series plotted from a numeric <code>dataKey</code>. Supports stacking and curves.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class AreaSeries(BaseModel):\n    \"\"\"An area series plotted from a numeric `dataKey`. Supports stacking and curves.\"\"\"\n\n    type: Literal[\"area\"] = Field(default=\"area\", frozen=True)\n    label: str | None\n    \"\"\"Legend label for the series.\"\"\"\n    dataKey: str\n    \"\"\"Field name from each data row that contains the numeric value.\"\"\"\n    stack: str | None = None\n    \"\"\"Optional stack group ID. Series with the same ID stack together.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Color for the series; accepts chart color token, a primitive color token, a CSS string, or theme-aware { light, dark }.\n\n    Chart color tokens: `blue` `purple` `orange` `green` `red` `yellow` `pink`\n\n    Primitive color token, e.g., `red-100`, `blue-900`, `gray-500`\n\n    Note: By default, a color will be sequentially assigned from the chart series colors.\n    \"\"\"\n    curveType: None | Literal[CurveType] = None\n    \"\"\"Interpolation curve type used to connect points.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.AreaSeries.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str | None\n</code></pre> <p>Legend label for the series.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.AreaSeries.dataKey","title":"dataKey  <code>instance-attribute</code>","text":"<pre><code>dataKey: str\n</code></pre> <p>Field name from each data row that contains the numeric value.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.AreaSeries.stack","title":"stack  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stack: str | None = None\n</code></pre> <p>Optional stack group ID. Series with the same ID stack together.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.AreaSeries.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Color for the series; accepts chart color token, a primitive color token, a CSS string, or theme-aware { light, dark }.</p> <p>Chart color tokens: <code>blue</code> <code>purple</code> <code>orange</code> <code>green</code> <code>red</code> <code>yellow</code> <code>pink</code></p> <p>Primitive color token, e.g., <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p> <p>Note: By default, a color will be sequentially assigned from the chart series colors.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.AreaSeries.curveType","title":"curveType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>curveType: None | Literal[CurveType] = None\n</code></pre> <p>Interpolation curve type used to connect points.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.LineSeries","title":"LineSeries","text":"<p>               Bases: <code>BaseModel</code></p> <p>A line series plotted from a numeric <code>dataKey</code>. Supports curves.</p> Source code in <code>chatkit/widgets.py</code> <pre><code>class LineSeries(BaseModel):\n    \"\"\"A line series plotted from a numeric `dataKey`. Supports curves.\"\"\"\n\n    type: Literal[\"line\"] = Field(default=\"line\", frozen=True)\n    label: str | None\n    \"\"\"Legend label for the series.\"\"\"\n    dataKey: str\n    \"\"\"Field name from each data row that contains the numeric value.\"\"\"\n    color: str | ThemeColor | None = None\n    \"\"\"\n    Color for the series; accepts chart color token, a primitive color token, a CSS string, or theme-aware { light, dark }.\n\n    Chart color tokens: `blue` `purple` `orange` `green` `red` `yellow` `pink`\n\n    Primitive color token, e.g., `red-100`, `blue-900`, `gray-500`\n\n    Note: By default, a color will be sequentially assigned from the chart series colors.\n    \"\"\"\n    curveType: None | Literal[CurveType] = None\n    \"\"\"Interpolation curve type used to connect points.\"\"\"\n</code></pre>"},{"location":"api/chatkit/widgets/#chatkit.widgets.LineSeries.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str | None\n</code></pre> <p>Legend label for the series.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.LineSeries.dataKey","title":"dataKey  <code>instance-attribute</code>","text":"<pre><code>dataKey: str\n</code></pre> <p>Field name from each data row that contains the numeric value.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.LineSeries.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str | ThemeColor | None = None\n</code></pre> <p>Color for the series; accepts chart color token, a primitive color token, a CSS string, or theme-aware { light, dark }.</p> <p>Chart color tokens: <code>blue</code> <code>purple</code> <code>orange</code> <code>green</code> <code>red</code> <code>yellow</code> <code>pink</code></p> <p>Primitive color token, e.g., <code>red-100</code>, <code>blue-900</code>, <code>gray-500</code></p> <p>Note: By default, a color will be sequentially assigned from the chart series colors.</p>"},{"location":"api/chatkit/widgets/#chatkit.widgets.LineSeries.curveType","title":"curveType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>curveType: None | Literal[CurveType] = None\n</code></pre> <p>Interpolation curve type used to connect points.</p>"},{"location":"api/chatkit/widgets/sports_widgets/","title":"sports_widgets","text":"<p>ChatKit Sports Betting Widgets Custom widgets for the Professor Lock sports betting assistant</p>"},{"location":"api/chatkit/widgets/sports_widgets/#chatkit.widgets.sports_widgets.SportsWidgets","title":"SportsWidgets","text":"<p>Factory class for creating sports betting widgets</p> Source code in <code>chatkit/widgets/sports_widgets.py</code> <pre><code>class SportsWidgets:\n    \"\"\"Factory class for creating sports betting widgets\"\"\"\n\n    @staticmethod\n    def search_progress(\n        status: Literal['searching', 'analyzing', 'complete'] = 'searching',\n        current_search: Optional[str] = None,\n        sources: Optional[List[str]] = None,\n        progress: int = 0\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Create a search progress widget\"\"\"\n        status_config = {\n            'searching': {'icon': '\ud83d\udd0d', 'text': 'Searching for data...', 'color': '#3B82F6'},\n            'analyzing': {'icon': '\ud83e\udd14', 'text': 'Analyzing results...', 'color': '#F59E0B'},\n            'complete': {'icon': '\u2705', 'text': 'Search complete!', 'color': '#10B981'}\n        }\n\n        config = status_config[status]\n        sources = sources or []\n\n        widget = {\n            'type': 'Card',\n            'size': 'md',\n            'theme': 'dark',\n            'children': [\n                {\n                    'type': 'Row',\n                    'gap': 12,\n                    'align': 'center',\n                    'children': [\n                        {'type': 'Text', 'value': config['icon'], 'size': 'xl'},\n                        {\n                            'type': 'Col',\n                            'flex': 1,\n                            'gap': 4,\n                            'children': [\n                                {'type': 'Text', 'value': config['text'], 'weight': 'semibold', 'color': config['color']}\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n\n        if current_search:\n            widget['children'][0]['children'][1]['children'].append({\n                'type': 'Text', 'value': current_search, 'size': 'sm', 'color': '#9CA3AF', 'truncate': True\n            })\n\n        if progress &gt; 0:\n            widget['children'].append({\n                'type': 'Box', 'height': 4, 'background': '#374151', 'radius': 'full',\n                'children': [{'type': 'Box', 'height': 4, 'width': f'{progress}%', 'background': config['color'], 'radius': 'full'}]\n            })\n\n        if sources:\n            widget['children'].append({\n                'type': 'Row', 'gap': 8,\n                'children': [{'type': 'Badge', 'label': src, 'size': 'sm', 'variant': 'soft', 'color': 'info'} for src in sources]\n            })\n\n        return widget\n\n    @staticmethod\n    def parlay_builder(picks: List[Dict], total_odds: str = '+0', stake: float = 10) -&gt; Dict[str, Any]:\n        \"\"\"Create a parlay builder widget\"\"\"\n        selected = [p for p in picks if p.get('selected', False)]\n\n        widget = {\n            'type': 'Card',\n            'size': 'lg',\n            'theme': 'dark',\n            'children': [\n                {\n                    'type': 'Row',\n                    'justify': 'between',\n                    'children': [\n                        {'type': 'Title', 'value': '\ud83c\udfaf Parlay Builder', 'size': 'lg', 'weight': 'bold'}\n                    ]\n                }\n            ]\n        }\n\n        if selected:\n            widget['children'][0]['children'].append(\n                {'type': 'Badge', 'label': f'{len(selected)} picks', 'color': 'success'}\n            )\n\n        pick_cards = []\n        for pick in picks:\n            is_sel = pick.get('selected', False)\n            pick_cards.append({\n                'type': 'Box',\n                'padding': 12,\n                'background': '#1E3A5F' if is_sel else '#1F2937',\n                'radius': 'md',\n                'border': {'size': 2 if is_sel else 1, 'color': '#3B82F6' if is_sel else '#374151'},\n                'children': [{\n                    'type': 'Row',\n                    'justify': 'between',\n                    'children': [\n                        {\n                            'type': 'Col',\n                            'children': [\n                                {'type': 'Text', 'value': pick['team'], 'weight': 'semibold'},\n                                {'type': 'Text', 'value': pick['bet'], 'size': 'sm', 'color': '#9CA3AF'}\n                            ]\n                        },\n                        {\n                            'type': 'Col',\n                            'children': [\n                                {'type': 'Text', 'value': pick['odds'], 'weight': 'bold', 'color': '#10B981'},\n                                {'type': 'Button', 'label': 'Remove' if is_sel else 'Add', 'size': 'xs',\n                                 'variant': 'outline' if is_sel else 'solid', 'color': 'danger' if is_sel else 'primary',\n                                 'onClickAction': {'type': 'toggle_parlay_pick', 'pickId': pick['id']}}\n                            ]\n                        }\n                    ]\n                }]\n            })\n\n        widget['children'].append({'type': 'Col', 'gap': 8, 'children': pick_cards})\n\n        if selected:\n            widget['children'].extend([\n                {\n                    'type': 'Box',\n                    'padding': 12,\n                    'background': '#1E293B',\n                    'children': [{\n                        'type': 'Col',\n                        'gap': 8,\n                        'children': [\n                            {'type': 'Row', 'justify': 'between', 'children': [\n                                {'type': 'Text', 'value': 'Total Odds:', 'color': '#9CA3AF'},\n                                {'type': 'Text', 'value': total_odds, 'weight': 'bold', 'color': '#F59E0B'}\n                            ]},\n                            {'type': 'Row', 'justify': 'between', 'children': [\n                                {'type': 'Text', 'value': 'Potential:', 'weight': 'semibold'},\n                                {'type': 'Text', 'value': f'${stake * 2.5:.2f}', 'size': 'lg', 'weight': 'bold', 'color': '#10B981'}\n                            ]}\n                        ]\n                    }]\n                },\n                {\n                    'type': 'Button',\n                    'label': 'Place Parlay',\n                    'style': 'primary',\n                    'block': True,\n                    'onClickAction': {'type': 'place_parlay', 'picks': [p['id'] for p in selected]}\n                }\n            ])\n\n        return widget\n\n    @staticmethod\n    def odds_table(title: str, team1: str, team2: str, odds: List[Dict]) -&gt; Dict[str, Any]:\n        \"\"\"Create an odds comparison table\"\"\"\n        return {\n            'type': 'Card',\n            'size': 'full',\n            'theme': 'dark',\n            'children': [\n                {'type': 'Title', 'value': title, 'size': 'lg', 'weight': 'bold'},\n                {\n                    'type': 'Col',\n                    'children': [\n                        {\n                            'type': 'Row',\n                            'padding': 8,\n                            'background': '#1E293B' if i % 2 == 0 else 'transparent',\n                            'children': [\n                                {'type': 'Text', 'value': row['book'], 'width': '25%'},\n                                {'type': 'Badge', 'label': row['team1Odds'], 'color': 'info', 'size': 'sm'},\n                                {'type': 'Badge', 'label': row['team2Odds'], 'color': 'info', 'size': 'sm'},\n                                {'type': 'Text', 'value': row.get('overUnder', '-'), 'width': '25%'}\n                            ]\n                        } for i, row in enumerate(odds)\n                    ]\n                }\n            ]\n        }\n\n    @staticmethod\n    def player_card(name: str, team: str, position: str, stats: List[Dict], props: List[Dict] = None) -&gt; Dict[str, Any]:\n        \"\"\"Create a player card widget\"\"\"\n        widget = {\n            'type': 'Card',\n            'size': 'lg',\n            'theme': 'dark',\n            'children': [\n                {\n                    'type': 'Row',\n                    'children': [\n                        {\n                            'type': 'Col',\n                            'children': [\n                                {'type': 'Title', 'value': name, 'size': 'xl', 'weight': 'bold'},\n                                {\n                                    'type': 'Row',\n                                    'gap': 8,\n                                    'children': [\n                                        {'type': 'Badge', 'label': team, 'color': 'info'},\n                                        {'type': 'Badge', 'label': position, 'color': 'secondary'}\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    'type': 'Row',\n                    'gap': 12,\n                    'children': [\n                        {\n                            'type': 'Box',\n                            'padding': 8,\n                            'background': '#1E293B',\n                            'children': [{\n                                'type': 'Col',\n                                'align': 'center',\n                                'children': [\n                                    {'type': 'Caption', 'value': stat['label'], 'color': '#94A3B8'},\n                                    {'type': 'Text', 'value': stat['value'], 'weight': 'bold', 'size': 'lg'}\n                                ]\n                            }]\n                        } for stat in stats\n                    ]\n                }\n            ]\n        }\n\n        if props:\n            prop_widgets = []\n            for prop in props:\n                prop_widgets.append({\n                    'type': 'Box',\n                    'padding': 12,\n                    'background': '#1E293B',\n                    'children': [{\n                        'type': 'Row',\n                        'justify': 'between',\n                        'children': [\n                            {'type': 'Text', 'value': prop['market'], 'weight': 'semibold'},\n                            {\n                                'type': 'Row',\n                                'gap': 8,\n                                'children': [\n                                    {'type': 'Button', 'label': f\"O {prop['over']}\", 'size': 'sm',\n                                     'onClickAction': {'type': 'select_prop', 'player': name, 'market': prop['market'], 'selection': 'over'}},\n                                    {'type': 'Button', 'label': f\"U {prop['under']}\", 'size': 'sm',\n                                     'onClickAction': {'type': 'select_prop', 'player': name, 'market': prop['market'], 'selection': 'under'}}\n                                ]\n                            }\n                        ]\n                    }]\n                })\n            widget['children'].append({'type': 'Col', 'gap': 8, 'children': prop_widgets})\n\n        return widget\n\n    @staticmethod\n    def insights(insights: List[Dict], title: str = '\ud83d\udca1 Key Insights') -&gt; Dict[str, Any]:\n        \"\"\"Create a betting insights widget\"\"\"\n        return {\n            'type': 'Card',\n            'size': 'md',\n            'theme': 'dark',\n            'children': [\n                {'type': 'Title', 'value': title, 'size': 'lg', 'weight': 'bold'},\n                {\n                    'type': 'Col',\n                    'gap': 12,\n                    'children': [\n                        {\n                            'type': 'Box',\n                            'padding': 12,\n                            'background': '#1E293B',\n                            'children': [{\n                                'type': 'Row',\n                                'gap': 12,\n                                'children': [\n                                    {'type': 'Text', 'value': ins.get('icon', '\ud83d\udca1'), 'size': 'xl'},\n                                    {\n                                        'type': 'Col',\n                                        'flex': 1,\n                                        'children': [\n                                            {\n                                                'type': 'Row',\n                                                'justify': 'between',\n                                                'children': [\n                                                    {'type': 'Text', 'value': ins['title'], 'weight': 'semibold'},\n                                                    {'type': 'Badge', 'label': f\"{ins['confidence']}%\", 'color': 'success', 'size': 'sm'} if 'confidence' in ins else {}\n                                                ]\n                                            },\n                                            {'type': 'Text', 'value': ins['description'], 'size': 'sm', 'color': '#94A3B8'}\n                                        ]\n                                    }\n                                ]\n                            }]\n                        } for ins in insights\n                    ]\n                }\n            ]\n        }\n</code></pre>"},{"location":"api/chatkit/widgets/sports_widgets/#chatkit.widgets.sports_widgets.SportsWidgets.search_progress","title":"search_progress  <code>staticmethod</code>","text":"<pre><code>search_progress(\n    status: Literal[\n        \"searching\", \"analyzing\", \"complete\"\n    ] = \"searching\",\n    current_search: Optional[str] = None,\n    sources: Optional[List[str]] = None,\n    progress: int = 0,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a search progress widget</p> Source code in <code>chatkit/widgets/sports_widgets.py</code> <pre><code>@staticmethod\ndef search_progress(\n    status: Literal['searching', 'analyzing', 'complete'] = 'searching',\n    current_search: Optional[str] = None,\n    sources: Optional[List[str]] = None,\n    progress: int = 0\n) -&gt; Dict[str, Any]:\n    \"\"\"Create a search progress widget\"\"\"\n    status_config = {\n        'searching': {'icon': '\ud83d\udd0d', 'text': 'Searching for data...', 'color': '#3B82F6'},\n        'analyzing': {'icon': '\ud83e\udd14', 'text': 'Analyzing results...', 'color': '#F59E0B'},\n        'complete': {'icon': '\u2705', 'text': 'Search complete!', 'color': '#10B981'}\n    }\n\n    config = status_config[status]\n    sources = sources or []\n\n    widget = {\n        'type': 'Card',\n        'size': 'md',\n        'theme': 'dark',\n        'children': [\n            {\n                'type': 'Row',\n                'gap': 12,\n                'align': 'center',\n                'children': [\n                    {'type': 'Text', 'value': config['icon'], 'size': 'xl'},\n                    {\n                        'type': 'Col',\n                        'flex': 1,\n                        'gap': 4,\n                        'children': [\n                            {'type': 'Text', 'value': config['text'], 'weight': 'semibold', 'color': config['color']}\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n\n    if current_search:\n        widget['children'][0]['children'][1]['children'].append({\n            'type': 'Text', 'value': current_search, 'size': 'sm', 'color': '#9CA3AF', 'truncate': True\n        })\n\n    if progress &gt; 0:\n        widget['children'].append({\n            'type': 'Box', 'height': 4, 'background': '#374151', 'radius': 'full',\n            'children': [{'type': 'Box', 'height': 4, 'width': f'{progress}%', 'background': config['color'], 'radius': 'full'}]\n        })\n\n    if sources:\n        widget['children'].append({\n            'type': 'Row', 'gap': 8,\n            'children': [{'type': 'Badge', 'label': src, 'size': 'sm', 'variant': 'soft', 'color': 'info'} for src in sources]\n        })\n\n    return widget\n</code></pre>"},{"location":"api/chatkit/widgets/sports_widgets/#chatkit.widgets.sports_widgets.SportsWidgets.parlay_builder","title":"parlay_builder  <code>staticmethod</code>","text":"<pre><code>parlay_builder(\n    picks: List[Dict],\n    total_odds: str = \"+0\",\n    stake: float = 10,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a parlay builder widget</p> Source code in <code>chatkit/widgets/sports_widgets.py</code> <pre><code>@staticmethod\ndef parlay_builder(picks: List[Dict], total_odds: str = '+0', stake: float = 10) -&gt; Dict[str, Any]:\n    \"\"\"Create a parlay builder widget\"\"\"\n    selected = [p for p in picks if p.get('selected', False)]\n\n    widget = {\n        'type': 'Card',\n        'size': 'lg',\n        'theme': 'dark',\n        'children': [\n            {\n                'type': 'Row',\n                'justify': 'between',\n                'children': [\n                    {'type': 'Title', 'value': '\ud83c\udfaf Parlay Builder', 'size': 'lg', 'weight': 'bold'}\n                ]\n            }\n        ]\n    }\n\n    if selected:\n        widget['children'][0]['children'].append(\n            {'type': 'Badge', 'label': f'{len(selected)} picks', 'color': 'success'}\n        )\n\n    pick_cards = []\n    for pick in picks:\n        is_sel = pick.get('selected', False)\n        pick_cards.append({\n            'type': 'Box',\n            'padding': 12,\n            'background': '#1E3A5F' if is_sel else '#1F2937',\n            'radius': 'md',\n            'border': {'size': 2 if is_sel else 1, 'color': '#3B82F6' if is_sel else '#374151'},\n            'children': [{\n                'type': 'Row',\n                'justify': 'between',\n                'children': [\n                    {\n                        'type': 'Col',\n                        'children': [\n                            {'type': 'Text', 'value': pick['team'], 'weight': 'semibold'},\n                            {'type': 'Text', 'value': pick['bet'], 'size': 'sm', 'color': '#9CA3AF'}\n                        ]\n                    },\n                    {\n                        'type': 'Col',\n                        'children': [\n                            {'type': 'Text', 'value': pick['odds'], 'weight': 'bold', 'color': '#10B981'},\n                            {'type': 'Button', 'label': 'Remove' if is_sel else 'Add', 'size': 'xs',\n                             'variant': 'outline' if is_sel else 'solid', 'color': 'danger' if is_sel else 'primary',\n                             'onClickAction': {'type': 'toggle_parlay_pick', 'pickId': pick['id']}}\n                        ]\n                    }\n                ]\n            }]\n        })\n\n    widget['children'].append({'type': 'Col', 'gap': 8, 'children': pick_cards})\n\n    if selected:\n        widget['children'].extend([\n            {\n                'type': 'Box',\n                'padding': 12,\n                'background': '#1E293B',\n                'children': [{\n                    'type': 'Col',\n                    'gap': 8,\n                    'children': [\n                        {'type': 'Row', 'justify': 'between', 'children': [\n                            {'type': 'Text', 'value': 'Total Odds:', 'color': '#9CA3AF'},\n                            {'type': 'Text', 'value': total_odds, 'weight': 'bold', 'color': '#F59E0B'}\n                        ]},\n                        {'type': 'Row', 'justify': 'between', 'children': [\n                            {'type': 'Text', 'value': 'Potential:', 'weight': 'semibold'},\n                            {'type': 'Text', 'value': f'${stake * 2.5:.2f}', 'size': 'lg', 'weight': 'bold', 'color': '#10B981'}\n                        ]}\n                    ]\n                }]\n            },\n            {\n                'type': 'Button',\n                'label': 'Place Parlay',\n                'style': 'primary',\n                'block': True,\n                'onClickAction': {'type': 'place_parlay', 'picks': [p['id'] for p in selected]}\n            }\n        ])\n\n    return widget\n</code></pre>"},{"location":"api/chatkit/widgets/sports_widgets/#chatkit.widgets.sports_widgets.SportsWidgets.odds_table","title":"odds_table  <code>staticmethod</code>","text":"<pre><code>odds_table(\n    title: str, team1: str, team2: str, odds: List[Dict]\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create an odds comparison table</p> Source code in <code>chatkit/widgets/sports_widgets.py</code> <pre><code>@staticmethod\ndef odds_table(title: str, team1: str, team2: str, odds: List[Dict]) -&gt; Dict[str, Any]:\n    \"\"\"Create an odds comparison table\"\"\"\n    return {\n        'type': 'Card',\n        'size': 'full',\n        'theme': 'dark',\n        'children': [\n            {'type': 'Title', 'value': title, 'size': 'lg', 'weight': 'bold'},\n            {\n                'type': 'Col',\n                'children': [\n                    {\n                        'type': 'Row',\n                        'padding': 8,\n                        'background': '#1E293B' if i % 2 == 0 else 'transparent',\n                        'children': [\n                            {'type': 'Text', 'value': row['book'], 'width': '25%'},\n                            {'type': 'Badge', 'label': row['team1Odds'], 'color': 'info', 'size': 'sm'},\n                            {'type': 'Badge', 'label': row['team2Odds'], 'color': 'info', 'size': 'sm'},\n                            {'type': 'Text', 'value': row.get('overUnder', '-'), 'width': '25%'}\n                        ]\n                    } for i, row in enumerate(odds)\n                ]\n            }\n        ]\n    }\n</code></pre>"},{"location":"api/chatkit/widgets/sports_widgets/#chatkit.widgets.sports_widgets.SportsWidgets.player_card","title":"player_card  <code>staticmethod</code>","text":"<pre><code>player_card(\n    name: str,\n    team: str,\n    position: str,\n    stats: List[Dict],\n    props: List[Dict] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a player card widget</p> Source code in <code>chatkit/widgets/sports_widgets.py</code> <pre><code>@staticmethod\ndef player_card(name: str, team: str, position: str, stats: List[Dict], props: List[Dict] = None) -&gt; Dict[str, Any]:\n    \"\"\"Create a player card widget\"\"\"\n    widget = {\n        'type': 'Card',\n        'size': 'lg',\n        'theme': 'dark',\n        'children': [\n            {\n                'type': 'Row',\n                'children': [\n                    {\n                        'type': 'Col',\n                        'children': [\n                            {'type': 'Title', 'value': name, 'size': 'xl', 'weight': 'bold'},\n                            {\n                                'type': 'Row',\n                                'gap': 8,\n                                'children': [\n                                    {'type': 'Badge', 'label': team, 'color': 'info'},\n                                    {'type': 'Badge', 'label': position, 'color': 'secondary'}\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                'type': 'Row',\n                'gap': 12,\n                'children': [\n                    {\n                        'type': 'Box',\n                        'padding': 8,\n                        'background': '#1E293B',\n                        'children': [{\n                            'type': 'Col',\n                            'align': 'center',\n                            'children': [\n                                {'type': 'Caption', 'value': stat['label'], 'color': '#94A3B8'},\n                                {'type': 'Text', 'value': stat['value'], 'weight': 'bold', 'size': 'lg'}\n                            ]\n                        }]\n                    } for stat in stats\n                ]\n            }\n        ]\n    }\n\n    if props:\n        prop_widgets = []\n        for prop in props:\n            prop_widgets.append({\n                'type': 'Box',\n                'padding': 12,\n                'background': '#1E293B',\n                'children': [{\n                    'type': 'Row',\n                    'justify': 'between',\n                    'children': [\n                        {'type': 'Text', 'value': prop['market'], 'weight': 'semibold'},\n                        {\n                            'type': 'Row',\n                            'gap': 8,\n                            'children': [\n                                {'type': 'Button', 'label': f\"O {prop['over']}\", 'size': 'sm',\n                                 'onClickAction': {'type': 'select_prop', 'player': name, 'market': prop['market'], 'selection': 'over'}},\n                                {'type': 'Button', 'label': f\"U {prop['under']}\", 'size': 'sm',\n                                 'onClickAction': {'type': 'select_prop', 'player': name, 'market': prop['market'], 'selection': 'under'}}\n                            ]\n                        }\n                    ]\n                }]\n            })\n        widget['children'].append({'type': 'Col', 'gap': 8, 'children': prop_widgets})\n\n    return widget\n</code></pre>"},{"location":"api/chatkit/widgets/sports_widgets/#chatkit.widgets.sports_widgets.SportsWidgets.insights","title":"insights  <code>staticmethod</code>","text":"<pre><code>insights(\n    insights: List[Dict], title: str = \"\ud83d\udca1 Key Insights\"\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a betting insights widget</p> Source code in <code>chatkit/widgets/sports_widgets.py</code> <pre><code>@staticmethod\ndef insights(insights: List[Dict], title: str = '\ud83d\udca1 Key Insights') -&gt; Dict[str, Any]:\n    \"\"\"Create a betting insights widget\"\"\"\n    return {\n        'type': 'Card',\n        'size': 'md',\n        'theme': 'dark',\n        'children': [\n            {'type': 'Title', 'value': title, 'size': 'lg', 'weight': 'bold'},\n            {\n                'type': 'Col',\n                'gap': 12,\n                'children': [\n                    {\n                        'type': 'Box',\n                        'padding': 12,\n                        'background': '#1E293B',\n                        'children': [{\n                            'type': 'Row',\n                            'gap': 12,\n                            'children': [\n                                {'type': 'Text', 'value': ins.get('icon', '\ud83d\udca1'), 'size': 'xl'},\n                                {\n                                    'type': 'Col',\n                                    'flex': 1,\n                                    'children': [\n                                        {\n                                            'type': 'Row',\n                                            'justify': 'between',\n                                            'children': [\n                                                {'type': 'Text', 'value': ins['title'], 'weight': 'semibold'},\n                                                {'type': 'Badge', 'label': f\"{ins['confidence']}%\", 'color': 'success', 'size': 'sm'} if 'confidence' in ins else {}\n                                            ]\n                                        },\n                                        {'type': 'Text', 'value': ins['description'], 'size': 'sm', 'color': '#94A3B8'}\n                                    ]\n                                }\n                            ]\n                        }]\n                    } for ins in insights\n                ]\n            }\n        ]\n    }\n</code></pre>"}]}